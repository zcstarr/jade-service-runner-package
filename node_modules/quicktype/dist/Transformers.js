"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var Type_1 = require("./Type");
var TypeAttributes_1 = require("./TypeAttributes");
var Support_1 = require("./Support");
function debugStringForType(t) {
    var target = followTargetType(t);
    if (t === target) {
        return t.kind;
    }
    return t.kind + " (" + target.kind + ")";
}
var Transformer = /** @class */ (function () {
    function Transformer(kind, sourceTypeRef) {
        this.kind = kind;
        this.sourceTypeRef = sourceTypeRef;
    }
    Object.defineProperty(Transformer.prototype, "sourceType", {
        get: function () {
            return this.sourceTypeRef.deref()[0];
        },
        enumerable: true,
        configurable: true
    });
    Transformer.prototype.getChildren = function () {
        return immutable_1.OrderedSet([this.sourceType]);
    };
    Transformer.prototype.equals = function (other) {
        if (!(other instanceof Transformer))
            return false;
        return this.sourceTypeRef.equals(other.sourceTypeRef);
    };
    Transformer.prototype.hashCode = function () {
        return this.sourceTypeRef.hashCode();
    };
    Transformer.prototype.debugDescription = function () {
        return debugStringForType(this.sourceType) + " -> " + this.kind;
    };
    Transformer.prototype.debugPrintContinuations = function (_indent) {
        return;
    };
    Transformer.prototype.debugPrint = function (indent) {
        console.log(Support_1.indentationString(indent) + this.debugDescription());
        this.debugPrintContinuations(indent + 1);
    };
    return Transformer;
}());
exports.Transformer = Transformer;
var ProducerTransformer = /** @class */ (function (_super) {
    __extends(ProducerTransformer, _super);
    function ProducerTransformer(kind, sourceTypeRef, consumer) {
        var _this = _super.call(this, kind, sourceTypeRef) || this;
        _this.consumer = consumer;
        return _this;
    }
    ProducerTransformer.prototype.getChildren = function () {
        var children = _super.prototype.getChildren.call(this);
        if (this.consumer === undefined)
            return children;
        return children.union(this.consumer.getChildren());
    };
    ProducerTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof ProducerTransformer))
            return false;
        return immutable_1.is(this.consumer, other.consumer);
    };
    ProducerTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, immutable_1.hash(this.consumer));
    };
    ProducerTransformer.prototype.debugPrintContinuations = function (indent) {
        if (this.consumer === undefined)
            return;
        this.consumer.debugPrint(indent);
    };
    return ProducerTransformer;
}(Transformer));
exports.ProducerTransformer = ProducerTransformer;
var MatchTransformer = /** @class */ (function (_super) {
    __extends(MatchTransformer, _super);
    function MatchTransformer(kind, sourceTypeRef, transformer) {
        var _this = _super.call(this, kind, sourceTypeRef) || this;
        _this.transformer = transformer;
        return _this;
    }
    MatchTransformer.prototype.getChildren = function () {
        return _super.prototype.getChildren.call(this).union(this.transformer.getChildren());
    };
    MatchTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof MatchTransformer))
            return false;
        return this.transformer.equals(other.transformer);
    };
    MatchTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, this.transformer.hashCode());
    };
    MatchTransformer.prototype.debugPrintContinuations = function (indent) {
        this.transformer.debugPrint(indent);
    };
    return MatchTransformer;
}(Transformer));
exports.MatchTransformer = MatchTransformer;
var DecodingTransformer = /** @class */ (function (_super) {
    __extends(DecodingTransformer, _super);
    function DecodingTransformer(sourceTypeRef, consumer) {
        return _super.call(this, "decode", sourceTypeRef, consumer) || this;
    }
    DecodingTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        if (continuationTransformer !== undefined) {
            return Support_1.panic("Reversing a decoding transformer cannot have a continuation");
        }
        if (this.consumer === undefined) {
            return new EncodingTransformer(targetTypeRef);
        }
        else {
            return this.consumer.reverse(targetTypeRef, new EncodingTransformer(this.consumer.sourceTypeRef));
        }
    };
    DecodingTransformer.prototype.reconstitute = function (builder) {
        return new DecodingTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), Support_1.mapOptional(function (xfer) { return xfer.reconstitute(builder); }, this.consumer));
    };
    DecodingTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        return other instanceof StringProducerTransformer;
    };
    return DecodingTransformer;
}(ProducerTransformer));
exports.DecodingTransformer = DecodingTransformer;
var EncodingTransformer = /** @class */ (function (_super) {
    __extends(EncodingTransformer, _super);
    function EncodingTransformer(sourceTypeRef) {
        return _super.call(this, "encode", sourceTypeRef) || this;
    }
    EncodingTransformer.prototype.reverse = function (_targetTypeRef, _continuationTransformer) {
        return Support_1.panic("Can't reverse encoding transformer");
    };
    EncodingTransformer.prototype.reconstitute = function (builder) {
        return new EncodingTransformer(builder.reconstituteTypeRef(this.sourceTypeRef));
    };
    EncodingTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof EncodingTransformer))
            return false;
        return true;
    };
    return EncodingTransformer;
}(Transformer));
exports.EncodingTransformer = EncodingTransformer;
var ChoiceTransformer = /** @class */ (function (_super) {
    __extends(ChoiceTransformer, _super);
    function ChoiceTransformer(sourceTypeRef, transformers) {
        var _this = _super.call(this, "choice", sourceTypeRef) || this;
        _this.transformers = transformers;
        return _this;
    }
    ChoiceTransformer.prototype.getChildren = function () {
        var children = _super.prototype.getChildren.call(this);
        this.transformers.forEach(function (xfer) {
            children = children.union(xfer.getChildren());
        });
        return children;
    };
    ChoiceTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        var transformers = this.transformers.map(function (xfer) { return xfer.reverse(targetTypeRef, continuationTransformer); });
        return new ChoiceTransformer(targetTypeRef, transformers);
    };
    ChoiceTransformer.prototype.reconstitute = function (builder) {
        return new ChoiceTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), this.transformers.map(function (xfer) { return xfer.reconstitute(builder); }));
    };
    ChoiceTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof ChoiceTransformer))
            return false;
        return this.transformers.equals(other.transformers);
    };
    ChoiceTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, this.transformers.hashCode());
    };
    ChoiceTransformer.prototype.debugPrintContinuations = function (indent) {
        this.transformers.forEach(function (xfer) { return xfer.debugPrint(indent); });
    };
    return ChoiceTransformer;
}(Transformer));
exports.ChoiceTransformer = ChoiceTransformer;
var DecodingChoiceTransformer = /** @class */ (function (_super) {
    __extends(DecodingChoiceTransformer, _super);
    function DecodingChoiceTransformer(sourceTypeRef, nullTransformer, integerTransformer, doubleTransformer, boolTransformer, stringTransformer, arrayTransformer, objectTransformer) {
        var _this = _super.call(this, "decoding-choice", sourceTypeRef) || this;
        _this.nullTransformer = nullTransformer;
        _this.integerTransformer = integerTransformer;
        _this.doubleTransformer = doubleTransformer;
        _this.boolTransformer = boolTransformer;
        _this.stringTransformer = stringTransformer;
        _this.arrayTransformer = arrayTransformer;
        _this.objectTransformer = objectTransformer;
        return _this;
    }
    DecodingChoiceTransformer.prototype.getChildren = function () {
        var children = _super.prototype.getChildren.call(this);
        if (this.nullTransformer !== undefined) {
            children = children.union(this.nullTransformer.getChildren());
        }
        if (this.integerTransformer !== undefined) {
            children = children.union(this.integerTransformer.getChildren());
        }
        if (this.doubleTransformer !== undefined) {
            children = children.union(this.doubleTransformer.getChildren());
        }
        if (this.boolTransformer !== undefined) {
            children = children.union(this.boolTransformer.getChildren());
        }
        if (this.stringTransformer !== undefined) {
            children = children.union(this.stringTransformer.getChildren());
        }
        if (this.arrayTransformer !== undefined) {
            children = children.union(this.arrayTransformer.getChildren());
        }
        if (this.objectTransformer !== undefined) {
            children = children.union(this.objectTransformer.getChildren());
        }
        return children;
    };
    DecodingChoiceTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        Support_1.assert(continuationTransformer === undefined, "Reversing a decoding transformer can't have a target transformer");
        var transformers = immutable_1.List();
        function addCase(transformer) {
            if (transformer === undefined)
                return;
            transformers = transformers.push(transformer.reverse(targetTypeRef, new EncodingTransformer(transformer.sourceTypeRef)));
        }
        addCase(this.nullTransformer);
        addCase(this.integerTransformer);
        addCase(this.doubleTransformer);
        addCase(this.boolTransformer);
        addCase(this.stringTransformer);
        addCase(this.arrayTransformer);
        addCase(this.objectTransformer);
        return new ChoiceTransformer(targetTypeRef, transformers);
    };
    DecodingChoiceTransformer.prototype.reconstitute = function (builder) {
        function reconstitute(xf) {
            if (xf === undefined)
                return undefined;
            return xf.reconstitute(builder);
        }
        return new DecodingChoiceTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), reconstitute(this.nullTransformer), reconstitute(this.integerTransformer), reconstitute(this.doubleTransformer), reconstitute(this.boolTransformer), reconstitute(this.stringTransformer), reconstitute(this.arrayTransformer), reconstitute(this.objectTransformer));
    };
    DecodingChoiceTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof DecodingChoiceTransformer))
            return false;
        if (!immutable_1.is(this.nullTransformer, other.nullTransformer))
            return false;
        if (!immutable_1.is(this.integerTransformer, other.integerTransformer))
            return false;
        if (!immutable_1.is(this.doubleTransformer, other.doubleTransformer))
            return false;
        if (!immutable_1.is(this.boolTransformer, other.boolTransformer))
            return false;
        if (!immutable_1.is(this.stringTransformer, other.stringTransformer))
            return false;
        if (!immutable_1.is(this.arrayTransformer, other.arrayTransformer))
            return false;
        if (!immutable_1.is(this.objectTransformer, other.objectTransformer))
            return false;
        return true;
    };
    DecodingChoiceTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        h = Support_1.addHashCode(h, immutable_1.hash(this.nullTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.integerTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.doubleTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.boolTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.stringTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.arrayTransformer));
        h = Support_1.addHashCode(h, immutable_1.hash(this.objectTransformer));
        return h;
    };
    DecodingChoiceTransformer.prototype.debugPrintContinuations = function (indent) {
        if (this.nullTransformer !== undefined)
            this.nullTransformer.debugPrint(indent);
        if (this.integerTransformer !== undefined)
            this.integerTransformer.debugPrint(indent);
        if (this.doubleTransformer !== undefined)
            this.doubleTransformer.debugPrint(indent);
        if (this.boolTransformer !== undefined)
            this.boolTransformer.debugPrint(indent);
        if (this.stringTransformer !== undefined)
            this.stringTransformer.debugPrint(indent);
        if (this.arrayTransformer !== undefined)
            this.arrayTransformer.debugPrint(indent);
        if (this.objectTransformer !== undefined)
            this.objectTransformer.debugPrint(indent);
    };
    return DecodingChoiceTransformer;
}(Transformer));
exports.DecodingChoiceTransformer = DecodingChoiceTransformer;
var UnionMemberMatchTransformer = /** @class */ (function (_super) {
    __extends(UnionMemberMatchTransformer, _super);
    function UnionMemberMatchTransformer(sourceTypeRef, transformer, _memberTypeRef) {
        var _this = _super.call(this, "union-member-match", sourceTypeRef, transformer) || this;
        _this._memberTypeRef = _memberTypeRef;
        return _this;
    }
    Object.defineProperty(UnionMemberMatchTransformer.prototype, "sourceType", {
        get: function () {
            var t = this.sourceTypeRef.deref()[0];
            if (!(t instanceof Type_1.UnionType)) {
                return Support_1.panic("The source of a union member match transformer must be a union type");
            }
            return t;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnionMemberMatchTransformer.prototype, "memberType", {
        get: function () {
            return this._memberTypeRef.deref()[0];
        },
        enumerable: true,
        configurable: true
    });
    UnionMemberMatchTransformer.prototype.getChildren = function () {
        return _super.prototype.getChildren.call(this).add(this.memberType);
    };
    UnionMemberMatchTransformer.prototype.reverse = function (_targetTypeRef, _continuationTransformer) {
        return Support_1.panic("Can't reverse union member match transformer");
    };
    UnionMemberMatchTransformer.prototype.reconstitute = function (builder) {
        return new UnionMemberMatchTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), this.transformer.reconstitute(builder), builder.reconstituteTypeRef(this._memberTypeRef));
    };
    UnionMemberMatchTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof UnionMemberMatchTransformer))
            return false;
        return this._memberTypeRef.equals(other._memberTypeRef);
    };
    UnionMemberMatchTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, this._memberTypeRef.hashCode());
    };
    UnionMemberMatchTransformer.prototype.debugDescription = function () {
        return _super.prototype.debugDescription.call(this) + " - member: " + debugStringForType(this.memberType);
    };
    return UnionMemberMatchTransformer;
}(MatchTransformer));
exports.UnionMemberMatchTransformer = UnionMemberMatchTransformer;
/**
 * This matches strings and enum cases.
 */
var StringMatchTransformer = /** @class */ (function (_super) {
    __extends(StringMatchTransformer, _super);
    function StringMatchTransformer(sourceTypeRef, transformer, stringCase) {
        var _this = _super.call(this, "string-match", sourceTypeRef, transformer) || this;
        _this.stringCase = stringCase;
        return _this;
    }
    Object.defineProperty(StringMatchTransformer.prototype, "sourceType", {
        get: function () {
            var t = this.sourceTypeRef.deref()[0];
            if (!(t instanceof Type_1.EnumType) && !(t instanceof Type_1.PrimitiveType && t.kind === "string")) {
                return Support_1.panic("The source of a string match transformer must be an enum or string type");
            }
            return t;
        },
        enumerable: true,
        configurable: true
    });
    StringMatchTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        return this.transformer.reverse(targetTypeRef, new StringProducerTransformer(this.transformer.sourceTypeRef, continuationTransformer, this.stringCase));
    };
    StringMatchTransformer.prototype.reconstitute = function (builder) {
        return new StringMatchTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), this.transformer.reconstitute(builder), this.stringCase);
    };
    StringMatchTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof StringMatchTransformer))
            return false;
        return this.stringCase !== other.stringCase;
    };
    StringMatchTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, immutable_1.hash(this.stringCase));
    };
    StringMatchTransformer.prototype.debugDescription = function () {
        return _super.prototype.debugDescription.call(this) + " - case: " + this.stringCase;
    };
    return StringMatchTransformer;
}(MatchTransformer));
exports.StringMatchTransformer = StringMatchTransformer;
var UnionInstantiationTransformer = /** @class */ (function (_super) {
    __extends(UnionInstantiationTransformer, _super);
    function UnionInstantiationTransformer(sourceTypeRef) {
        return _super.call(this, "union-instantiation", sourceTypeRef) || this;
    }
    UnionInstantiationTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        if (continuationTransformer === undefined) {
            return Support_1.panic("Union instantiation transformer reverse must have a continuation");
        }
        return new UnionMemberMatchTransformer(targetTypeRef, continuationTransformer, this.sourceTypeRef);
    };
    UnionInstantiationTransformer.prototype.reconstitute = function (builder) {
        return new UnionInstantiationTransformer(builder.reconstituteTypeRef(this.sourceTypeRef));
    };
    UnionInstantiationTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        return other instanceof UnionInstantiationTransformer;
    };
    return UnionInstantiationTransformer;
}(Transformer));
exports.UnionInstantiationTransformer = UnionInstantiationTransformer;
/**
 * Produces a string or an enum case.
 */
var StringProducerTransformer = /** @class */ (function (_super) {
    __extends(StringProducerTransformer, _super);
    function StringProducerTransformer(sourceTypeRef, consumer, result) {
        var _this = _super.call(this, "string-producer", sourceTypeRef, consumer) || this;
        _this.result = result;
        return _this;
    }
    StringProducerTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        if (continuationTransformer === undefined) {
            return Support_1.panic("Reversing a string producer transformer must have a continuation");
        }
        if (this.consumer === undefined) {
            return new StringMatchTransformer(targetTypeRef, continuationTransformer, this.result);
        }
        else {
            return this.consumer.reverse(targetTypeRef, new StringMatchTransformer(this.consumer.sourceTypeRef, continuationTransformer, this.result));
        }
    };
    StringProducerTransformer.prototype.reconstitute = function (builder) {
        return new StringProducerTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), Support_1.mapOptional(function (xfer) { return xfer.reconstitute(builder); }, this.consumer), this.result);
    };
    StringProducerTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        if (!(other instanceof StringProducerTransformer))
            return false;
        return this.result === other.result;
    };
    StringProducerTransformer.prototype.hashCode = function () {
        var h = _super.prototype.hashCode.call(this);
        return Support_1.addHashCode(h, immutable_1.hash(this.consumer));
    };
    StringProducerTransformer.prototype.debugDescription = function () {
        return _super.prototype.debugDescription.call(this) + " - result: " + this.result;
    };
    return StringProducerTransformer;
}(ProducerTransformer));
exports.StringProducerTransformer = StringProducerTransformer;
var ParseDateTimeTransformer = /** @class */ (function (_super) {
    __extends(ParseDateTimeTransformer, _super);
    function ParseDateTimeTransformer(sourceTypeRef, consumer) {
        return _super.call(this, "parse-date-time", sourceTypeRef, consumer) || this;
    }
    ParseDateTimeTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        if (this.consumer === undefined) {
            return new StringifyDateTimeTransformer(targetTypeRef, continuationTransformer);
        }
        else {
            return this.consumer.reverse(targetTypeRef, new StringifyDateTimeTransformer(this.consumer.sourceTypeRef, continuationTransformer));
        }
    };
    ParseDateTimeTransformer.prototype.reconstitute = function (builder) {
        return new ParseDateTimeTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), Support_1.mapOptional(function (xfer) { return xfer.reconstitute(builder); }, this.consumer));
    };
    ParseDateTimeTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        return other instanceof ParseDateTimeTransformer;
    };
    return ParseDateTimeTransformer;
}(ProducerTransformer));
exports.ParseDateTimeTransformer = ParseDateTimeTransformer;
var StringifyDateTimeTransformer = /** @class */ (function (_super) {
    __extends(StringifyDateTimeTransformer, _super);
    function StringifyDateTimeTransformer(sourceTypeRef, consumer) {
        return _super.call(this, "stringify-date-time", sourceTypeRef, consumer) || this;
    }
    StringifyDateTimeTransformer.prototype.reverse = function (targetTypeRef, continuationTransformer) {
        if (this.consumer === undefined) {
            return new ParseDateTimeTransformer(targetTypeRef, continuationTransformer);
        }
        else {
            return this.consumer.reverse(targetTypeRef, new ParseDateTimeTransformer(this.consumer.sourceTypeRef, continuationTransformer));
        }
    };
    StringifyDateTimeTransformer.prototype.reconstitute = function (builder) {
        return new StringifyDateTimeTransformer(builder.reconstituteTypeRef(this.sourceTypeRef), Support_1.mapOptional(function (xfer) { return xfer.reconstitute(builder); }, this.consumer));
    };
    StringifyDateTimeTransformer.prototype.equals = function (other) {
        if (!_super.prototype.equals.call(this, other))
            return false;
        return other instanceof StringifyDateTimeTransformer;
    };
    return StringifyDateTimeTransformer;
}(ProducerTransformer));
exports.StringifyDateTimeTransformer = StringifyDateTimeTransformer;
var Transformation = /** @class */ (function () {
    function Transformation(_targetTypeRef, transformer) {
        this._targetTypeRef = _targetTypeRef;
        this.transformer = transformer;
    }
    Object.defineProperty(Transformation.prototype, "sourceType", {
        get: function () {
            return this.transformer.sourceType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Transformation.prototype, "targetType", {
        get: function () {
            return this._targetTypeRef.deref()[0];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Transformation.prototype, "reverse", {
        get: function () {
            return new Transformation(this.transformer.sourceTypeRef, this.transformer.reverse(this._targetTypeRef, undefined));
        },
        enumerable: true,
        configurable: true
    });
    Transformation.prototype.getChildren = function () {
        return this.transformer.getChildren().add(this.targetType);
    };
    Transformation.prototype.reconstitute = function (builder) {
        return new Transformation(builder.reconstituteTypeRef(this._targetTypeRef), this.transformer.reconstitute(builder));
    };
    Transformation.prototype.equals = function (other) {
        if (!(other instanceof Transformation))
            return false;
        return this._targetTypeRef.equals(other._targetTypeRef) && this.transformer.equals(other.transformer);
    };
    Transformation.prototype.hashCode = function () {
        var h = this._targetTypeRef.hashCode();
        h = Support_1.addHashCode(h, this.transformer.hashCode());
        return h;
    };
    Transformation.prototype.debugPrint = function () {
        this.transformer.debugPrint(0);
        console.log("-> " + debugStringForType(this.targetType));
    };
    return Transformation;
}());
exports.Transformation = Transformation;
var TransformationTypeAttributeKind = /** @class */ (function (_super) {
    __extends(TransformationTypeAttributeKind, _super);
    function TransformationTypeAttributeKind() {
        return _super.call(this, "transformation") || this;
    }
    Object.defineProperty(TransformationTypeAttributeKind.prototype, "inIdentity", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    TransformationTypeAttributeKind.prototype.children = function (xf) {
        return xf.getChildren();
    };
    TransformationTypeAttributeKind.prototype.reconstitute = function (builder, xf) {
        return xf.reconstitute(builder);
    };
    TransformationTypeAttributeKind.prototype.stringify = function (_) {
        return "transformation";
    };
    return TransformationTypeAttributeKind;
}(TypeAttributes_1.TypeAttributeKind));
exports.transformationTypeAttributeKind = new TransformationTypeAttributeKind();
function transformationForType(t) {
    return exports.transformationTypeAttributeKind.tryGetInAttributes(t.getAttributes());
}
exports.transformationForType = transformationForType;
function followTargetType(t) {
    for (;;) {
        var xf = transformationForType(t);
        if (xf === undefined)
            return t;
        t = xf.targetType;
    }
}
exports.followTargetType = followTargetType;
