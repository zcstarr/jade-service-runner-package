"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var typescript_json_schema_1 = require("typescript-json-schema");
var Support_1 = require("../Support");
var EncodedDefaultTypeScriptLibrary_1 = require("./EncodedDefaultTypeScriptLibrary");
var Messages_1 = require("../Messages");
var settings = {
    required: true,
    titles: true,
    topRef: true
};
var compilerOptions = {
    noEmit: true,
    emitDecoratorMetadata: true,
    experimentalDecorators: true,
    target: ts.ScriptTarget.ES5,
    module: ts.ModuleKind.CommonJS,
    strictNullChecks: true,
    typeRoots: []
};
var libFileName = "lib.d.ts";
var libSource = undefined;
function getLibSource() {
    if (libSource === undefined) {
        libSource = Support_1.inflateBase64(EncodedDefaultTypeScriptLibrary_1.encodedDefaultTypeScriptLibrary);
    }
    return libSource;
}
var CompilerHost = /** @class */ (function () {
    function CompilerHost(_options, _sources) {
        this._sources = _sources;
    }
    CompilerHost.prototype.fileExists = function (fileName) {
        if (fileName === libFileName)
            return true;
        return Object.prototype.hasOwnProperty.call(this._sources, fileName);
    };
    CompilerHost.prototype.readFile = function (fileName) {
        if (fileName === libFileName) {
            return getLibSource();
        }
        return this._sources[fileName];
    };
    CompilerHost.prototype.getSourceFile = function (fileName, languageVersion, _onError, _shouldCreateNewSourceFile) {
        var sourceText = this.readFile(fileName);
        return sourceText !== undefined ? ts.createSourceFile(fileName, sourceText, languageVersion) : undefined;
    };
    CompilerHost.prototype.getDefaultLibFileName = function (_options) {
        return libFileName;
    };
    CompilerHost.prototype.writeFile = function (fileName, _data, _writeByteOrderMark, _onError, _sourceFiles) {
        return Support_1.panic("writeFile should not be called by the TypeScript compiler.  Filename " + fileName);
    };
    CompilerHost.prototype.getCurrentDirectory = function () {
        return ".";
    };
    CompilerHost.prototype.getDirectories = function (_path) {
        return [];
    };
    CompilerHost.prototype.getCanonicalFileName = function (fileName) {
        if (this.useCaseSensitiveFileNames()) {
            return fileName.toLowerCase();
        }
        return fileName;
    };
    CompilerHost.prototype.useCaseSensitiveFileNames = function () {
        return false;
    };
    CompilerHost.prototype.getNewLine = function () {
        return "\n";
    };
    return CompilerHost;
}());
function schemaForTypeScriptSources(sources) {
    var fileNames;
    var host;
    if (Array.isArray(sources)) {
        fileNames = sources;
        host = ts.createCompilerHost(compilerOptions);
    }
    else {
        fileNames = Object.getOwnPropertyNames(sources);
        host = new CompilerHost(compilerOptions, sources);
    }
    var program = ts.createProgram(fileNames, compilerOptions, host);
    var diagnostics = ts.getPreEmitDiagnostics(program);
    var error = diagnostics.find(function (d) { return d.category === ts.DiagnosticCategory.Error; });
    if (error !== undefined) {
        return Messages_1.messageError("TypeScriptCompilerError", {
            message: ts.flattenDiagnosticMessageText(error.messageText, "\n")
        });
    }
    var schema = typescript_json_schema_1.generateSchema(program, "*", settings);
    var uris = [];
    var topLevelName = undefined;
    if (schema !== null && typeof schema === "object" && typeof schema.definitions === "object") {
        for (var _i = 0, _a = Object.getOwnPropertyNames(schema.definitions); _i < _a.length; _i++) {
            var name = _a[_i];
            var definition = schema.definitions[name];
            if (definition === null ||
                Array.isArray(definition) ||
                typeof definition !== "object" ||
                typeof definition.description !== "string") {
                continue;
            }
            var description = definition.description;
            var matches = description.match(/#TopLevel/);
            if (matches === null) {
                continue;
            }
            var index = Support_1.defined(matches.index);
            definition.description = description.substr(0, index) + description.substr(index + matches[0].length);
            uris.push("#/definitions/" + name);
            if (topLevelName === undefined) {
                if (typeof definition.title === "string") {
                    topLevelName = definition.title;
                }
                else {
                    topLevelName = name;
                }
            }
            else {
                topLevelName = "";
            }
        }
    }
    if (uris.length === 0) {
        uris.push("#/definitions/");
    }
    if (topLevelName === undefined) {
        topLevelName = "";
    }
    return { schema: JSON.stringify(schema), name: topLevelName, uris: uris };
}
exports.schemaForTypeScriptSources = schemaForTypeScriptSources;
