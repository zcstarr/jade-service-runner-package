import { Map } from "immutable";
import { Ref } from "./JSONSchemaInput";
import { Value, CompressedJSON } from "./CompressedJSON";
import { JSONSchemaStore } from "./JSONSchemaStore";
import { TypeSource } from "../TypeSource";
export declare class InputData {
    private readonly _compressedJSON;
    private readonly _givenSchemaStore;
    private readonly _samples;
    private readonly _schemas;
    private readonly _graphQLs;
    private _schemaInputs;
    private _schemaSources;
    constructor(_compressedJSON: CompressedJSON, _givenSchemaStore: JSONSchemaStore | undefined);
    readonly jsonInputs: Map<string, {
        samples: Value[];
        description?: string;
    }>;
    readonly schemaInputs: Map<string, Ref>;
    readonly graphQLInputs: Map<string, {
        schema: any;
        query: string;
    }>;
    private addOtherTypeSource(source);
    private addSchemaTypeSource(schemaSource);
    addTypeSources(sources: TypeSource[]): Promise<boolean>;
    private addSchemaInput(name, ref);
    addSchemaInputs(): Promise<JSONSchemaStore | undefined>;
    singleStringSchemaSource(): string | undefined;
}
