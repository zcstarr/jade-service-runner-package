"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var URI = require("urijs");
var lodash = require("lodash");
var immutable_1 = require("immutable");
var get_stream_1 = require("../get-stream");
var TypeScriptInput_1 = require("./TypeScriptInput");
var JSONSchemaInput_1 = require("./JSONSchemaInput");
var JSONSchemaStore_1 = require("./JSONSchemaStore");
var Support_1 = require("../Support");
var Messages_1 = require("../Messages");
var TypeSource_1 = require("../TypeSource");
var stringToStream = require("string-to-stream");
function toReadable(source) {
    return typeof source === "string" ? stringToStream(source) : source;
}
function toString(source) {
    return __awaiter(this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    if (!(typeof source === "string")) return [3 /*break*/, 1];
                    _a = source;
                    return [3 /*break*/, 3];
                case 1: return [4 /*yield*/, get_stream_1.getStream(source)];
                case 2:
                    _a = _b.sent();
                    _b.label = 3;
                case 3: return [2 /*return*/, _a];
            }
        });
    });
}
function toSchemaSource(source) {
    if (TypeSource_1.isSchemaSource(source)) {
        return [source, true];
    }
    else if (TypeSource_1.isTypeScriptSource(source)) {
        var _a = TypeScriptInput_1.schemaForTypeScriptSources(source.sources), schema = _a.schema, name = _a.name, uris = _a.uris;
        return [{ kind: "schema", name: name, schema: schema, uris: uris }, false];
    }
    return undefined;
}
var InputJSONSchemaStore = /** @class */ (function (_super) {
    __extends(InputJSONSchemaStore, _super);
    function InputJSONSchemaStore(_inputs, _delegate) {
        var _this = _super.call(this) || this;
        _this._inputs = _inputs;
        _this._delegate = _delegate;
        return _this;
    }
    InputJSONSchemaStore.prototype.fetch = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            var maybeInput, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        maybeInput = this._inputs.get(address);
                        if (!(maybeInput !== undefined)) return [3 /*break*/, 2];
                        _a = JSONSchemaInput_1.checkJSONSchema;
                        _b = Support_1.parseJSON;
                        return [4 /*yield*/, toString(maybeInput)];
                    case 1: return [2 /*return*/, _a.apply(void 0, [_b.apply(void 0, [_c.sent(), "JSON Schema", address]), function () {
                                return JSONSchemaInput_1.Ref.root(address);
                            }])];
                    case 2:
                        if (this._delegate === undefined) {
                            return [2 /*return*/, Support_1.panic("Schema URI " + address + " requested, but no store given")];
                        }
                        return [4 /*yield*/, this._delegate.fetch(address)];
                    case 3: return [2 /*return*/, _c.sent()];
                }
            });
        });
    };
    return InputJSONSchemaStore;
}(JSONSchemaStore_1.JSONSchemaStore));
var InputData = /** @class */ (function () {
    function InputData(_compressedJSON, _givenSchemaStore) {
        this._compressedJSON = _compressedJSON;
        this._givenSchemaStore = _givenSchemaStore;
        this._samples = {};
        this._schemas = {};
        this._graphQLs = {};
        this._schemaInputs = immutable_1.Map();
        this._schemaSources = immutable_1.List();
    }
    Object.defineProperty(InputData.prototype, "jsonInputs", {
        get: function () {
            return immutable_1.Map(this._samples);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputData.prototype, "schemaInputs", {
        get: function () {
            return immutable_1.Map(this._schemas).map(function (_a) {
                var ref = _a.ref;
                return ref;
            });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputData.prototype, "graphQLInputs", {
        get: function () {
            return immutable_1.Map(this._graphQLs);
        },
        enumerable: true,
        configurable: true
    });
    // Returns whether we need IR for this type source
    InputData.prototype.addOtherTypeSource = function (source) {
        return __awaiter(this, void 0, void 0, function () {
            var name, schema, query, _a, _b, _c, name, samples, description, _i, samples_1, sample, input, e_1;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        if (!TypeSource_1.isGraphQLSource(source)) return [3 /*break*/, 2];
                        name = source.name, schema = source.schema, query = source.query;
                        _a = this._graphQLs;
                        _b = name;
                        _c = { schema: schema };
                        return [4 /*yield*/, toString(query)];
                    case 1:
                        _a[_b] = (_c.query = _d.sent(), _c);
                        return [2 /*return*/, true];
                    case 2:
                        if (!TypeSource_1.isJSONSource(source)) return [3 /*break*/, 10];
                        name = source.name, samples = source.samples, description = source.description;
                        _i = 0, samples_1 = samples;
                        _d.label = 3;
                    case 3:
                        if (!(_i < samples_1.length)) return [3 /*break*/, 9];
                        sample = samples_1[_i];
                        input = void 0;
                        _d.label = 4;
                    case 4:
                        _d.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, this._compressedJSON.readFromStream(toReadable(sample))];
                    case 5:
                        input = _d.sent();
                        return [3 /*break*/, 7];
                    case 6:
                        e_1 = _d.sent();
                        return [2 /*return*/, Messages_1.messageError("MiscJSONParseError", {
                                description: Support_1.withDefault(description, "input"),
                                address: name,
                                message: Support_1.errorMessage(e_1)
                            })];
                    case 7:
                        if (!lodash.has(this._samples, [name])) {
                            this._samples[name] = { samples: [] };
                        }
                        this._samples[name].samples.push(input);
                        if (description !== undefined) {
                            this._samples[name].description = description;
                        }
                        _d.label = 8;
                    case 8:
                        _i++;
                        return [3 /*break*/, 3];
                    case 9: return [2 /*return*/, true];
                    case 10:
                        if (TypeSource_1.isSchemaSource(source) || TypeSource_1.isTypeScriptSource(source)) {
                            return [2 /*return*/, false];
                        }
                        _d.label = 11;
                    case 11: return [2 /*return*/, Support_1.assertNever(source)];
                }
            });
        });
    };
    InputData.prototype.addSchemaTypeSource = function (schemaSource) {
        var uris = schemaSource.uris, schema = schemaSource.schema;
        var normalizedURIs;
        var uriPath = "-" + (this._schemaInputs.size + 1);
        if (uris === undefined) {
            normalizedURIs = [new URI(uriPath)];
        }
        else {
            normalizedURIs = uris.map(function (uri) {
                var normalizedURI = new URI(uri).normalize();
                if (normalizedURI
                    .clone()
                    .hash("")
                    .toString() === "") {
                    normalizedURI.path(uriPath);
                }
                return normalizedURI;
            });
        }
        if (schema === undefined) {
            Support_1.assert(uris !== undefined, "URIs must be given if schema source is not specified");
        }
        else {
            for (var _i = 0, normalizedURIs_1 = normalizedURIs; _i < normalizedURIs_1.length; _i++) {
                var normalizedURI = normalizedURIs_1[_i];
                this._schemaInputs = this._schemaInputs.set(normalizedURI
                    .clone()
                    .hash("")
                    .toString(), schema);
            }
        }
        for (var _a = 0, normalizedURIs_2 = normalizedURIs; _a < normalizedURIs_2.length; _a++) {
            var normalizedURI = normalizedURIs_2[_a];
            this._schemaSources = this._schemaSources.push([normalizedURI, schemaSource]);
        }
    };
    // Returns whether we need IR for this type source
    InputData.prototype.addTypeSources = function (sources) {
        return __awaiter(this, void 0, void 0, function () {
            var needIR, _i, sources_1, source, maybeSchemaSource, schemaSource, isDirectInput;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        needIR = false;
                        _i = 0, sources_1 = sources;
                        _a.label = 1;
                    case 1:
                        if (!(_i < sources_1.length)) return [3 /*break*/, 5];
                        source = sources_1[_i];
                        maybeSchemaSource = toSchemaSource(source);
                        if (!(maybeSchemaSource !== undefined)) return [3 /*break*/, 2];
                        schemaSource = maybeSchemaSource[0], isDirectInput = maybeSchemaSource[1];
                        needIR = isDirectInput || needIR;
                        this.addSchemaTypeSource(schemaSource);
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.addOtherTypeSource(source)];
                    case 3:
                        needIR = (_a.sent()) || needIR;
                        return [3 /*break*/, 4];
                    case 4:
                        _i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, needIR];
                }
            });
        });
    };
    InputData.prototype.addSchemaInput = function (name, ref) {
        Messages_1.messageAssert(!lodash.has(this._schemas, [name]), "DriverMoreThanOneSchemaGiven", { name: name });
        this._schemas[name] = { ref: ref };
    };
    InputData.prototype.addSchemaInputs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var schemaStore;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._schemaSources.isEmpty())
                            return [2 /*return*/, undefined];
                        schemaStore = this._givenSchemaStore;
                        if (this._schemaInputs.isEmpty()) {
                            if (schemaStore === undefined) {
                                return [2 /*return*/, Support_1.panic("Must have a schema store to process JSON Schema")];
                            }
                        }
                        else {
                            schemaStore = new InputJSONSchemaStore(this._schemaInputs, schemaStore);
                        }
                        return [4 /*yield*/, Support_1.forEachSync(this._schemaSources, function (_a) {
                                var normalizedURI = _a[0], source = _a[1];
                                return __awaiter(_this, void 0, void 0, function () {
                                    var _this = this;
                                    var givenName, refs, name;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                givenName = source.name;
                                                return [4 /*yield*/, JSONSchemaInput_1.refsInSchemaForURI(Support_1.defined(schemaStore), normalizedURI, givenName)];
                                            case 1:
                                                refs = _b.sent();
                                                if (Array.isArray(refs)) {
                                                    name = void 0;
                                                    if (this._schemaSources.size === 1) {
                                                        name = givenName;
                                                    }
                                                    else {
                                                        name = refs[0];
                                                    }
                                                    this.addSchemaInput(name, refs[1]);
                                                }
                                                else {
                                                    refs.forEach(function (ref, refName) {
                                                        _this.addSchemaInput(refName, ref);
                                                    });
                                                }
                                                return [2 /*return*/];
                                        }
                                    });
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, schemaStore];
                }
            });
        });
    };
    InputData.prototype.singleStringSchemaSource = function () {
        if (!this._schemaSources.every(function (_a) {
            var _ = _a[0], schema = _a[1].schema;
            return typeof schema === "string";
        })) {
            return undefined;
        }
        var set = immutable_1.Set(this._schemaSources.map(function (_a) {
            var _ = _a[0], schema = _a[1].schema;
            return schema;
        }));
        if (set.size === 1) {
            return Support_1.defined(set.first());
        }
        return undefined;
    };
    return InputData;
}());
exports.InputData = InputData;
