/// <reference types="node" />
import * as stream from "stream";
export declare enum Tag {
    Null = 0,
    False = 1,
    True = 2,
    Integer = 3,
    Double = 4,
    InternedString = 5,
    UninternedString = 6,
    Object = 7,
    Array = 8,
    Date = 9,
    Time = 10,
    DateTime = 11,
}
export declare type Value = number;
export declare function valueTag(v: Value): Tag;
export declare class CompressedJSON {
    private readonly _makeDate;
    private readonly _makeTime;
    private readonly _makeDateTime;
    private _rootValue;
    private _ctx;
    private _contextStack;
    private _strings;
    private _stringValues;
    private _objects;
    private _arrays;
    constructor(_makeDate: boolean, _makeTime: boolean, _makeDateTime: boolean);
    readFromStream(readStream: stream.Readable): Promise<Value>;
    getStringForValue: (v: number) => string;
    getObjectForValue: (v: number) => number[];
    getArrayForValue: (v: number) => number[];
    private internString;
    private internObject;
    private internArray;
    private commitValue;
    private finish;
    private pushContext;
    private popContext;
    private handleStartObject;
    private handleEndObject;
    private handleStartArray;
    private handleEndArray;
    private handleStartKey;
    private handleEndKey;
    private handleStartString;
    private handleStringChunk;
    private handleEndString;
    private handleStartNumber;
    private handleNumberChunk;
    private handleEndNumber;
    private handleNullValue;
    private handleTrueValue;
    private handleFalseValue;
    equals: (other: any) => boolean;
    hashCode: () => number;
}
