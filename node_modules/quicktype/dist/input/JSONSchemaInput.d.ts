/// <reference types="urijs" />
import { List, Map } from "immutable";
import { StringMap } from "../Support";
import { TypeBuilder } from "../TypeBuilder";
import { JSONSchema, JSONSchemaStore } from "./JSONSchemaStore";
export declare enum PathElementKind {
    Root = 0,
    KeyOrIndex = 1,
    Type = 2,
    Object = 3,
}
export declare type PathElement = {
    kind: PathElementKind.Root;
} | {
    kind: PathElementKind.KeyOrIndex;
    key: string;
} | {
    kind: PathElementKind.Type;
    index: number;
} | {
    kind: PathElementKind.Object;
};
export declare function checkJSONSchemaObject(x: any, refOrLoc: Ref | (() => Ref)): StringMap;
export declare function checkJSONSchema(x: any, refOrLoc: Ref | (() => Ref)): JSONSchema;
export declare class Ref {
    readonly path: List<PathElement>;
    static root(address: string): Ref;
    private static parsePath(path);
    static parseURI(uri: uri.URI, destroyURI?: boolean): Ref;
    static parse(ref: string): Ref;
    addressURI: uri.URI | undefined;
    constructor(addressURI: uri.URI | undefined, path: List<PathElement>);
    readonly hasAddress: boolean;
    readonly address: string;
    readonly isRoot: boolean;
    private pushElement(pe);
    push(...keys: string[]): Ref;
    pushObject(): Ref;
    pushType(index: number): Ref;
    resolveAgainst(base: Ref | undefined): Ref;
    readonly name: string;
    readonly definitionName: string | undefined;
    toString(): string;
    private lookup(local, path, root);
    lookupRef(root: JSONSchema): JSONSchema;
    equals(other: any): boolean;
    hashCode(): number;
}
export declare function addTypesInSchema(typeBuilder: TypeBuilder, store: JSONSchemaStore, references: Map<string, Ref>): Promise<void>;
export declare function refsInSchemaForURI(store: JSONSchemaStore, uri: uri.URI, defaultName: string): Promise<Map<string, Ref> | [string, Ref]>;
