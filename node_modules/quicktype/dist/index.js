"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var immutable_1 = require("immutable");
var targetLanguages = require("./language/All");
var Support_1 = require("./Support");
var CompressedJSON_1 = require("./input/CompressedJSON");
var CombineClasses_1 = require("./rewrites/CombineClasses");
var JSONSchemaInput_1 = require("./input/JSONSchemaInput");
var Inference_1 = require("./input/Inference");
var InferMaps_1 = require("./rewrites/InferMaps");
var TypeBuilder_1 = require("./TypeBuilder");
var TypeGraph_1 = require("./TypeGraph");
var TypeNames_1 = require("./TypeNames");
var GraphQL_1 = require("./GraphQL");
var GatherNames_1 = require("./GatherNames");
var ExpandStrings_1 = require("./rewrites/ExpandStrings");
var TypeAttributes_1 = require("./TypeAttributes");
var FlattenUnions_1 = require("./rewrites/FlattenUnions");
var ResolveIntersections_1 = require("./rewrites/ResolveIntersections");
var ReplaceObjectType_1 = require("./rewrites/ReplaceObjectType");
var Messages_1 = require("./Messages");
var Inputs_1 = require("./input/Inputs");
var FlattenStrings_1 = require("./rewrites/FlattenStrings");
var MakeTransformations_1 = require("./MakeTransformations");
// Re-export essential types and functions
var TargetLanguage_1 = require("./TargetLanguage");
exports.TargetLanguage = TargetLanguage_1.TargetLanguage;
var All_1 = require("./language/All");
exports.languages = All_1.all;
exports.languageNamed = All_1.languageNamed;
function getTargetLanguage(nameOrInstance) {
    if (typeof nameOrInstance === "object") {
        return nameOrInstance;
    }
    var language = targetLanguages.languageNamed(nameOrInstance);
    if (language !== undefined) {
        return language;
    }
    return Messages_1.messageError("DriverUnknownOutputLanguage", { lang: nameOrInstance });
}
exports.getTargetLanguage = getTargetLanguage;
var defaultOptions = {
    lang: "ts",
    sources: [],
    handlebarsTemplate: undefined,
    findSimilarClassesSchemaURI: undefined,
    inferMaps: true,
    inferEnums: true,
    inferDates: true,
    alphabetizeProperties: false,
    allPropertiesOptional: false,
    combineClasses: true,
    fixedTopLevels: false,
    noRender: false,
    leadingComments: undefined,
    rendererOptions: {},
    indentation: undefined,
    outputFilename: "stdout",
    schemaStore: undefined,
    debugPrintGraph: false,
    checkProvenance: false,
    debugPrintReconstitution: false,
    debugPrintGatherNames: false,
    debugPrintTransformations: false
};
var Run = /** @class */ (function () {
    function Run(options) {
        this._options = _.mergeWith(_.clone(options), defaultOptions, function (o, s) { return (o === undefined ? s : o); });
    }
    Run.prototype.makeGraph = function (allInputs, compressedJSON, schemaStore) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var targetLanguage, stringTypeMapping, conflateNumbers, typeBuilder, schemaInputs, graphQLInputs, doInferEnums, jsonInputs, inference_1, graph, debugPrintReconstitution, unionsDone, intersectionsDone, graphBeforeRewrites, combinedGraph, newGraph, enumInference, _a, _b, _c, _d, _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        targetLanguage = getTargetLanguage(this._options.lang);
                        stringTypeMapping = targetLanguage.stringTypeMapping;
                        conflateNumbers = !targetLanguage.supportsUnionsWithBothNumberTypes;
                        typeBuilder = new TypeBuilder_1.TypeBuilder(stringTypeMapping, this._options.alphabetizeProperties, this._options.allPropertiesOptional, this._options.checkProvenance, false);
                        schemaInputs = allInputs.schemaInputs;
                        if (this._options.findSimilarClassesSchemaURI !== undefined) {
                            schemaInputs = schemaInputs.set("ComparisonBaseRoot", JSONSchemaInput_1.Ref.parse(this._options.findSimilarClassesSchemaURI));
                        }
                        if (!!schemaInputs.isEmpty()) return [3 /*break*/, 2];
                        return [4 /*yield*/, JSONSchemaInput_1.addTypesInSchema(typeBuilder, Support_1.defined(schemaStore), schemaInputs)];
                    case 1:
                        _f.sent();
                        _f.label = 2;
                    case 2:
                        graphQLInputs = allInputs.graphQLInputs;
                        graphQLInputs.forEach(function (_a, name) {
                            var schema = _a.schema, query = _a.query;
                            var newTopLevels = GraphQL_1.makeGraphQLQueryTypes(name, typeBuilder, schema, query);
                            newTopLevels.forEach(function (t, actualName) {
                                typeBuilder.addTopLevel(graphQLInputs.size === 1 ? name : actualName, t);
                            });
                        });
                        doInferEnums = this._options.inferEnums;
                        jsonInputs = allInputs.jsonInputs;
                        if (!jsonInputs.isEmpty()) {
                            inference_1 = new Inference_1.TypeInference(typeBuilder, doInferEnums, this._options.inferDates);
                            jsonInputs.forEach(function (_a, name) {
                                var samples = _a.samples, description = _a.description;
                                var tref = inference_1.inferType(compressedJSON, TypeNames_1.makeNamesTypeAttributes(name, false), samples, _this._options.fixedTopLevels);
                                typeBuilder.addTopLevel(name, tref);
                                if (description !== undefined) {
                                    var attributes = TypeAttributes_1.descriptionTypeAttributeKind.makeAttributes(immutable_1.OrderedSet([description]));
                                    typeBuilder.addAttributes(tref, attributes);
                                }
                            });
                        }
                        graph = typeBuilder.finish();
                        if (this._options.debugPrintGraph) {
                            graph.setPrintOnRewrite();
                            graph.printGraph();
                        }
                        debugPrintReconstitution = this._options.debugPrintReconstitution === true;
                        if (typeBuilder.didAddForwardingIntersection) {
                            graph = TypeGraph_1.removeIndirectionIntersections(graph, stringTypeMapping, debugPrintReconstitution);
                        }
                        unionsDone = false;
                        if (!schemaInputs.isEmpty()) {
                            intersectionsDone = false;
                            do {
                                graphBeforeRewrites = graph;
                                if (!intersectionsDone) {
                                    _a = ResolveIntersections_1.resolveIntersections(graph, stringTypeMapping, debugPrintReconstitution), graph = _a[0], intersectionsDone = _a[1];
                                }
                                if (!unionsDone) {
                                    _b = FlattenUnions_1.flattenUnions(graph, stringTypeMapping, conflateNumbers, true, debugPrintReconstitution), graph = _b[0], unionsDone = _b[1];
                                }
                                if (graph === graphBeforeRewrites) {
                                    Support_1.assert(intersectionsDone && unionsDone, "Graph didn't change but we're not done");
                                }
                            } while (!intersectionsDone || !unionsDone);
                        }
                        graph = ReplaceObjectType_1.replaceObjectType(graph, stringTypeMapping, conflateNumbers, targetLanguage.supportsFullObjectType, debugPrintReconstitution);
                        do {
                            _c = FlattenUnions_1.flattenUnions(graph, stringTypeMapping, conflateNumbers, false, debugPrintReconstitution), graph = _c[0], unionsDone = _c[1];
                        } while (!unionsDone);
                        if (this._options.findSimilarClassesSchemaURI !== undefined) {
                            return [2 /*return*/, graph];
                        }
                        if (this._options.combineClasses) {
                            combinedGraph = CombineClasses_1.combineClasses(graph, stringTypeMapping, this._options.alphabetizeProperties, true, false, debugPrintReconstitution);
                            if (combinedGraph === graph) {
                                graph = combinedGraph;
                            }
                            else {
                                graph = CombineClasses_1.combineClasses(combinedGraph, stringTypeMapping, this._options.alphabetizeProperties, false, true, debugPrintReconstitution);
                            }
                        }
                        if (this._options.inferMaps) {
                            for (;;) {
                                newGraph = InferMaps_1.inferMaps(graph, stringTypeMapping, true, debugPrintReconstitution);
                                if (newGraph === graph) {
                                    break;
                                }
                                graph = newGraph;
                            }
                        }
                        enumInference = schemaInputs.isEmpty() ? (doInferEnums ? "infer" : "none") : "all";
                        graph = ExpandStrings_1.expandStrings(graph, stringTypeMapping, enumInference, debugPrintReconstitution);
                        _d = FlattenUnions_1.flattenUnions(graph, stringTypeMapping, conflateNumbers, false, debugPrintReconstitution), graph = _d[0], unionsDone = _d[1];
                        Support_1.assert(unionsDone, "We should only have to flatten unions once after expanding strings");
                        if (!schemaInputs.isEmpty()) {
                            graph = FlattenStrings_1.flattenStrings(graph, stringTypeMapping, debugPrintReconstitution);
                        }
                        graph = TypeGraph_1.noneToAny(graph, stringTypeMapping, debugPrintReconstitution);
                        if (!targetLanguage.supportsOptionalClassProperties) {
                            graph = TypeGraph_1.optionalToNullable(graph, stringTypeMapping, debugPrintReconstitution);
                        }
                        graph = MakeTransformations_1.makeTransformations(graph, stringTypeMapping, targetLanguage, this._options.debugPrintTransformations, debugPrintReconstitution);
                        _e = FlattenUnions_1.flattenUnions(graph, stringTypeMapping, conflateNumbers, false, debugPrintReconstitution), graph = _e[0], unionsDone = _e[1];
                        Support_1.assert(unionsDone, "We should only have to flatten unions once after making transformations");
                        // Sometimes we combine classes in ways that will the order come out
                        // differently compared to what it would be from the equivalent schema,
                        // so we always just garbage collect to get a defined order and be done
                        // with it.
                        // FIXME: We don't actually have to do this if any of the above graph
                        // rewrites did anything.  We could just check whether the current graph
                        // is different from the one we started out with.
                        graph = graph.garbageCollect(this._options.alphabetizeProperties, debugPrintReconstitution);
                        if (this._options.debugPrintGraph) {
                            console.log("\n# gather names");
                        }
                        GatherNames_1.gatherNames(graph, this._options.debugPrintGatherNames);
                        if (this._options.debugPrintGraph) {
                            graph.printGraph();
                        }
                        return [2 /*return*/, graph];
                }
            });
        });
    };
    Run.prototype.makeSimpleTextResult = function (lines) {
        return immutable_1.OrderedMap([[this._options.outputFilename, { lines: lines, annotations: immutable_1.List() }]]);
    };
    Run.prototype.run = function () {
        return __awaiter(this, void 0, void 0, function () {
            var targetLanguage, needIR, mapping, makeDate, makeTime, makeDateTime, compressedJSON, allInputs, schemaString, lines, srr, schemaStore, graph, cliques, lines, _i, cliques_1, clique;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        TypeNames_1.initTypeNames();
                        targetLanguage = getTargetLanguage(this._options.lang);
                        needIR = targetLanguage.names.indexOf("schema") < 0 ||
                            this._options.findSimilarClassesSchemaURI !== undefined ||
                            this._options.handlebarsTemplate !== undefined;
                        mapping = targetLanguage.stringTypeMapping;
                        makeDate = mapping.date !== "string";
                        makeTime = mapping.time !== "string";
                        makeDateTime = mapping.dateTime !== "string";
                        compressedJSON = new CompressedJSON_1.CompressedJSON(makeDate, makeTime, makeDateTime);
                        allInputs = new Inputs_1.InputData(compressedJSON, this._options.schemaStore);
                        return [4 /*yield*/, allInputs.addTypeSources(this._options.sources)];
                    case 1:
                        if (_a.sent()) {
                            needIR = true;
                        }
                        schemaString = needIR ? undefined : allInputs.singleStringSchemaSource();
                        if (schemaString !== undefined) {
                            lines = JSON.stringify(JSON.parse(schemaString), undefined, 4).split("\n");
                            lines.push("");
                            srr = { lines: lines, annotations: immutable_1.List() };
                            return [2 /*return*/, immutable_1.OrderedMap([[this._options.outputFilename, srr]])];
                        }
                        return [4 /*yield*/, allInputs.addSchemaInputs()];
                    case 2:
                        schemaStore = _a.sent();
                        return [4 /*yield*/, this.makeGraph(allInputs, compressedJSON, schemaStore)];
                    case 3:
                        graph = _a.sent();
                        if (this._options.noRender) {
                            return [2 /*return*/, this.makeSimpleTextResult(["Done.", ""])];
                        }
                        if (this._options.findSimilarClassesSchemaURI !== undefined) {
                            cliques = CombineClasses_1.findSimilarityCliques(graph, false, true);
                            lines = [];
                            if (cliques.length === 0) {
                                lines.push("No similar classes found.");
                            }
                            else {
                                for (_i = 0, cliques_1 = cliques; _i < cliques_1.length; _i++) {
                                    clique = cliques_1[_i];
                                    lines.push("similar: " + clique.map(function (c) { return c.getCombinedName(); }).join(", "));
                                }
                            }
                            lines.push("");
                            return [2 /*return*/, this.makeSimpleTextResult(lines)];
                        }
                        if (this._options.handlebarsTemplate !== undefined) {
                            return [2 /*return*/, immutable_1.OrderedMap([
                                    [
                                        this._options.outputFilename,
                                        targetLanguage.processHandlebarsTemplate(graph, this._options.rendererOptions, this._options.handlebarsTemplate)
                                    ]
                                ])];
                        }
                        else {
                            return [2 /*return*/, targetLanguage.renderGraphAndSerialize(graph, this._options.outputFilename, this._options.alphabetizeProperties, this._options.leadingComments, this._options.rendererOptions, this._options.indentation)];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return Run;
}());
exports.Run = Run;
function quicktypeMultiFile(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, new Run(options).run()];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.quicktypeMultiFile = quicktypeMultiFile;
function offsetLocation(loc, lineOffset) {
    return { line: loc.line + lineOffset, column: loc.column };
}
function offsetSpan(span, lineOffset) {
    return { start: offsetLocation(span.start, lineOffset), end: offsetLocation(span.end, lineOffset) };
}
function quicktype(options) {
    return __awaiter(this, void 0, void 0, function () {
        var result, first, lines, annotations;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, quicktypeMultiFile(options)];
                case 1:
                    result = _a.sent();
                    if (result.size <= 1) {
                        first = result.first();
                        if (first === undefined) {
                            return [2 /*return*/, { lines: [], annotations: immutable_1.List() }];
                        }
                        return [2 /*return*/, first];
                    }
                    lines = [];
                    annotations = [];
                    result.forEach(function (srr, filename) {
                        var offset = lines.length + 2;
                        lines = lines.concat(["// " + filename, ""], srr.lines);
                        annotations = annotations.concat(srr.annotations.map(function (ann) { return ({ annotation: ann.annotation, span: offsetSpan(ann.span, offset) }); }).toArray());
                    });
                    return [2 /*return*/, { lines: lines, annotations: immutable_1.List(annotations) }];
            }
        });
    });
}
exports.quicktype = quicktype;
