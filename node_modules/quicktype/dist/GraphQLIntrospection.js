"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Support_1 = require("./Support");
var graphql_1 = require("graphql");
var fetch = require("node-fetch");
// https://github.com/apollographql/apollo-codegen/blob/master/src/downloadSchema.ts
var defaultHeaders = {
    Accept: "application/json",
    "Content-Type": "application/json"
};
var headerRegExp = /^([^:]+):\s*(.*)$/;
function introspectServer(url, headerStrings) {
    return __awaiter(this, void 0, void 0, function () {
        var headers, _i, _a, name, _b, headerStrings_1, str, matches, result, response, error_1, schemaData;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    headers = {};
                    console.log("given headers: " + JSON.stringify(headerStrings));
                    for (_i = 0, _a = Object.getOwnPropertyNames(defaultHeaders); _i < _a.length; _i++) {
                        name = _a[_i];
                        headers[name] = defaultHeaders[name];
                    }
                    for (_b = 0, headerStrings_1 = headerStrings; _b < headerStrings_1.length; _b++) {
                        str = headerStrings_1[_b];
                        matches = str.match(headerRegExp);
                        if (matches === null) {
                            return [2 /*return*/, Support_1.panic("Not a valid HTTP header: \"" + str + "\"")];
                        }
                        headers[matches[1]] = matches[2];
                    }
                    console.log("headers are " + JSON.stringify(headers));
                    _c.label = 1;
                case 1:
                    _c.trys.push([1, 4, , 5]);
                    return [4 /*yield*/, fetch(url, {
                            headers: headers,
                            body: JSON.stringify({ query: graphql_1.introspectionQuery })
                        })];
                case 2:
                    response = _c.sent();
                    return [4 /*yield*/, response.json()];
                case 3:
                    result = _c.sent();
                    return [3 /*break*/, 5];
                case 4:
                    error_1 = _c.sent();
                    return [2 /*return*/, Support_1.panic("Error while fetching introspection query result: " + error_1.message)];
                case 5:
                    if (result.errors) {
                        return [2 /*return*/, Support_1.panic("Errors in introspection query result: " + result.errors)];
                    }
                    schemaData = result;
                    if (!schemaData.data) {
                        return [2 /*return*/, Support_1.panic("No introspection query result data found, server responded with: " + JSON.stringify(result))];
                    }
                    return [2 /*return*/, JSON.stringify(schemaData, null, 2)];
            }
        });
    });
}
exports.introspectServer = introspectServer;
