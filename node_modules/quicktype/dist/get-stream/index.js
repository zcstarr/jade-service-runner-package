"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var buffer_stream_1 = require("./buffer-stream");
function getStream(inputStream, opts) {
    if (opts === void 0) { opts = {}; }
    if (!inputStream) {
        return Promise.reject(new Error("Expected a stream"));
    }
    opts = Object.assign({ maxBuffer: Infinity }, opts);
    var maxBuffer = opts.maxBuffer || Infinity;
    var stream;
    var clean;
    var p = new Promise(function (resolve, reject) {
        var error = function (err) {
            if (err) {
                // null check
                err.bufferedData = stream.getBufferedValue();
            }
            reject(err);
        };
        stream = buffer_stream_1.default(opts);
        inputStream.once("error", error);
        inputStream.pipe(stream);
        stream.on("data", function () {
            if (stream.getBufferedLength() > maxBuffer) {
                reject(new Error("maxBuffer exceeded"));
            }
        });
        stream.once("error", error);
        stream.on("end", resolve);
        clean = function () {
            // some streams doesn't implement the `stream.Readable` interface correctly
            if (inputStream.unpipe) {
                inputStream.unpipe(stream);
            }
        };
    });
    p.then(clean, clean);
    return p.then(function () { return stream.getBufferedValue(); });
}
exports.getStream = getStream;
function buffer(stream, opts) {
    if (opts === void 0) { opts = {}; }
    getStream(stream, Object.assign({}, opts, { encoding: "buffer" }));
}
exports.buffer = buffer;
function array(stream, opts) {
    if (opts === void 0) { opts = {}; }
    getStream(stream, Object.assign({}, opts, { array: true }));
}
exports.array = array;
