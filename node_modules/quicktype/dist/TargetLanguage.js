"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var Source_1 = require("./Source");
var Support_1 = require("./Support");
var TargetLanguage = /** @class */ (function () {
    function TargetLanguage(displayName, names, extension) {
        this.displayName = displayName;
        this.names = names;
        this.extension = extension;
    }
    Object.defineProperty(TargetLanguage.prototype, "optionDefinitions", {
        get: function () {
            return this.getOptions().map(function (o) { return o.definition; });
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "cliOptionDefinitions", {
        get: function () {
            var actual = [];
            var display = [];
            for (var _i = 0, _a = this.getOptions(); _i < _a.length; _i++) {
                var cliDefinitions = _a[_i].cliDefinitions;
                actual = actual.concat(cliDefinitions.actual);
                display = display.concat(cliDefinitions.display);
            }
            return { actual: actual, display: display };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "name", {
        get: function () {
            return Support_1.defined(this.names[0]);
        },
        enumerable: true,
        configurable: true
    });
    TargetLanguage.prototype.makeRenderer = function (graph, leadingComments, rendererOptions) {
        return new ((_a = this.rendererClass).bind.apply(_a, [void 0, this,
            graph,
            leadingComments].concat(this.getOptions().map(function (o) { return o.getValue(rendererOptions); }))))();
        var _a;
    };
    TargetLanguage.prototype.renderGraphAndSerialize = function (graph, givenOutputFilename, alphabetizeProperties, leadingComments, rendererOptions, indentation) {
        if (indentation === undefined) {
            indentation = this.defaultIndentation;
        }
        var renderer = this.makeRenderer(graph, leadingComments, rendererOptions);
        if (renderer.setAlphabetizeProperties !== undefined) {
            renderer.setAlphabetizeProperties(alphabetizeProperties);
        }
        var renderResult = renderer.render(givenOutputFilename);
        return renderResult.sources.map(function (s) { return Source_1.serializeRenderResult(s, renderResult.names, Support_1.defined(indentation)); });
    };
    TargetLanguage.prototype.processHandlebarsTemplate = function (graph, rendererOptions, template) {
        var renderer = this.makeRenderer(graph, undefined, rendererOptions);
        var output = renderer.processHandlebarsTemplate(template);
        return { lines: output.split("\n"), annotations: immutable_1.List() };
    };
    Object.defineProperty(TargetLanguage.prototype, "defaultIndentation", {
        get: function () {
            return "    ";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "partialStringTypeMapping", {
        get: function () {
            return {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "stringTypeMapping", {
        get: function () {
            var partial = this.partialStringTypeMapping;
            /* tslint:disable:strict-boolean-expressions */
            return {
                date: partial.date || "string",
                time: partial.time || "string",
                dateTime: partial.dateTime || "string"
            };
            /* tslint:enable */
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "supportsOptionalClassProperties", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "supportsUnionsWithBothNumberTypes", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "supportsFullObjectType", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    TargetLanguage.prototype.needsTransformerForUnion = function (_u) {
        return false;
    };
    Object.defineProperty(TargetLanguage.prototype, "needsTransformerForEnums", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TargetLanguage.prototype, "needsTransformersForDateTime", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    return TargetLanguage;
}());
exports.TargetLanguage = TargetLanguage;
