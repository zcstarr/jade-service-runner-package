import { OrderedSet, List } from "immutable";
import { UnionType, Type, EnumType, PrimitiveType } from "./Type";
import { TypeAttributeKind } from "./TypeAttributes";
import { TypeRef } from "./TypeBuilder";
import { BaseGraphRewriteBuilder } from "./GraphRewriting";
export declare abstract class Transformer {
    readonly kind: string;
    readonly sourceTypeRef: TypeRef;
    constructor(kind: string, sourceTypeRef: TypeRef);
    readonly sourceType: Type;
    getChildren(): OrderedSet<Type>;
    abstract reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    abstract reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugDescription(): string;
    protected debugPrintContinuations(_indent: number): void;
    debugPrint(indent: number): void;
}
export declare abstract class ProducerTransformer extends Transformer {
    readonly consumer: Transformer | undefined;
    constructor(kind: string, sourceTypeRef: TypeRef, consumer: Transformer | undefined);
    getChildren(): OrderedSet<Type>;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugPrintContinuations(indent: number): void;
}
export declare abstract class MatchTransformer extends Transformer {
    readonly transformer: Transformer;
    constructor(kind: string, sourceTypeRef: TypeRef, transformer: Transformer);
    getChildren(): OrderedSet<Type>;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugPrintContinuations(indent: number): void;
}
export declare class DecodingTransformer extends ProducerTransformer {
    constructor(sourceTypeRef: TypeRef, consumer: Transformer | undefined);
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
}
export declare class EncodingTransformer extends Transformer {
    constructor(sourceTypeRef: TypeRef);
    reverse(_targetTypeRef: TypeRef, _continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
}
export declare class ChoiceTransformer extends Transformer {
    readonly transformers: List<Transformer>;
    constructor(sourceTypeRef: TypeRef, transformers: List<Transformer>);
    getChildren(): OrderedSet<Type>;
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugPrintContinuations(indent: number): void;
}
export declare class DecodingChoiceTransformer extends Transformer {
    readonly nullTransformer: Transformer | undefined;
    readonly integerTransformer: Transformer | undefined;
    readonly doubleTransformer: Transformer | undefined;
    readonly boolTransformer: Transformer | undefined;
    readonly stringTransformer: Transformer | undefined;
    readonly arrayTransformer: Transformer | undefined;
    readonly objectTransformer: Transformer | undefined;
    constructor(sourceTypeRef: TypeRef, nullTransformer: Transformer | undefined, integerTransformer: Transformer | undefined, doubleTransformer: Transformer | undefined, boolTransformer: Transformer | undefined, stringTransformer: Transformer | undefined, arrayTransformer: Transformer | undefined, objectTransformer: Transformer | undefined);
    getChildren(): OrderedSet<Type>;
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugPrintContinuations(indent: number): void;
}
export declare class UnionMemberMatchTransformer extends MatchTransformer {
    private readonly _memberTypeRef;
    constructor(sourceTypeRef: TypeRef, transformer: Transformer, _memberTypeRef: TypeRef);
    readonly sourceType: UnionType;
    readonly memberType: Type;
    getChildren(): OrderedSet<Type>;
    reverse(_targetTypeRef: TypeRef, _continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugDescription(): string;
}
/**
 * This matches strings and enum cases.
 */
export declare class StringMatchTransformer extends MatchTransformer {
    readonly stringCase: string;
    constructor(sourceTypeRef: TypeRef, transformer: Transformer, stringCase: string);
    readonly sourceType: EnumType | PrimitiveType;
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugDescription(): string;
}
export declare class UnionInstantiationTransformer extends Transformer {
    constructor(sourceTypeRef: TypeRef);
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
}
/**
 * Produces a string or an enum case.
 */
export declare class StringProducerTransformer extends ProducerTransformer {
    readonly result: string;
    constructor(sourceTypeRef: TypeRef, consumer: Transformer | undefined, result: string);
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
    hashCode(): number;
    protected debugDescription(): string;
}
export declare class ParseDateTimeTransformer extends ProducerTransformer {
    constructor(sourceTypeRef: TypeRef, consumer: Transformer | undefined);
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
}
export declare class StringifyDateTimeTransformer extends ProducerTransformer {
    constructor(sourceTypeRef: TypeRef, consumer: Transformer | undefined);
    reverse(targetTypeRef: TypeRef, continuationTransformer: Transformer | undefined): Transformer;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformer;
    equals(other: any): boolean;
}
export declare class Transformation {
    private readonly _targetTypeRef;
    readonly transformer: Transformer;
    constructor(_targetTypeRef: TypeRef, transformer: Transformer);
    readonly sourceType: Type;
    readonly targetType: Type;
    readonly reverse: Transformation;
    getChildren(): OrderedSet<Type>;
    reconstitute<TBuilder extends BaseGraphRewriteBuilder>(builder: TBuilder): Transformation;
    equals(other: any): boolean;
    hashCode(): number;
    debugPrint(): void;
}
export declare const transformationTypeAttributeKind: TypeAttributeKind<Transformation>;
export declare function transformationForType(t: Type): Transformation | undefined;
export declare function followTargetType(t: Type): Type;
