import { Map, OrderedMap } from "immutable";
import { TargetLanguage } from "./TargetLanguage";
import { SerializedRenderResult } from "./Source";
import { JSONSchemaStore } from "./input/JSONSchemaStore";
import { TypeSource } from "./TypeSource";
export { TargetLanguage } from "./TargetLanguage";
export { SerializedRenderResult, Annotation } from "./Source";
export { all as languages, languageNamed } from "./language/All";
export { OptionDefinition } from "./RendererOptions";
export { TypeSource, GraphQLTypeSource, JSONTypeSource, SchemaTypeSource, TypeScriptTypeSource } from "./TypeSource";
export declare function getTargetLanguage(nameOrInstance: string | TargetLanguage): TargetLanguage;
export declare type RendererOptions = {
    [name: string]: string;
};
export interface Options {
    lang: string | TargetLanguage;
    sources: TypeSource[];
    handlebarsTemplate: string | undefined;
    findSimilarClassesSchemaURI: string | undefined;
    inferMaps: boolean;
    inferEnums: boolean;
    inferDates: boolean;
    alphabetizeProperties: boolean;
    allPropertiesOptional: boolean;
    combineClasses: boolean;
    fixedTopLevels: boolean;
    noRender: boolean;
    leadingComments: string[] | undefined;
    rendererOptions: RendererOptions;
    indentation: string | undefined;
    outputFilename: string;
    schemaStore: JSONSchemaStore | undefined;
    debugPrintGraph: boolean;
    checkProvenance: boolean;
    debugPrintReconstitution: boolean;
    debugPrintGatherNames: boolean;
    debugPrintTransformations: boolean;
}
export declare class Run {
    private readonly _options;
    constructor(options: Partial<Options>);
    private makeGraph(allInputs, compressedJSON, schemaStore);
    private makeSimpleTextResult(lines);
    run(): Promise<OrderedMap<string, SerializedRenderResult>>;
}
export declare function quicktypeMultiFile(options: Partial<Options>): Promise<Map<string, SerializedRenderResult>>;
export declare function quicktype(options: Partial<Options>): Promise<SerializedRenderResult>;
