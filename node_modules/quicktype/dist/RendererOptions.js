"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Support_1 = require("./Support");
var Messages_1 = require("./Messages");
var UntypedOption = /** @class */ (function () {
    function UntypedOption(definition) {
        definition.renderer = true;
        this.definition = definition;
        Support_1.assert(definition.kind !== undefined, "Renderer option kind must be defined");
    }
    Object.defineProperty(UntypedOption.prototype, "cliDefinitions", {
        get: function () {
            return { actual: [this.definition], display: [this.definition] };
        },
        enumerable: true,
        configurable: true
    });
    return UntypedOption;
}());
exports.UntypedOption = UntypedOption;
var Option = /** @class */ (function (_super) {
    __extends(Option, _super);
    function Option() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Option.prototype.getValue = function (values) {
        var value = values[this.definition.name];
        if (value === undefined) {
            return this.definition.defaultValue;
        }
        return value;
    };
    return Option;
}(UntypedOption));
exports.Option = Option;
var BooleanOption = /** @class */ (function (_super) {
    __extends(BooleanOption, _super);
    function BooleanOption(name, description, defaultValue, kind) {
        if (kind === void 0) { kind = "primary"; }
        return _super.call(this, {
            name: name,
            kind: kind,
            type: Boolean,
            description: description,
            defaultValue: defaultValue
        }) || this;
    }
    Object.defineProperty(BooleanOption.prototype, "cliDefinitions", {
        get: function () {
            var negated = Object.assign({}, this.definition, {
                name: "no-" + this.definition.name,
                defaultValue: !this.definition.defaultValue
            });
            var display = Object.assign({}, this.definition, {
                name: "[no-]" + this.definition.name,
                description: this.definition.description + " (" + (this.definition.defaultValue ? "on" : "off") + " by default)"
            });
            return {
                display: [display],
                actual: [this.definition, negated]
            };
        },
        enumerable: true,
        configurable: true
    });
    BooleanOption.prototype.getValue = function (values) {
        var value = values[this.definition.name];
        if (value === undefined) {
            value = this.definition.defaultValue;
        }
        var negated = values["no-" + this.definition.name];
        if (negated === undefined) {
            negated = !this.definition.defaultValue;
        }
        if (this.definition.defaultValue) {
            return value && !negated;
        }
        else {
            return value || !negated;
        }
    };
    return BooleanOption;
}(Option));
exports.BooleanOption = BooleanOption;
var StringOption = /** @class */ (function (_super) {
    __extends(StringOption, _super);
    function StringOption(name, description, typeLabel, defaultValue, kind) {
        if (kind === void 0) { kind = "primary"; }
        var _this = this;
        var definition = {
            name: name,
            kind: kind,
            type: String,
            description: description,
            typeLabel: typeLabel,
            defaultValue: defaultValue
        };
        _this = _super.call(this, definition) || this;
        return _this;
    }
    return StringOption;
}(Option));
exports.StringOption = StringOption;
var EnumOption = /** @class */ (function (_super) {
    __extends(EnumOption, _super);
    function EnumOption(name, description, values, defaultValue, kind) {
        if (defaultValue === void 0) { defaultValue = undefined; }
        if (kind === void 0) { kind = "primary"; }
        var _this = this;
        if (defaultValue === undefined) {
            defaultValue = values[0][0];
        }
        var definition = {
            name: name,
            kind: kind,
            type: String,
            description: description,
            typeLabel: values.map(function (_a) {
                var n = _a[0], _ = _a[1];
                return n;
            }).join("|"),
            legalValues: values.map(function (_a) {
                var n = _a[0], _ = _a[1];
                return n;
            }),
            defaultValue: defaultValue
        };
        _this = _super.call(this, definition) || this;
        _this._values = {};
        for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
            var _a = values_1[_i], n = _a[0], v = _a[1];
            _this._values[n] = v;
        }
        return _this;
    }
    EnumOption.prototype.getValue = function (values) {
        var name = values[this.definition.name];
        if (name === undefined) {
            name = this.definition.defaultValue;
        }
        var value = this._values[name];
        if (value === undefined) {
            return Messages_1.messageError("RendererUnknownOptionValue", { value: name, name: this.definition.name });
        }
        return value;
    };
    return EnumOption;
}(Option));
exports.EnumOption = EnumOption;
