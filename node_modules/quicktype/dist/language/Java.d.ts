import { Type, EnumType, UnionType, ClassType, ClassProperty } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Sourcelike } from "../Source";
import { Name, Namer } from "../Naming";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../ConvenienceRenderer";
import { TargetLanguage } from "../TargetLanguage";
import { Option } from "../RendererOptions";
export declare class JavaTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _packageOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsUnionsWithBothNumberTypes: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare const stringEscape: (s: string) => string;
export declare class JavaRenderer extends ConvenienceRenderer {
    private readonly _packageName;
    private readonly _justTypes;
    private _currentFilename;
    private _gettersAndSettersForPropertyName;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _packageName: string, _justTypes: boolean);
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo;
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): Namer;
    protected makeEnumCaseNamer(): Namer;
    protected unionNeedsName(u: UnionType): boolean;
    protected namedTypeToNameForTopLevel(type: Type): Type | undefined;
    protected makeNamesForPropertyGetterAndSetter(_c: ClassType, _className: Name, _p: ClassProperty, _jsonName: string, name: Name): [Name, Name];
    protected makePropertyDependencyNames(c: ClassType, className: Name, p: ClassProperty, jsonName: string, name: Name): Name[];
    private fieldOrMethodName(methodName, topLevelName);
    private methodName(prefix, suffix, topLevelName);
    private decoderName(topLevelName);
    private encoderName(topLevelName);
    private readerGetterName(topLevelName);
    private writerGetterName(topLevelName);
    protected startFile(basename: Sourcelike): void;
    protected finishFile(): void;
    protected emitPackageAndImports(imports: string[]): void;
    protected emitFileHeader(fileName: Sourcelike, imports: string[]): void;
    protected emitDescriptionBlock(lines: string[]): void;
    protected emitBlock(line: Sourcelike, f: () => void): void;
    protected javaType(reference: boolean, t: Type, withIssues?: boolean): Sourcelike;
    protected javaTypeWithoutGenerics(reference: boolean, t: Type): Sourcelike;
    protected emitClassAttributes(c: ClassType, _className: Name): void;
    protected emitAccessorAttributes(_c: ClassType, _className: Name, _propertyName: Name, jsonName: string, _p: ClassProperty, _isSetter: boolean): void;
    protected importsForType(t: ClassType | UnionType | EnumType): string[];
    protected emitClassDefinition(c: ClassType, className: Name): void;
    protected unionField(u: UnionType, t: Type, withIssues?: boolean): {
        fieldType: Sourcelike;
        fieldName: Sourcelike;
    };
    protected emitUnionDefinition(u: UnionType, unionName: Name): void;
    protected emitEnumDefinition(e: EnumType, enumName: Name): void;
    protected emitConverterClass(): void;
    protected emitSourceStructure(): void;
}
