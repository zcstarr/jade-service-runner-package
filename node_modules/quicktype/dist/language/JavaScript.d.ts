import { Type, ClassProperty, ClassType } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Sourcelike } from "../Source";
import { Namer, Name } from "../Naming";
import { ConvenienceRenderer } from "../ConvenienceRenderer";
import { TargetLanguage } from "../TargetLanguage";
import { BooleanOption, Option } from "../RendererOptions";
export declare class JavaScriptTargetLanguage extends TargetLanguage {
    protected readonly runtimeTypecheck: BooleanOption;
    constructor(displayName?: string, names?: string[], extension?: string);
    protected getOptions(): Option<any>[];
    readonly supportsOptionalClassProperties: boolean;
    readonly supportsFullObjectType: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class JavaScriptRenderer extends ConvenienceRenderer {
    private readonly _runtimeTypecheck;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _runtimeTypecheck: boolean);
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): null;
    protected makeEnumCaseNamer(): Namer;
    protected namedTypeToNameForTopLevel(type: Type): Type | undefined;
    protected makeNameForProperty(c: ClassType, className: Name, p: ClassProperty, jsonName: string, _assignedName: string | undefined): Name | undefined;
    protected emitDescriptionBlock(lines: string[]): void;
    typeMapTypeFor: (t: Type) => Sourcelike;
    typeMapTypeForProperty(p: ClassProperty): Sourcelike;
    emitBlock(source: Sourcelike, end: Sourcelike, emit: () => void): void;
    emitTypeMap: () => void;
    protected deserializerFunctionName(name: Name): Sourcelike;
    protected deserializerFunctionLine(_t: Type, name: Name): Sourcelike;
    protected serializerFunctionName(name: Name): Sourcelike;
    protected serializerFunctionLine(_t: Type, name: Name): Sourcelike;
    protected readonly moduleLine: string | undefined;
    protected readonly castFunctionLine: string;
    protected readonly typeAnnotations: {
        any: string;
        anyArray: string;
        anyMap: string;
        string: string;
        stringArray: string;
        boolean: string;
    };
    private emitConvertModuleBody();
    protected emitConvertModule(): void;
    protected emitTypes(): void;
    protected emitUsageImportComment(): void;
    protected emitUsageComments(): void;
    protected emitModuleExports(): void;
    protected emitSourceStructure(): void;
}
