import { TargetLanguage } from "../TargetLanguage";
import { Option } from "../RendererOptions";
import { Type, ClassType, UnionType } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../ConvenienceRenderer";
import { Namer, Name, DependencyName } from "../Naming";
export default class ElmTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _listOption;
    private readonly _moduleOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsOptionalClassProperties: boolean;
    readonly supportsUnionsWithBothNumberTypes: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class ElmRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private readonly _moduleName;
    private readonly _useList;
    private _topLevelDependents;
    private _namedTypeDependents;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, _moduleName: string, _useList: boolean);
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected makeTopLevelDependencyNames(t: Type, topLevelName: Name): DependencyName[];
    protected makeNamedTypeNamer(): Namer;
    protected makeNamedTypeDependencyNames(_: Type, typeName: Name): DependencyName[];
    protected namerForObjectProperty(): Namer;
    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo;
    protected makeUnionMemberNamer(): Namer;
    protected readonly unionMembersInGlobalNamespace: boolean;
    protected makeEnumCaseNamer(): Namer;
    protected readonly enumCasesInGlobalNamespace: boolean;
    protected proposeUnionMemberName(u: UnionType, unionName: Name, fieldType: Type, lookup: (n: Name) => string): string;
    protected readonly commentLineStart: string;
    protected emitDescriptionBlock(lines: string[]): void;
    private readonly arrayType;
    private elmType(t, noOptional?);
    private elmProperty(p);
    private decoderNameForNamedType;
    private decoderNameForType(t, noOptional?);
    private decoderNameForProperty(p);
    private encoderNameForNamedType;
    private encoderNameForType(t, noOptional?);
    private encoderNameForProperty(p);
    private emitTopLevelDefinition;
    private emitClassDefinition;
    private emitEnumDefinition;
    private emitUnionDefinition;
    private emitTopLevelFunctions;
    private emitClassFunctions;
    private emitEnumFunctions;
    private emitUnionFunctions;
    protected emitSourceStructure(): void;
}
