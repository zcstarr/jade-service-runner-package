import { TargetLanguage } from "../TargetLanguage";
import { Type, ClassType, EnumType, ClassProperty } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Name, Namer } from "../Naming";
import { Sourcelike } from "../Source";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../ConvenienceRenderer";
import { Option } from "../RendererOptions";
export declare type OutputFeatures = {
    interface: boolean;
    implementation: boolean;
};
export default class ObjectiveCTargetLanguage extends TargetLanguage {
    private readonly _featuresOption;
    private readonly _justTypesOption;
    private readonly _emitMarshallingFunctions;
    private readonly _classPrefixOption;
    private readonly _extraCommentsOption;
    constructor();
    protected getOptions(): Option<any>[];
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class ObjectiveCRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private _classPrefix;
    private readonly _features;
    private readonly _extraComments;
    private readonly _marshalingFunctions;
    private _currentFilename;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, _classPrefix: string, _features: OutputFeatures, _extraComments: boolean, _marshalingFunctions: boolean);
    private inferClassPrefix(name);
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo;
    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo;
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(_: ClassType, p: ClassProperty): Namer;
    protected makeUnionMemberNamer(): null;
    protected makeEnumCaseNamer(): Namer;
    protected namedTypeToNameForTopLevel(type: Type): Type | undefined;
    protected emitDescriptionBlock(lines: string[]): void;
    private emitBlock;
    private emitMethod(declaration, f);
    private emitExtraComments;
    protected startFile(basename: Sourcelike, extension: string): void;
    protected finishFile(): void;
    private memoryAttribute(t, isNullable);
    private objcType;
    private jsonType;
    private fromDynamicExpression;
    private toDynamicExpression;
    private implicitlyConvertsFromJSON(t);
    private implicitlyConvertsToJSON(t);
    private emitPropertyAssignment;
    private emitPrivateClassInterface;
    private pointerAwareTypeName(t);
    private emitNonClassTopLevelTypedef(t, name);
    private topLevelFromDataPrototype(name);
    private topLevelFromJSONPrototype(name);
    private topLevelToDataPrototype(name, pad?);
    private topLevelToJSONPrototype(name, pad?);
    private emitTopLevelFunctionDeclarations(_, name);
    private emitTryCatchAsError(inTry, inCatch);
    private emitTopLevelFunctions(t, name);
    private emitClassInterface;
    private emitClassImplementation;
    private emitMark;
    private variableNameForTopLevel(name);
    private emitPseudoEnumInterface(enumType, enumName);
    private emitPseudoEnumImplementation(enumType, enumName);
    protected emitSourceStructure(proposedFilename: string): void;
    private readonly needsMap;
    private emitMapFunction;
}
