"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Strings_1 = require("../Strings");
var Source_1 = require("../Source");
var RendererOptions_1 = require("../RendererOptions");
var JavaScript_1 = require("./JavaScript");
var Support_1 = require("../Support");
var TypeScriptFlowBaseTargetLanguage = /** @class */ (function (_super) {
    __extends(TypeScriptFlowBaseTargetLanguage, _super);
    function TypeScriptFlowBaseTargetLanguage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._justTypes = new RendererOptions_1.BooleanOption("just-types", "Interfaces only", false);
        _this._declareUnions = new RendererOptions_1.BooleanOption("explicit-unions", "Explicitly name unions", false);
        return _this;
    }
    TypeScriptFlowBaseTargetLanguage.prototype.getOptions = function () {
        return [this._justTypes, this._declareUnions, this.runtimeTypecheck];
    };
    Object.defineProperty(TypeScriptFlowBaseTargetLanguage.prototype, "supportsOptionalClassProperties", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    return TypeScriptFlowBaseTargetLanguage;
}(JavaScript_1.JavaScriptTargetLanguage));
exports.TypeScriptFlowBaseTargetLanguage = TypeScriptFlowBaseTargetLanguage;
var TypeScriptTargetLanguage = /** @class */ (function (_super) {
    __extends(TypeScriptTargetLanguage, _super);
    function TypeScriptTargetLanguage() {
        return _super.call(this, "TypeScript", ["typescript", "ts", "tsx"], "ts") || this;
    }
    Object.defineProperty(TypeScriptTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return TypeScriptRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return TypeScriptTargetLanguage;
}(TypeScriptFlowBaseTargetLanguage));
exports.TypeScriptTargetLanguage = TypeScriptTargetLanguage;
var TypeScriptFlowBaseRenderer = /** @class */ (function (_super) {
    __extends(TypeScriptFlowBaseRenderer, _super);
    function TypeScriptFlowBaseRenderer(targetLanguage, graph, leadingComments, _justTypes, declareUnions, runtimeTypecheck) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments, runtimeTypecheck) || this;
        _this._justTypes = _justTypes;
        _this._inlineUnions = !declareUnions;
        return _this;
    }
    TypeScriptFlowBaseRenderer.prototype.sourceFor = function (t) {
        var _this = this;
        if (["class", "object", "enum"].indexOf(t.kind) >= 0) {
            return Source_1.singleWord(this.nameForNamedType(t));
        }
        return TypeUtils_1.matchType(t, function (_anyType) { return Source_1.singleWord("any"); }, function (_nullType) { return Source_1.singleWord("null"); }, function (_boolType) { return Source_1.singleWord("boolean"); }, function (_integerType) { return Source_1.singleWord("number"); }, function (_doubleType) { return Source_1.singleWord("number"); }, function (_stringType) { return Source_1.singleWord("string"); }, function (arrayType) {
            var itemType = _this.sourceFor(arrayType.items);
            if ((arrayType.items instanceof Type_1.UnionType && _this._inlineUnions) ||
                arrayType.items instanceof Type_1.ArrayType) {
                return Source_1.singleWord(["Array<", itemType.source, ">"]);
            }
            else {
                return Source_1.singleWord([Source_1.parenIfNeeded(itemType), "[]"]);
            }
        }, function (_classType) { return Support_1.panic("We handled this above"); }, function (mapType) { return Source_1.singleWord(["{ [key: string]: ", _this.sourceFor(mapType.values).source, " }"]); }, function (_enumType) { return Support_1.panic("We handled this above"); }, function (unionType) {
            if (_this._inlineUnions || TypeUtils_1.nullableFromUnion(unionType) !== null) {
                var children = unionType.getChildren().map(function (c) { return Source_1.parenIfNeeded(_this.sourceFor(c)); });
                return Source_1.multiWord.apply(void 0, [" | "].concat(children.toArray()));
            }
            else {
                return Source_1.singleWord(_this.nameForNamedType(unionType));
            }
        });
    };
    TypeScriptFlowBaseRenderer.prototype.emitClassBlockBody = function (c) {
        var _this = this;
        this.emitPropertyTable(c, function (name, _jsonName, p) {
            var t = p.type;
            return [[name, p.isOptional ? "?" : "", ": "], [_this.sourceFor(t).source, ";"]];
        });
    };
    TypeScriptFlowBaseRenderer.prototype.emitClass = function (c, className) {
        this.emitDescription(this.descriptionForType(c));
        this.emitClassBlock(c, className);
    };
    TypeScriptFlowBaseRenderer.prototype.emitUnion = function (u, unionName) {
        var _this = this;
        if (this._inlineUnions) {
            return;
        }
        this.emitDescription(this.descriptionForType(u));
        var children = Source_1.multiWord.apply(void 0, [" | "].concat(u
            .getChildren()
            .map(function (c) { return Source_1.parenIfNeeded(_this.sourceFor(c)); })
            .toArray()));
        this.emitLine("export type ", unionName, " = ", children.source, ";");
    };
    TypeScriptFlowBaseRenderer.prototype.emitTypes = function () {
        var _this = this;
        this.forEachNamedType("leading-and-interposing", function (c, n) { return _this.emitClass(c, n); }, function (e, n) { return _this.emitEnum(e, n); }, function (u, n) { return _this.emitUnion(u, n); });
    };
    TypeScriptFlowBaseRenderer.prototype.emitUsageComments = function () {
        if (this._justTypes)
            return;
        _super.prototype.emitUsageComments.call(this);
    };
    TypeScriptFlowBaseRenderer.prototype.deserializerFunctionLine = function (t, name) {
        return ["function to", name, "(json: string): ", this.sourceFor(t).source];
    };
    TypeScriptFlowBaseRenderer.prototype.serializerFunctionLine = function (t, name) {
        var camelCaseName = Source_1.modifySource(Strings_1.camelCase, name);
        return ["function ", camelCaseName, "ToJson(value: ", this.sourceFor(t).source, "): string"];
    };
    Object.defineProperty(TypeScriptFlowBaseRenderer.prototype, "moduleLine", {
        get: function () {
            return undefined;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeScriptFlowBaseRenderer.prototype, "castFunctionLine", {
        get: function () {
            return "function cast<T>(obj: any, typ: any): T";
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TypeScriptFlowBaseRenderer.prototype, "typeAnnotations", {
        get: function () {
            return {
                any: ": any",
                anyArray: ": any[]",
                anyMap: ": { [k: string]: any }",
                string: ": string",
                stringArray: ": string[]",
                boolean: ": boolean"
            };
        },
        enumerable: true,
        configurable: true
    });
    TypeScriptFlowBaseRenderer.prototype.emitConvertModule = function () {
        if (this._justTypes)
            return;
        _super.prototype.emitConvertModule.call(this);
    };
    return TypeScriptFlowBaseRenderer;
}(JavaScript_1.JavaScriptRenderer));
exports.TypeScriptFlowBaseRenderer = TypeScriptFlowBaseRenderer;
var TypeScriptRenderer = /** @class */ (function (_super) {
    __extends(TypeScriptRenderer, _super);
    function TypeScriptRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TypeScriptRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        return ["Array", "Date"];
    };
    TypeScriptRenderer.prototype.deserializerFunctionLine = function (t, name) {
        return ["export ", _super.prototype.deserializerFunctionLine.call(this, t, name)];
    };
    TypeScriptRenderer.prototype.serializerFunctionLine = function (t, name) {
        return ["export ", _super.prototype.serializerFunctionLine.call(this, t, name)];
    };
    Object.defineProperty(TypeScriptRenderer.prototype, "moduleLine", {
        get: function () {
            return "export namespace Convert";
        },
        enumerable: true,
        configurable: true
    });
    TypeScriptRenderer.prototype.emitModuleExports = function () {
        return;
    };
    TypeScriptRenderer.prototype.emitUsageImportComment = function () {
        var topLevelNames = [];
        this.forEachTopLevel("none", function (_t, name) {
            topLevelNames.push(", ", name);
        }, TypeUtils_1.isNamedType);
        this.emitLine("//   import { Convert", topLevelNames, ' } from "./file";');
    };
    TypeScriptRenderer.prototype.emitEnum = function (e, enumName) {
        var _this = this;
        this.emitDescription(this.descriptionForType(e));
        this.emitBlock(["export enum ", enumName, " "], "", function () {
            _this.forEachEnumCase(e, "none", function (name, jsonName) {
                _this.emitLine(name, " = \"" + Strings_1.utf16StringEscape(jsonName) + "\",");
            });
        });
    };
    TypeScriptRenderer.prototype.emitClassBlock = function (c, className) {
        var _this = this;
        this.emitBlock(["export interface ", className, " "], "", function () {
            _this.emitClassBlockBody(c);
        });
    };
    return TypeScriptRenderer;
}(TypeScriptFlowBaseRenderer));
exports.TypeScriptRenderer = TypeScriptRenderer;
var FlowTargetLanguage = /** @class */ (function (_super) {
    __extends(FlowTargetLanguage, _super);
    function FlowTargetLanguage() {
        return _super.call(this, "Flow", ["flow"], "js") || this;
    }
    Object.defineProperty(FlowTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return FlowRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return FlowTargetLanguage;
}(TypeScriptFlowBaseTargetLanguage));
exports.FlowTargetLanguage = FlowTargetLanguage;
var FlowRenderer = /** @class */ (function (_super) {
    __extends(FlowRenderer, _super);
    function FlowRenderer() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FlowRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        return ["Class", "Object", "String", "Array", "JSON", "Error"];
    };
    FlowRenderer.prototype.emitEnum = function (e, enumName) {
        var _this = this;
        this.emitDescription(this.descriptionForType(e));
        var lines = [];
        this.forEachEnumCase(e, "none", function (_, jsonName) {
            var maybeOr = lines.length === 0 ? "  " : "| ";
            lines.push([maybeOr, '"', Strings_1.utf16StringEscape(jsonName), '"']);
        });
        Support_1.defined(lines[lines.length - 1]).push(";");
        this.emitLine("export type ", enumName, " =");
        this.indent(function () {
            for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {
                var line = lines_1[_i];
                _this.emitLine(line);
            }
        });
    };
    FlowRenderer.prototype.emitClassBlock = function (c, className) {
        var _this = this;
        this.emitBlock(["export type ", className, " = "], ";", function () {
            _this.emitClassBlockBody(c);
        });
    };
    FlowRenderer.prototype.emitSourceStructure = function () {
        this.emitLine("// @flow");
        this.ensureBlankLine();
        _super.prototype.emitSourceStructure.call(this);
    };
    return FlowRenderer;
}(TypeScriptFlowBaseRenderer));
exports.FlowRenderer = FlowRenderer;
