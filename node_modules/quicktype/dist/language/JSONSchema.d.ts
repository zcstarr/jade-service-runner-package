import { TargetLanguage } from "../TargetLanguage";
import { TypeGraph } from "../TypeGraph";
import { ConvenienceRenderer } from "../ConvenienceRenderer";
import { Namer } from "../Naming";
import { StringTypeMapping } from "../TypeBuilder";
import { Option } from "../RendererOptions";
export default class JSONSchemaTargetLanguage extends TargetLanguage {
    constructor();
    protected getOptions(): Option<any>[];
    protected readonly partialStringTypeMapping: Partial<StringTypeMapping>;
    readonly supportsOptionalClassProperties: boolean;
    readonly supportsFullObjectType: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class JSONSchemaRenderer extends ConvenienceRenderer {
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): null;
    protected makeUnionMemberNamer(): null;
    protected makeEnumCaseNamer(): null;
    private nameForType;
    private makeOneOf;
    private makeRef(t);
    private addDescription(t, schema);
    private schemaForType;
    private definitionForObject(o, title);
    private definitionForUnion(u, title?);
    private definitionForEnum(e, title);
    protected emitSourceStructure(): void;
}
