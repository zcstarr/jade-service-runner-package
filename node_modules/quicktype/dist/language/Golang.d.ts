import { Type } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Name, DependencyName, Namer } from "../Naming";
import { Option } from "../RendererOptions";
import { TargetLanguage } from "../TargetLanguage";
import { ConvenienceRenderer } from "../ConvenienceRenderer";
export default class GoTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _packageOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsUnionsWithBothNumberTypes: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
    protected readonly defaultIndentation: string;
}
export declare class GoRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private readonly _packageName;
    private _topLevelUnmarshalNames;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, _packageName: string);
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): Namer;
    protected makeEnumCaseNamer(): Namer;
    protected readonly enumCasesInGlobalNamespace: boolean;
    protected makeTopLevelDependencyNames(_: Type, topLevelName: Name): DependencyName[];
    private emitBlock;
    private emitFunc;
    private emitStruct;
    private nullableGoType;
    private propertyGoType(t);
    private goType;
    private emitTopLevel;
    private emitClass;
    private emitEnum;
    private emitUnion;
    protected emitSourceStructure(): void;
}
