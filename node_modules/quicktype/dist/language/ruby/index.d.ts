import { TypeGraph } from "../../TypeGraph";
import { Namer, Name } from "../../Naming";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../../ConvenienceRenderer";
import { TargetLanguage } from "../../TargetLanguage";
import { Option } from "../../RendererOptions";
import { Type, ClassType } from "../../Type";
export declare enum Strictness {
    Strict = "Strict::",
    Coercible = "Coercible::",
    None = "Types::",
}
export default class RubyTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _strictnessOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsOptionalClassProperties: boolean;
    protected readonly defaultIndentation: string;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class RubyRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private readonly _strictness;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, _strictness: Strictness);
    protected readonly commentLineStart: string;
    protected readonly needsTypeDeclarationBeforeUse: boolean;
    protected canBeForwardDeclared(t: Type): boolean;
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected forbiddenForObjectProperties(_c: ClassType, _classNamed: Name): ForbiddenWordsInfo;
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): Namer;
    protected makeEnumCaseNamer(): Namer;
    private dryType(t, isOptional?);
    private exampleUse(t, exp, depth?, optional?);
    private jsonSample(t);
    private fromDynamic(t, e, optional?, castPrimitives?);
    private toDynamic(t, e, optional?);
    private marshalsImplicitlyToDynamic(t);
    private propertyTypeMarshalsImplicitlyFromDynamic(t);
    private emitBlock(source, emit);
    private emitClass(c, className);
    private emitEnum(e, enumName);
    private emitUnion(u, unionName);
    private emitTypesModule();
    protected emitSourceStructure(): void;
}
