"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var TargetLanguage_1 = require("../TargetLanguage");
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Naming_1 = require("../Naming");
var RendererOptions_1 = require("../RendererOptions");
var Source_1 = require("../Source");
var Annotation_1 = require("../Annotation");
var ConvenienceRenderer_1 = require("../ConvenienceRenderer");
var Strings_1 = require("../Strings");
var Support_1 = require("../Support");
var immutable_1 = require("immutable");
var MAX_SAMELINE_PROPERTIES = 4;
var SwiftTargetLanguage = /** @class */ (function (_super) {
    __extends(SwiftTargetLanguage, _super);
    function SwiftTargetLanguage() {
        var _this = _super.call(this, "Swift", ["swift", "swift4"], "swift") || this;
        _this._justTypesOption = new RendererOptions_1.BooleanOption("just-types", "Plain types only", false);
        _this._convenienceInitializers = new RendererOptions_1.BooleanOption("initializers", "Convenience initializers", true);
        _this._urlSessionHandlers = new RendererOptions_1.BooleanOption("url-session", "URLSession task extensions", false);
        _this._alamofireHandlers = new RendererOptions_1.BooleanOption("alamofire", "Alamofire extensions", false);
        _this._namedTypePrefix = new RendererOptions_1.StringOption("type-prefix", "Prefix for type names", "PREFIX", "", "secondary");
        _this._classOption = new RendererOptions_1.EnumOption("struct-or-class", "Structs or classes", [
            ["struct", false],
            ["class", true]
        ]);
        _this._denseOption = new RendererOptions_1.EnumOption("density", "Code density", [["dense", true], ["normal", false]], "dense", "secondary");
        _this._accessLevelOption = new RendererOptions_1.EnumOption("access-level", "Access level", [["internal", "internal"], ["public", "public"]], "internal", "secondary");
        return _this;
    }
    SwiftTargetLanguage.prototype.getOptions = function () {
        return [
            this._justTypesOption,
            this._classOption,
            this._denseOption,
            this._convenienceInitializers,
            this._accessLevelOption,
            this._urlSessionHandlers,
            this._alamofireHandlers,
            this._namedTypePrefix
        ];
    };
    Object.defineProperty(SwiftTargetLanguage.prototype, "supportsOptionalClassProperties", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwiftTargetLanguage.prototype, "supportsUnionsWithBothNumberTypes", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SwiftTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return SwiftRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return SwiftTargetLanguage;
}(TargetLanguage_1.TargetLanguage));
exports.default = SwiftTargetLanguage;
var keywords = [
    "associatedtype",
    "class",
    "deinit",
    "enum",
    "extension",
    "fileprivate",
    "func",
    "import",
    "init",
    "inout",
    "internal",
    "let",
    "open",
    "operator",
    "private",
    "protocol",
    "public",
    "static",
    "struct",
    "subscript",
    "typealias",
    "var",
    "break",
    "case",
    "continue",
    "default",
    "defer",
    "do",
    "else",
    "fallthrough",
    "for",
    "guard",
    "if",
    "in",
    "repeat",
    "return",
    "switch",
    "where",
    "while",
    "as",
    "Any",
    "catch",
    "false",
    "is",
    "nil",
    "rethrows",
    "super",
    "self",
    "Self",
    "throw",
    "throws",
    "true",
    "try",
    "_",
    "associativity",
    "convenience",
    "dynamic",
    "didSet",
    "final",
    "get",
    "infix",
    "indirect",
    "lazy",
    "left",
    "mutating",
    "nonmutating",
    "optional",
    "override",
    "postfix",
    "precedence",
    "prefix",
    "Protocol",
    "required",
    "right",
    "set",
    "Type",
    "unowned",
    "weak",
    "willSet",
    "String",
    "Int",
    "Double",
    "Bool",
    "Data",
    "CommandLine",
    "FileHandle",
    "JSONSerialization",
    "checkNull",
    "removeNSNull",
    "nilToNSNull",
    "convertArray",
    "convertOptional",
    "convertDict",
    "convertDouble",
    "jsonString",
    "jsonData"
];
function isPartCharacter(codePoint) {
    return Strings_1.isLetterOrUnderscore(codePoint) || Strings_1.isNumeric(codePoint);
}
function isStartCharacter(codePoint) {
    return isPartCharacter(codePoint) && !Strings_1.isDigit(codePoint);
}
var legalizeName = Strings_1.legalizeCharacters(isPartCharacter);
function swiftNameStyle(prefix, isUpper, original) {
    var words = Strings_1.splitIntoWords(original);
    var combined = Strings_1.combineWords(words, legalizeName, isUpper ? Strings_1.firstUpperWordStyle : Strings_1.allLowerWordStyle, Strings_1.firstUpperWordStyle, isUpper ? Strings_1.allUpperWordStyle : Strings_1.allLowerWordStyle, Strings_1.allUpperWordStyle, "", isStartCharacter);
    return Strings_1.addPrefixIfNecessary(prefix, combined);
}
function unicodeEscape(codePoint) {
    return "\\u{" + Strings_1.intToHex(codePoint, 0) + "}";
}
var stringEscape = Strings_1.utf32ConcatMap(Strings_1.escapeNonPrintableMapper(Strings_1.isPrintable, unicodeEscape));
var lowerNamingFunction = Naming_1.funPrefixNamer("lower", function (s) { return swiftNameStyle("", false, s); });
var SwiftRenderer = /** @class */ (function (_super) {
    __extends(SwiftRenderer, _super);
    function SwiftRenderer(targetLanguage, graph, leadingComments, _justTypes, _useClasses, _dense, _convenienceInitializers, _accessLevel, _urlSession, _alamofire, _namedTypePrefix) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments) || this;
        _this._justTypes = _justTypes;
        _this._useClasses = _useClasses;
        _this._dense = _dense;
        _this._convenienceInitializers = _convenienceInitializers;
        _this._accessLevel = _accessLevel;
        _this._urlSession = _urlSession;
        _this._alamofire = _alamofire;
        _this._namedTypePrefix = _namedTypePrefix;
        _this._needAny = false;
        _this._needNull = false;
        _this.emitBlock = function (line, f) {
            _this.emitLine(line, " {");
            _this.indent(f);
            _this.emitLine("}");
        };
        _this.justTypesCase = function (justTypes, notJustTypes) {
            if (_this._justTypes)
                return justTypes;
            else
                return notJustTypes;
        };
        _this.proposedUnionMemberNameForTypeKind = function (kind) {
            if (kind === "enum") {
                return "enumeration";
            }
            if (kind === "union") {
                return "one_of";
            }
            return null;
        };
        _this.renderHeader = function () {
            if (_this.leadingComments !== undefined) {
                _this.emitCommentLines(_this.leadingComments);
            }
            else if (!_this._justTypes) {
                _this.emitLine("// To parse the JSON, add this file to your project and do:");
                _this.emitLine("//");
                _this.forEachTopLevel("none", function (t, name) {
                    if (_this._convenienceInitializers && !(t instanceof Type_1.EnumType)) {
                        _this.emitLine("//   let ", Source_1.modifySource(Strings_1.camelCase, name), " = try ", name, "(json)");
                    }
                    else {
                        _this.emitLine("//   let ", Source_1.modifySource(Strings_1.camelCase, name), " = ", "try? JSONDecoder().decode(", name, ".self, from: jsonData)");
                    }
                });
                if (_this._urlSession) {
                    _this.emitLine("//");
                    _this.emitLine("// To read values from URLs:");
                    _this.forEachTopLevel("none", function (_, name) {
                        var lowerName = Source_1.modifySource(Strings_1.camelCase, name);
                        _this.emitLine("//");
                        _this.emitLine("//   let task = URLSession.shared.", lowerName, "Task(with: url) { ", lowerName, ", response, error in");
                        _this.emitLine("//     if let ", lowerName, " = ", lowerName, " {");
                        _this.emitLine("//       ...");
                        _this.emitLine("//     }");
                        _this.emitLine("//   }");
                        _this.emitLine("//   task.resume()");
                    });
                }
                if (_this._alamofire) {
                    _this.emitLine("//");
                    _this.emitLine("// To parse values from Alamofire responses:");
                    _this.forEachTopLevel("none", function (_, name) {
                        _this.emitLine("//");
                        _this.emitLine("//   Alamofire.request(url).response", name, " { response in");
                        _this.emitLine("//     if let ", Source_1.modifySource(Strings_1.camelCase, name), " = response.result.value {");
                        _this.emitLine("//       ...");
                        _this.emitLine("//     }");
                        _this.emitLine("//   }");
                    });
                }
            }
            _this.ensureBlankLine();
            _this.emitLine("import Foundation");
            if (!_this._justTypes && _this._alamofire) {
                _this.emitLine("import Alamofire");
            }
        };
        _this.renderTopLevelAlias = function (t, name) {
            _this.emitLine("typealias ", name, " = ", _this.swiftType(t, true));
        };
        _this.getProtocolString = function () {
            var protocols = [];
            if (!_this._justTypes) {
                protocols.push("Codable");
            }
            return protocols.length > 0 ? ": " + protocols.join(", ") : "";
        };
        _this.renderClassDefinition = function (c, className) {
            var swiftType = function (p) {
                if (p.isOptional) {
                    return [_this.swiftType(p.type, true, true), "?"];
                }
                else {
                    return _this.swiftType(p.type, true);
                }
            };
            _this.emitDescription(_this.descriptionForType(c));
            var isClass = _this._useClasses || _this.isCycleBreakerType(c);
            var structOrClass = isClass ? "class" : "struct";
            _this.emitBlockWithAccess([structOrClass, " ", className, _this.getProtocolString()], function () {
                if (_this._dense) {
                    var lastProperty_1 = undefined;
                    var lastNames_1 = [];
                    var emitLastProperty_1 = function () {
                        if (lastProperty_1 === undefined)
                            return;
                        var sources = [[_this.accessLevel, "let "]];
                        lastNames_1.forEach(function (n, i) {
                            if (i > 0)
                                sources.push(", ");
                            sources.push(n);
                        });
                        sources.push(": ");
                        sources.push(swiftType(lastProperty_1));
                        _this.emitLine(sources);
                        lastProperty_1 = undefined;
                        lastNames_1 = [];
                    };
                    _this.forEachClassProperty(c, "none", function (name, jsonName, p) {
                        var description = _this.descriptionForClassProperty(c, jsonName);
                        if (!p.equals(lastProperty_1) ||
                            lastNames_1.length >= MAX_SAMELINE_PROPERTIES ||
                            description !== undefined) {
                            emitLastProperty_1();
                        }
                        if (lastProperty_1 === undefined) {
                            lastProperty_1 = p;
                        }
                        lastNames_1.push(name);
                        if (description !== undefined) {
                            _this.emitDescription(description);
                            emitLastProperty_1();
                        }
                    });
                    emitLastProperty_1();
                }
                else {
                    _this.forEachClassProperty(c, "none", function (name, jsonName, p) {
                        var description = _this.descriptionForClassProperty(c, jsonName);
                        _this.emitDescription(description);
                        _this.emitLine(_this.accessLevel, "let ", name, ": ", swiftType(p));
                    });
                }
                if (!_this._justTypes) {
                    var groups_1 = _this.getEnumPropertyGroups(c);
                    var allPropertiesRedundant = groups_1.every(function (group) {
                        return group.every(function (p) { return p.label === undefined; });
                    });
                    if (!allPropertiesRedundant && !c.getProperties().isEmpty()) {
                        _this.ensureBlankLine();
                        _this.emitBlock("enum CodingKeys: String, CodingKey", function () {
                            for (var _i = 0, groups_2 = groups_1; _i < groups_2.length; _i++) {
                                var group = groups_2[_i];
                                var _a = group[0], name = _a.name, label = _a.label;
                                if (label !== undefined) {
                                    _this.emitLine("case ", name, ' = "', label, '"');
                                }
                                else {
                                    var names = Support_1.intercalate(", ", immutable_1.List(group.map(function (p) { return p.name; }))).toArray();
                                    _this.emitLine.apply(_this, ["case "].concat(names));
                                }
                            }
                        });
                    }
                }
                // this main initializer must be defined within the class
                // declaration since it assigns let constants
                if (isClass) {
                    // Make an initializer that initalizes all fields
                    _this.ensureBlankLine();
                    var properties_1 = [];
                    _this.forEachClassProperty(c, "none", function (name, _, p) {
                        if (properties_1.length > 0)
                            properties_1.push(", ");
                        properties_1.push(name, ": ", swiftType(p));
                    });
                    _this.emitBlockWithAccess(["init("].concat(properties_1, [")"]), function () {
                        _this.forEachClassProperty(c, "none", function (name) {
                            _this.emitLine("self.", name, " = ", name);
                        });
                    });
                }
            });
        };
        _this.emitConvenienceInitializersExtension = function (c, className) {
            var isClass = _this._useClasses || _this.isCycleBreakerType(c);
            var convenience = isClass ? "convenience " : "";
            _this.emitBlockWithAccess(["extension ", className], function () {
                if (isClass) {
                    _this.emitBlockWithAccess("convenience init(data: Data) throws", function () {
                        _this.emitLine("let me = try JSONDecoder().decode(", _this.swiftType(c), ".self, from: data)");
                        var args = [];
                        _this.forEachClassProperty(c, "none", function (name) {
                            if (args.length > 0)
                                args.push(", ");
                            args.push(name, ": ", "me.", name);
                        });
                        _this.emitLine.apply(_this, ["self.init("].concat(args, [")"]));
                    });
                }
                else {
                    _this.emitBlockWithAccess("init(data: Data) throws", function () {
                        _this.emitLine("self = try JSONDecoder().decode(", _this.swiftType(c), ".self, from: data)");
                    });
                }
                _this.ensureBlankLine();
                _this.emitBlockWithAccess([convenience, "init(_ json: String, using encoding: String.Encoding = .utf8) throws"], function () {
                    _this.emitBlock("guard let data = json.data(using: encoding) else", function () {
                        _this.emitLine("throw NSError(domain: \"JSONDecoding\", code: 0, userInfo: nil)");
                    });
                    _this.emitLine("try self.init(data: data)");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess([convenience, "init(fromURL url: URL) throws"], function () {
                    _this.emitLine("try self.init(data: try Data(contentsOf: url))");
                });
                // Convenience serializers
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("func jsonData() throws -> Data", function () {
                    _this.emitLine("return try JSONEncoder().encode(self)");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("func jsonString(encoding: String.Encoding = .utf8) throws -> String?", function () {
                    _this.emitLine("return String(data: try self.jsonData(), encoding: encoding)");
                });
            });
        };
        _this.renderEnumDefinition = function (e, enumName) {
            _this.emitDescription(_this.descriptionForType(e));
            if (_this._justTypes) {
                _this.emitBlockWithAccess(["enum ", enumName], function () {
                    _this.forEachEnumCase(e, "none", function (name) {
                        _this.emitLine("case ", name);
                    });
                });
            }
            else {
                _this.emitBlockWithAccess(["enum ", enumName, ": String, Codable"], function () {
                    _this.forEachEnumCase(e, "none", function (name, jsonName) {
                        _this.emitLine("case ", name, ' = "', stringEscape(jsonName), '"');
                    });
                });
            }
        };
        _this.renderUnionDefinition = function (u, unionName) {
            function sortBy(t) {
                var kind = t.kind;
                if (kind === "class")
                    return kind;
                return "_" + kind;
            }
            var renderUnionCase = function (t) {
                _this.emitBlock(["if let x = try? container.decode(", _this.swiftType(t), ".self)"], function () {
                    _this.emitLine("self = .", _this.nameForUnionMember(u, t), "(x)");
                    _this.emitLine("return");
                });
            };
            _this.emitDescription(_this.descriptionForType(u));
            var indirect = _this.isCycleBreakerType(u) ? "indirect " : "";
            var _a = TypeUtils_1.removeNullFromUnion(u, sortBy), maybeNull = _a[0], nonNulls = _a[1];
            _this.emitBlockWithAccess([indirect, "enum ", unionName, _this.getProtocolString()], function () {
                _this.forEachUnionMember(u, nonNulls, "none", null, function (name, t) {
                    _this.emitLine("case ", name, "(", _this.swiftType(t), ")");
                });
                if (maybeNull !== null) {
                    _this.emitLine("case ", _this.nameForUnionMember(u, maybeNull));
                }
                if (!_this._justTypes) {
                    _this.ensureBlankLine();
                    _this.emitBlockWithAccess("init(from decoder: Decoder) throws", function () {
                        _this.emitLine("let container = try decoder.singleValueContainer()");
                        var boolMember = u.findMember("bool");
                        if (boolMember !== undefined)
                            renderUnionCase(boolMember);
                        var integerMember = u.findMember("integer");
                        if (integerMember !== undefined)
                            renderUnionCase(integerMember);
                        nonNulls.forEach(function (t) {
                            if (t.kind === "bool" || t.kind === "integer")
                                return;
                            renderUnionCase(t);
                        });
                        if (maybeNull !== null) {
                            _this.emitBlock("if container.decodeNil()", function () {
                                _this.emitLine("self = .", _this.nameForUnionMember(u, maybeNull));
                                _this.emitLine("return");
                            });
                        }
                        _this.emitDecodingError(unionName);
                    });
                    _this.ensureBlankLine();
                    _this.emitBlockWithAccess("func encode(to encoder: Encoder) throws", function () {
                        _this.emitLine("var container = encoder.singleValueContainer()");
                        _this.emitLine("switch self {");
                        _this.forEachUnionMember(u, nonNulls, "none", null, function (name, _) {
                            _this.emitLine("case .", name, "(let x):");
                            _this.indent(function () { return _this.emitLine("try container.encode(x)"); });
                        });
                        if (maybeNull !== null) {
                            _this.emitLine("case .", _this.nameForUnionMember(u, maybeNull), ":");
                            _this.indent(function () { return _this.emitLine("try container.encodeNil()"); });
                        }
                        _this.emitLine("}");
                    });
                }
            });
        };
        _this.emitTopLevelMapAndArrayConvenienceInitializerExtensions = function (t, name) {
            var extensionSource;
            if (t instanceof Type_1.ArrayType) {
                extensionSource = ["Array where Element == ", name, ".Element"];
            }
            else if (t instanceof Type_1.MapType) {
                extensionSource = ["Dictionary where Key == String, Value == ", _this.swiftType(t.values)];
            }
            else {
                return;
            }
            _this.emitBlockWithAccess(["extension ", extensionSource], function () {
                _this.emitBlock(["init(data: Data) throws"], function () {
                    _this.emitLine("self = try JSONDecoder().decode(", name, ".self, from: data)");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("init(_ json: String, using encoding: String.Encoding = .utf8) throws", function () {
                    _this.emitBlock("guard let data = json.data(using: encoding) else", function () {
                        _this.emitLine("throw NSError(domain: \"JSONDecoding\", code: 0, userInfo: nil)");
                    });
                    _this.emitLine("try self.init(data: data)");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("init(fromURL url: URL) throws", function () {
                    _this.emitLine("try self.init(data: try Data(contentsOf: url))");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("func jsonData() throws -> Data", function () {
                    _this.emitLine("return try JSONEncoder().encode(self)");
                });
                _this.ensureBlankLine();
                _this.emitBlockWithAccess("func jsonString(encoding: String.Encoding = .utf8) throws -> String?", function () {
                    _this.emitLine("return String(data: try self.jsonData(), encoding: encoding)");
                });
            });
        };
        _this.emitDecodingError = function (name) {
            _this.emitLine("throw DecodingError.typeMismatch(", name, '.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: "Wrong type for ', name, '"))');
        };
        _this.emitSupportFunctions4 = function () {
            // This assumes that this method is called after declarations
            // are emitted.
            if (_this._needAny || _this._needNull) {
                _this.emitMark("Encode/decode helpers");
                _this.ensureBlankLine();
                _this.emitMultiline(_this.accessLevel + "class JSONNull: Codable {\n    public init() {}\n    \n    public required init(from decoder: Decoder) throws {\n        let container = try decoder.singleValueContainer()\n        if !container.decodeNil() {\n            throw DecodingError.typeMismatch(JSONNull.self, DecodingError.Context(codingPath: decoder.codingPath, debugDescription: \"Wrong type for JSONNull\"))\n        }\n    }\n    \n    public func encode(to encoder: Encoder) throws {\n        var container = encoder.singleValueContainer()\n        try container.encodeNil()\n    }\n}");
            }
            if (_this._needAny) {
                _this.ensureBlankLine();
                _this.emitMultiline("class JSONCodingKey: CodingKey {\n    let key: String\n    \n    required init?(intValue: Int) {\n        return nil\n    }\n    \n    required init?(stringValue: String) {\n        key = stringValue\n    }\n    \n    var intValue: Int? {\n        return nil\n    }\n    \n    var stringValue: String {\n        return key\n    }\n}\n\n" + _this.accessLevel + "class JSONAny: Codable {\n    " + _this.accessLevel + "let value: Any\n    \n    static func decodingError(forCodingPath codingPath: [CodingKey]) -> DecodingError {\n        let context = DecodingError.Context(codingPath: codingPath, debugDescription: \"Cannot decode JSONAny\")\n        return DecodingError.typeMismatch(JSONAny.self, context)\n    }\n    \n    static func encodingError(forValue value: Any, codingPath: [CodingKey]) -> EncodingError {\n        let context = EncodingError.Context(codingPath: codingPath, debugDescription: \"Cannot encode JSONAny\")\n        return EncodingError.invalidValue(value, context)\n    }\n\n    static func decode(from container: SingleValueDecodingContainer) throws -> Any {\n        if let value = try? container.decode(Bool.self) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self) {\n            return value\n        }\n        if let value = try? container.decode(Double.self) {\n            return value\n        }\n        if let value = try? container.decode(String.self) {\n            return value\n        }\n        if container.decodeNil() {\n            return JSONNull()\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decode(from container: inout UnkeyedDecodingContainer) throws -> Any {\n        if let value = try? container.decode(Bool.self) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self) {\n            return value\n        }\n        if let value = try? container.decode(Double.self) {\n            return value\n        }\n        if let value = try? container.decode(String.self) {\n            return value\n        }\n        if let value = try? container.decodeNil() {\n            if value {\n                return JSONNull()\n            }\n        }\n        if var container = try? container.nestedUnkeyedContainer() {\n            return try decodeArray(from: &container)\n        }\n        if var container = try? container.nestedContainer(keyedBy: JSONCodingKey.self) {\n            return try decodeDictionary(from: &container)\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decode(from container: inout KeyedDecodingContainer<JSONCodingKey>, forKey key: JSONCodingKey) throws -> Any {\n        if let value = try? container.decode(Bool.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(Int64.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(Double.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decode(String.self, forKey: key) {\n            return value\n        }\n        if let value = try? container.decodeNil(forKey: key) {\n            if value {\n                return JSONNull()\n            }\n        }\n        if var container = try? container.nestedUnkeyedContainer(forKey: key) {\n            return try decodeArray(from: &container)\n        }\n        if var container = try? container.nestedContainer(keyedBy: JSONCodingKey.self, forKey: key) {\n            return try decodeDictionary(from: &container)\n        }\n        throw decodingError(forCodingPath: container.codingPath)\n    }\n    \n    static func decodeArray(from container: inout UnkeyedDecodingContainer) throws -> [Any] {\n        var arr: [Any] = []\n        while !container.isAtEnd {\n            let value = try decode(from: &container)\n            arr.append(value)\n        }\n        return arr\n    }\n\n    static func decodeDictionary(from container: inout KeyedDecodingContainer<JSONCodingKey>) throws -> [String: Any] {\n        var dict = [String: Any]()\n        for key in container.allKeys {\n            let value = try decode(from: &container, forKey: key)\n            dict[key.stringValue] = value\n        }\n        return dict\n    }\n    \n    static func encode(to container: inout UnkeyedEncodingContainer, array: [Any]) throws {\n        for value in array {\n            if let value = value as? Bool {\n                try container.encode(value)\n            } else if let value = value as? Int64 {\n                try container.encode(value)\n            } else if let value = value as? Double {\n                try container.encode(value)\n            } else if let value = value as? String {\n                try container.encode(value)\n            } else if value is JSONNull {\n                try container.encodeNil()\n            } else if let value = value as? [Any] {\n                var container = container.nestedUnkeyedContainer()\n                try encode(to: &container, array: value)\n            } else if let value = value as? [String: Any] {\n                var container = container.nestedContainer(keyedBy: JSONCodingKey.self)\n                try encode(to: &container, dictionary: value)\n            } else {\n                throw encodingError(forValue: value, codingPath: container.codingPath)\n            }\n        }\n    }\n    \n    static func encode(to container: inout KeyedEncodingContainer<JSONCodingKey>, dictionary: [String: Any]) throws {\n        for (key, value) in dictionary {\n            let key = JSONCodingKey(stringValue: key)!\n            if let value = value as? Bool {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? Int64 {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? Double {\n                try container.encode(value, forKey: key)\n            } else if let value = value as? String {\n                try container.encode(value, forKey: key)\n            } else if value is JSONNull {\n                try container.encodeNil(forKey: key)\n            } else if let value = value as? [Any] {\n                var container = container.nestedUnkeyedContainer(forKey: key)\n                try encode(to: &container, array: value)\n            } else if let value = value as? [String: Any] {\n                var container = container.nestedContainer(keyedBy: JSONCodingKey.self, forKey: key)\n                try encode(to: &container, dictionary: value)\n            } else {\n                throw encodingError(forValue: value, codingPath: container.codingPath)\n            }\n        }\n    }\n\n    static func encode(to container: inout SingleValueEncodingContainer, value: Any) throws {\n        if let value = value as? Bool {\n            try container.encode(value)\n        } else if let value = value as? Int64 {\n            try container.encode(value)\n        } else if let value = value as? Double {\n            try container.encode(value)\n        } else if let value = value as? String {\n            try container.encode(value)\n        } else if value is JSONNull {\n            try container.encodeNil()\n        } else {\n            throw encodingError(forValue: value, codingPath: container.codingPath)\n        }\n    }\n    \n    public required init(from decoder: Decoder) throws {\n        if var arrayContainer = try? decoder.unkeyedContainer() {\n            self.value = try JSONAny.decodeArray(from: &arrayContainer)\n        } else if var container = try? decoder.container(keyedBy: JSONCodingKey.self) {\n            self.value = try JSONAny.decodeDictionary(from: &container)\n        } else {\n            let container = try decoder.singleValueContainer()\n            self.value = try JSONAny.decode(from: container)\n        }\n    }\n    \n    public func encode(to encoder: Encoder) throws {\n        if let arr = self.value as? [Any] {\n            var container = encoder.unkeyedContainer()\n            try JSONAny.encode(to: &container, array: arr)\n        } else if let dict = self.value as? [String: Any] {\n            var container = encoder.container(keyedBy: JSONCodingKey.self)\n            try JSONAny.encode(to: &container, dictionary: dict)\n        } else {\n            var container = encoder.singleValueContainer()\n            try JSONAny.encode(to: &container, value: self.value)\n        }\n    }\n}");
            }
        };
        return _this;
    }
    SwiftRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        if (this._alamofire) {
            return ["DataRequest"].concat(keywords);
        }
        return keywords;
    };
    SwiftRenderer.prototype.forbiddenForObjectProperties = function (_c, _classNamed) {
        return { names: ["fromURL", "json"], includeGlobalForbidden: true };
    };
    SwiftRenderer.prototype.forbiddenForEnumCases = function (_e, _enumName) {
        return { names: [], includeGlobalForbidden: true };
    };
    SwiftRenderer.prototype.forbiddenForUnionMembers = function (_u, _unionName) {
        return { names: [], includeGlobalForbidden: true };
    };
    SwiftRenderer.prototype.makeNamedTypeNamer = function () {
        var _this = this;
        return Naming_1.funPrefixNamer("upper", function (s) { return swiftNameStyle(_this._namedTypePrefix, true, s); });
    };
    SwiftRenderer.prototype.namerForObjectProperty = function () {
        return lowerNamingFunction;
    };
    SwiftRenderer.prototype.makeUnionMemberNamer = function () {
        return lowerNamingFunction;
    };
    SwiftRenderer.prototype.makeEnumCaseNamer = function () {
        return lowerNamingFunction;
    };
    SwiftRenderer.prototype.isImplicitCycleBreaker = function (t) {
        var kind = t.kind;
        return kind === "array" || kind === "map";
    };
    SwiftRenderer.prototype.emitDescriptionBlock = function (lines) {
        this.emitCommentLines(lines, "/// ");
    };
    SwiftRenderer.prototype.emitBlockWithAccess = function (line, f) {
        this.emitBlock([this.accessLevel, line], f);
    };
    SwiftRenderer.prototype.swiftType = function (t, withIssues, noOptional) {
        var _this = this;
        if (withIssues === void 0) { withIssues = false; }
        if (noOptional === void 0) { noOptional = false; }
        var optional = noOptional ? "" : "?";
        return TypeUtils_1.matchType(t, function (_anyType) {
            _this._needAny = true;
            return Source_1.maybeAnnotated(withIssues, Annotation_1.anyTypeIssueAnnotation, _this.justTypesCase(["Any", optional], "JSONAny"));
        }, function (_nullType) {
            _this._needNull = true;
            return Source_1.maybeAnnotated(withIssues, Annotation_1.nullTypeIssueAnnotation, _this.justTypesCase("NSNull", ["JSONNull", optional]));
        }, function (_boolType) { return "Bool"; }, function (_integerType) { return "Int"; }, function (_doubleType) { return "Double"; }, function (_stringType) { return "String"; }, function (arrayType) { return ["[", _this.swiftType(arrayType.items, withIssues), "]"]; }, function (classType) { return _this.nameForNamedType(classType); }, function (mapType) { return ["[String: ", _this.swiftType(mapType.values, withIssues), "]"]; }, function (enumType) { return _this.nameForNamedType(enumType); }, function (unionType) {
            var nullable = TypeUtils_1.nullableFromUnion(unionType);
            if (nullable !== null)
                return [_this.swiftType(nullable, withIssues), optional];
            return _this.nameForNamedType(unionType);
        });
    };
    SwiftRenderer.prototype.getEnumPropertyGroups = function (c) {
        var _this = this;
        var groups = [];
        var group = [];
        this.forEachClassProperty(c, "none", function (name, jsonName) {
            var label = stringEscape(jsonName);
            var redundant = _this.sourcelikeToString(name) === label;
            if (_this._dense && redundant) {
                group.push({ name: name });
            }
            else {
                if (group.length > 0) {
                    groups.push(group);
                    group = [];
                }
                groups.push([{ name: name, label: label }]);
            }
        });
        if (group.length > 0) {
            groups.push(group);
        }
        return groups;
    };
    Object.defineProperty(SwiftRenderer.prototype, "accessLevel", {
        /// Access level with trailing space (e.g. "public "), or empty string
        get: function () {
            return this._accessLevel === "internal"
                ? "" // internal is default, so we don't have to emit it
                : this._accessLevel + " ";
        },
        enumerable: true,
        configurable: true
    });
    SwiftRenderer.prototype.emitMark = function (line, horizontalLine) {
        if (horizontalLine === void 0) { horizontalLine = false; }
        this.emitLine("// MARK:", horizontalLine ? " - " : " ", line);
    };
    SwiftRenderer.prototype.emitSourceStructure = function () {
        var _this = this;
        this.renderHeader();
        this.forEachTopLevel("leading", this.renderTopLevelAlias, function (t) { return _this.namedTypeToNameForTopLevel(t) === undefined; });
        this.forEachNamedType("leading-and-interposing", this.renderClassDefinition, this.renderEnumDefinition, this.renderUnionDefinition);
        if (!this._justTypes) {
            // FIXME: We emit only the MARK line for top-level-enum.schema
            if (this._convenienceInitializers) {
                this.ensureBlankLine();
                this.emitMark("Convenience initializers");
                this.forEachNamedType("leading-and-interposing", this.emitConvenienceInitializersExtension, function () { return undefined; }, function () { return undefined; });
                this.ensureBlankLine();
                this.forEachTopLevel("leading-and-interposing", this.emitTopLevelMapAndArrayConvenienceInitializerExtensions);
            }
            this.ensureBlankLine();
            this.emitSupportFunctions4();
        }
        if (this._urlSession) {
            this.ensureBlankLine();
            this.emitMark("URLSession response handlers", true);
            this.ensureBlankLine();
            this.emitURLSessionExtension();
        }
        if (this._alamofire) {
            this.ensureBlankLine();
            this.emitMark("Alamofire response handlers", true);
            this.ensureBlankLine();
            this.emitAlamofireExtension();
        }
    };
    SwiftRenderer.prototype.emitURLSessionExtension = function () {
        var _this = this;
        this.ensureBlankLine();
        this.emitBlockWithAccess("extension URLSession", function () {
            _this
                .emitMultiline("fileprivate func codableTask<T: Codable>(with url: URL, completionHandler: @escaping (T?, URLResponse?, Error?) -> Void) -> URLSessionDataTask {\n    return self.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            completionHandler(nil, response, error)\n            return\n        }\n        completionHandler(try? JSONDecoder().decode(T.self, from: data), response, nil)\n    }\n}");
            _this.ensureBlankLine();
            _this.forEachTopLevel("leading-and-interposing", function (_, name) {
                _this.emitBlockWithAccess([
                    "func ",
                    Source_1.modifySource(Strings_1.camelCase, name),
                    "Task(with url: URL, completionHandler: @escaping (",
                    name,
                    "?, URLResponse?, Error?) -> Void) -> URLSessionDataTask"
                ], function () {
                    _this.emitLine("return self.codableTask(with: url, completionHandler: completionHandler)");
                });
            });
        });
    };
    SwiftRenderer.prototype.emitAlamofireExtension = function () {
        var _this = this;
        this.ensureBlankLine();
        this.emitBlockWithAccess("extension DataRequest", function () {
            _this
                .emitMultiline("fileprivate func decodableResponseSerializer<T: Decodable>() -> DataResponseSerializer<T> {\n    return DataResponseSerializer { _, response, data, error in\n        guard error == nil else { return .failure(error!) }\n        \n        guard let data = data else {\n            return .failure(AFError.responseSerializationFailed(reason: .inputDataNil))\n        }\n        \n        return Result { try JSONDecoder().decode(T.self, from: data) }\n    }\n}\n\n@discardableResult\nfileprivate func responseDecodable<T: Decodable>(queue: DispatchQueue? = nil, completionHandler: @escaping (DataResponse<T>) -> Void) -> Self {\n    return response(queue: queue, responseSerializer: decodableResponseSerializer(), completionHandler: completionHandler)\n}");
            _this.ensureBlankLine();
            _this.forEachTopLevel("leading-and-interposing", function (_, name) {
                _this.emitLine("@discardableResult");
                _this.emitBlockWithAccess([
                    "func response",
                    name,
                    "(queue: DispatchQueue? = nil, completionHandler: @escaping (DataResponse<",
                    name,
                    ">) -> Void) -> Self"
                ], function () {
                    _this.emitLine("return responseDecodable(queue: queue, completionHandler: completionHandler)");
                });
            });
        });
    };
    return SwiftRenderer;
}(ConvenienceRenderer_1.ConvenienceRenderer));
exports.SwiftRenderer = SwiftRenderer;
