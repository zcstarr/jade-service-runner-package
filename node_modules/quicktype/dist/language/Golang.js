"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Naming_1 = require("../Naming");
var Strings_1 = require("../Strings");
var Support_1 = require("../Support");
var RendererOptions_1 = require("../RendererOptions");
var Source_1 = require("../Source");
var Annotation_1 = require("../Annotation");
var TargetLanguage_1 = require("../TargetLanguage");
var ConvenienceRenderer_1 = require("../ConvenienceRenderer");
var GoTargetLanguage = /** @class */ (function (_super) {
    __extends(GoTargetLanguage, _super);
    function GoTargetLanguage() {
        var _this = _super.call(this, "Go", ["go", "golang"], "go") || this;
        _this._justTypesOption = new RendererOptions_1.BooleanOption("just-types", "Plain types only", false);
        _this._packageOption = new RendererOptions_1.StringOption("package", "Generated package name", "NAME", "main");
        return _this;
    }
    GoTargetLanguage.prototype.getOptions = function () {
        return [this._justTypesOption, this._packageOption];
    };
    Object.defineProperty(GoTargetLanguage.prototype, "supportsUnionsWithBothNumberTypes", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return GoRenderer;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GoTargetLanguage.prototype, "defaultIndentation", {
        get: function () {
            return "\t";
        },
        enumerable: true,
        configurable: true
    });
    return GoTargetLanguage;
}(TargetLanguage_1.TargetLanguage));
exports.default = GoTargetLanguage;
var namingFunction = Naming_1.funPrefixNamer("namer", goNameStyle);
var legalizeName = Strings_1.legalizeCharacters(Strings_1.isLetterOrUnderscoreOrDigit);
function goNameStyle(original) {
    var words = Strings_1.splitIntoWords(original);
    return Strings_1.combineWords(words, legalizeName, Strings_1.firstUpperWordStyle, Strings_1.firstUpperWordStyle, Strings_1.allUpperWordStyle, Strings_1.allUpperWordStyle, "", Strings_1.isLetterOrUnderscore);
}
var primitiveValueTypeKinds = ["integer", "double", "bool", "string"];
var compoundTypeKinds = ["array", "class", "map", "enum"];
function isValueType(t) {
    var kind = t.kind;
    return primitiveValueTypeKinds.indexOf(kind) >= 0 || kind === "class" || kind === "enum";
}
function singleDescriptionComment(description) {
    if (description === undefined)
        return "";
    return "// " + description.join("; ");
}
var GoRenderer = /** @class */ (function (_super) {
    __extends(GoRenderer, _super);
    function GoRenderer(targetLanguage, graph, leadingComments, _justTypes, _packageName) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments) || this;
        _this._justTypes = _justTypes;
        _this._packageName = _packageName;
        _this._topLevelUnmarshalNames = immutable_1.Map();
        _this.emitBlock = function (line, f) {
            _this.emitLine(line, " {");
            _this.indent(f);
            _this.emitLine("}");
        };
        _this.emitFunc = function (decl, f) {
            _this.emitBlock(["func ", decl], f);
        };
        _this.emitStruct = function (name, table) {
            _this.emitBlock(["type ", name, " struct"], function () { return _this.emitTable(table); });
        };
        _this.nullableGoType = function (t, withIssues) {
            var goType = _this.goType(t, withIssues);
            if (isValueType(t)) {
                return ["*", goType];
            }
            else {
                return goType;
            }
        };
        _this.goType = function (t, withIssues) {
            if (withIssues === void 0) { withIssues = false; }
            return TypeUtils_1.matchType(t, function (_anyType) { return Source_1.maybeAnnotated(withIssues, Annotation_1.anyTypeIssueAnnotation, "interface{}"); }, function (_nullType) { return Source_1.maybeAnnotated(withIssues, Annotation_1.nullTypeIssueAnnotation, "interface{}"); }, function (_boolType) { return "bool"; }, function (_integerType) { return "int64"; }, function (_doubleType) { return "float64"; }, function (_stringType) { return "string"; }, function (arrayType) { return ["[]", _this.goType(arrayType.items, withIssues)]; }, function (classType) { return _this.nameForNamedType(classType); }, function (mapType) {
                var valueSource;
                var v = mapType.values;
                if (v instanceof Type_1.UnionType && TypeUtils_1.nullableFromUnion(v) === null) {
                    valueSource = ["*", _this.nameForNamedType(v)];
                }
                else {
                    valueSource = _this.goType(v, withIssues);
                }
                return ["map[string]", valueSource];
            }, function (enumType) { return _this.nameForNamedType(enumType); }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                if (nullable !== null)
                    return _this.nullableGoType(nullable, withIssues);
                return _this.nameForNamedType(unionType);
            });
        };
        _this.emitTopLevel = function (t, name) {
            var unmarshalName = Support_1.defined(_this._topLevelUnmarshalNames.get(name));
            if (_this.namedTypeToNameForTopLevel(t) === undefined) {
                _this.emitLine("type ", name, " ", _this.goType(t));
            }
            if (_this._justTypes)
                return;
            _this.ensureBlankLine();
            _this.emitFunc([unmarshalName, "(data []byte) (", name, ", error)"], function () {
                _this.emitLine("var r ", name);
                _this.emitLine("err := json.Unmarshal(data, &r)");
                _this.emitLine("return r, err");
            });
            _this.ensureBlankLine();
            _this.emitFunc(["(r *", name, ") Marshal() ([]byte, error)"], function () {
                _this.emitLine("return json.Marshal(r)");
            });
        };
        _this.emitClass = function (c, className) {
            var columns = [];
            _this.forEachClassProperty(c, "none", function (name, jsonName, p) {
                var goType = _this.propertyGoType(p.type);
                var comment = singleDescriptionComment(_this.descriptionForClassProperty(c, jsonName));
                columns.push([[name, " "], [goType, " "], ['`json:"', Strings_1.stringEscape(jsonName), '"`'], comment]);
            });
            _this.emitDescription(_this.descriptionForType(c));
            _this.emitStruct(className, columns);
        };
        _this.emitEnum = function (e, enumName) {
            _this.emitDescription(_this.descriptionForType(e));
            _this.emitLine("type ", enumName, " string");
            _this.emitLine("const (");
            _this.indent(function () {
                return _this.forEachEnumCase(e, "none", function (name, jsonName) {
                    _this.emitLine(name, " ", enumName, ' = "', Strings_1.stringEscape(jsonName), '"');
                });
            });
            _this.emitLine(")");
        };
        _this.emitUnion = function (u, unionName) {
            var _a = TypeUtils_1.removeNullFromUnion(u), hasNull = _a[0], nonNulls = _a[1];
            var isNullableArg = hasNull !== null ? "true" : "false";
            var ifMember = function (kind, ifNotMember, f) {
                var maybeType = u.findMember(kind);
                if (maybeType === undefined)
                    return ifNotMember;
                return f(maybeType, _this.nameForUnionMember(u, maybeType), _this.goType(maybeType));
            };
            var maybeAssignNil = function (kind) {
                ifMember(kind, undefined, function (_1, fieldName, _2) {
                    _this.emitLine("x.", fieldName, " = nil");
                });
            };
            var makeArgs = function (primitiveArg, compoundArg) {
                var args = [];
                for (var _i = 0, primitiveValueTypeKinds_1 = primitiveValueTypeKinds; _i < primitiveValueTypeKinds_1.length; _i++) {
                    var kind = primitiveValueTypeKinds_1[_i];
                    args.push(ifMember(kind, "nil", function (_1, fieldName, _2) { return primitiveArg(fieldName); }), ", ");
                }
                for (var _a = 0, compoundTypeKinds_1 = compoundTypeKinds; _a < compoundTypeKinds_1.length; _a++) {
                    var kind = compoundTypeKinds_1[_a];
                    args.push(ifMember(kind, "false, nil", function (t, fieldName, _) { return compoundArg(t.kind === "class", fieldName); }), ", ");
                }
                args.push(isNullableArg);
                return args;
            };
            var columns = [];
            _this.forEachUnionMember(u, nonNulls, "none", null, function (fieldName, t) {
                var goType = _this.nullableGoType(t, true);
                columns.push([[fieldName, " "], goType]);
            });
            _this.emitDescription(_this.descriptionForType(u));
            _this.emitStruct(unionName, columns);
            if (_this._justTypes)
                return;
            _this.ensureBlankLine();
            _this.emitFunc(["(x *", unionName, ") UnmarshalJSON(data []byte) error"], function () {
                for (var _i = 0, compoundTypeKinds_2 = compoundTypeKinds; _i < compoundTypeKinds_2.length; _i++) {
                    var kind = compoundTypeKinds_2[_i];
                    maybeAssignNil(kind);
                }
                ifMember("class", undefined, function (_1, _2, goType) {
                    _this.emitLine("var c ", goType);
                });
                var args = makeArgs(function (fn) { return ["&x.", fn]; }, function (isClass, fn) {
                    if (isClass) {
                        return "true, &c";
                    }
                    else {
                        return ["true, &x.", fn];
                    }
                });
                _this.emitLine("object, err := unmarshalUnion(data, ", args, ")");
                _this.emitBlock("if err != nil", function () {
                    _this.emitLine("return err");
                });
                _this.emitBlock("if object", function () {
                    ifMember("class", undefined, function (_1, fieldName, _2) {
                        _this.emitLine("x.", fieldName, " = &c");
                    });
                });
                _this.emitLine("return nil");
            });
            _this.ensureBlankLine();
            _this.emitFunc(["(x *", unionName, ") MarshalJSON() ([]byte, error)"], function () {
                var args = makeArgs(function (fn) { return ["x.", fn]; }, function (_, fn) { return ["x.", fn, " != nil, x.", fn]; });
                _this.emitLine("return marshalUnion(", args, ")");
            });
        };
        return _this;
    }
    GoRenderer.prototype.makeNamedTypeNamer = function () {
        return namingFunction;
    };
    GoRenderer.prototype.namerForObjectProperty = function () {
        return namingFunction;
    };
    GoRenderer.prototype.makeUnionMemberNamer = function () {
        return namingFunction;
    };
    GoRenderer.prototype.makeEnumCaseNamer = function () {
        return namingFunction;
    };
    Object.defineProperty(GoRenderer.prototype, "enumCasesInGlobalNamespace", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    GoRenderer.prototype.makeTopLevelDependencyNames = function (_, topLevelName) {
        var unmarshalName = new Naming_1.DependencyName(namingFunction, topLevelName.order, function (lookup) { return "unmarshal_" + lookup(topLevelName); });
        this._topLevelUnmarshalNames = this._topLevelUnmarshalNames.set(topLevelName, unmarshalName);
        return [unmarshalName];
    };
    GoRenderer.prototype.propertyGoType = function (t) {
        var goType = this.goType(t, true);
        if (t instanceof Type_1.UnionType && TypeUtils_1.nullableFromUnion(t) === null) {
            return ["*", goType];
        }
        return goType;
    };
    GoRenderer.prototype.emitSourceStructure = function () {
        var _this = this;
        if (this.leadingComments !== undefined) {
            this.emitCommentLines(this.leadingComments);
        }
        else if (!this._justTypes) {
            this.emitLine("// To parse and unparse this JSON data, add this code to your project and do:");
            this.forEachTopLevel("none", function (_, name) {
                _this.emitLine("//");
                var ref = Source_1.modifySource(Strings_1.camelCase, name);
                _this.emitLine("//    ", ref, ", err := ", Support_1.defined(_this._topLevelUnmarshalNames.get(name)), "(bytes)");
                _this.emitLine("//    bytes, err = ", ref, ".Marshal()");
            });
        }
        if (!this._justTypes) {
            this.ensureBlankLine();
            this.emitLine("package ", this._packageName);
            this.ensureBlankLine();
            if (this.haveNamedUnions) {
                this.emitLine('import "bytes"');
                this.emitLine('import "errors"');
            }
            this.emitLine('import "encoding/json"');
        }
        this.forEachTopLevel("leading-and-interposing", this.emitTopLevel, function (t) { return !_this._justTypes || _this.namedTypeToNameForTopLevel(t) === undefined; });
        this.forEachObject("leading-and-interposing", this.emitClass);
        this.forEachEnum("leading-and-interposing", this.emitEnum);
        this.forEachUnion("leading-and-interposing", this.emitUnion);
        if (this._justTypes)
            return;
        if (this.haveNamedUnions) {
            this.ensureBlankLine();
            this
                .emitMultiline("func unmarshalUnion(data []byte, pi **int64, pf **float64, pb **bool, ps **string, haveArray bool, pa interface{}, haveObject bool, pc interface{}, haveMap bool, pm interface{}, haveEnum bool, pe interface{}, nullable bool) (bool, error) {\n    if pi != nil {\n        *pi = nil\n    }\n    if pf != nil {\n        *pf = nil\n    }\n    if pb != nil {\n        *pb = nil\n    }\n    if ps != nil {\n        *ps = nil\n    }\n\n    dec := json.NewDecoder(bytes.NewReader(data))\n    dec.UseNumber()\n    tok, err := dec.Token()\n    if err != nil {\n        return false, err\n    }\n\n    switch v := tok.(type) {\n    case json.Number:\n        if pi != nil {\n            i, err := v.Int64()\n            if err == nil {\n                *pi = &i\n                return false, nil\n            }\n        }\n        if pf != nil {\n            f, err := v.Float64()\n            if err == nil {\n                *pf = &f\n                return false, nil\n            }\n            return false, errors.New(\"Unparsable number\")\n        }\n        return false, errors.New(\"Union does not contain number\")\n    case float64:\n        return false, errors.New(\"Decoder should not return float64\")\n    case bool:\n        if pb != nil {\n            *pb = &v\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain bool\")\n    case string:\n        if haveEnum {\n            return false, json.Unmarshal(data, pe)\n        }\n        if ps != nil {\n            *ps = &v\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain string\")\n    case nil:\n        if nullable {\n            return false, nil\n        }\n        return false, errors.New(\"Union does not contain null\")\n    case json.Delim:\n        if v == '{' {\n            if haveObject {\n                return true, json.Unmarshal(data, pc)\n            }\n            if haveMap {\n                return false, json.Unmarshal(data, pm)\n            }\n            return false, errors.New(\"Union does not contain object\")\n        }\n        if v == '[' {\n            if haveArray {\n                return false, json.Unmarshal(data, pa)\n            }\n            return false, errors.New(\"Union does not contain array\")\n        }\n        return false, errors.New(\"Cannot handle delimiter\")\n    }\n    return false, errors.New(\"Cannot unmarshal union\")\n\n}\n\nfunc marshalUnion(pi *int64, pf *float64, pb *bool, ps *string, haveArray bool, pa interface{}, haveObject bool, pc interface{}, haveMap bool, pm interface{}, haveEnum bool, pe interface{}, nullable bool) ([]byte, error) {\n    if pi != nil {\n        return json.Marshal(*pi)\n    }\n    if pf != nil {\n        return json.Marshal(*pf)\n    }\n    if pb != nil {\n        return json.Marshal(*pb)\n    }\n    if ps != nil {\n        return json.Marshal(*ps)\n    }\n    if haveArray {\n        return json.Marshal(pa)\n    }\n    if haveObject {\n        return json.Marshal(pc)\n    }\n    if haveMap {\n        return json.Marshal(pm)\n    }\n    if haveEnum {\n        return json.Marshal(pe)\n    }\n    if nullable {\n        return json.Marshal(nil)\n    }\n    return nil, errors.New(\"Union must not be null\")\n}");
        }
    };
    return GoRenderer;
}(ConvenienceRenderer_1.ConvenienceRenderer));
exports.GoRenderer = GoRenderer;
