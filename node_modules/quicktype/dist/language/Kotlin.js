"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Annotation_1 = require("../Annotation");
var ConvenienceRenderer_1 = require("../ConvenienceRenderer");
var Naming_1 = require("../Naming");
var RendererOptions_1 = require("../RendererOptions");
var Source_1 = require("../Source");
var Strings_1 = require("../Strings");
var Support_1 = require("../Support");
var TargetLanguage_1 = require("../TargetLanguage");
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Framework;
(function (Framework) {
    Framework[Framework["None"] = 0] = "None";
    Framework[Framework["Klaxon"] = 1] = "Klaxon";
})(Framework || (Framework = {}));
var KotlinTargetLanguage = /** @class */ (function (_super) {
    __extends(KotlinTargetLanguage, _super);
    function KotlinTargetLanguage() {
        var _this = _super.call(this, "Kotlin", ["kotlin"], "kt") || this;
        _this._frameworkOption = new RendererOptions_1.EnumOption("framework", "Serialization framework", [["just-types", Framework.None], ["klaxon", Framework.Klaxon]], "klaxon");
        _this._packageName = new RendererOptions_1.StringOption("package", "Package", "PACKAGE", "quicktype");
        return _this;
    }
    KotlinTargetLanguage.prototype.getOptions = function () {
        return [this._frameworkOption, this._packageName];
    };
    Object.defineProperty(KotlinTargetLanguage.prototype, "supportsOptionalClassProperties", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KotlinTargetLanguage.prototype, "supportsUnionsWithBothNumberTypes", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(KotlinTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return KotlinRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return KotlinTargetLanguage;
}(TargetLanguage_1.TargetLanguage));
exports.default = KotlinTargetLanguage;
var keywords = [
    "package",
    "as",
    "typealias",
    "class",
    "this",
    "super",
    "val",
    "var",
    "fun",
    "for",
    "null",
    "true",
    "false",
    "is",
    "in",
    "throw",
    "return",
    "break",
    "continue",
    "object",
    "if",
    "try",
    "else",
    "while",
    "do",
    "when",
    "interface",
    "typeof",
    "klaxon",
    "toJson",
    "Any",
    "Boolean",
    "Double",
    "Float",
    "Long",
    "Int",
    "Short",
    "System",
    "Byte",
    "String",
    "Array",
    "List",
    "JsonObject",
    "JsonValue",
    "Converter",
    "Klaxon"
];
function isPartCharacter(codePoint) {
    return Strings_1.isLetterOrUnderscore(codePoint) || Strings_1.isNumeric(codePoint);
}
function isStartCharacter(codePoint) {
    return isPartCharacter(codePoint) && !Strings_1.isDigit(codePoint);
}
var legalizeName = Strings_1.legalizeCharacters(isPartCharacter);
function kotlinNameStyle(isUpper, original) {
    var words = Strings_1.splitIntoWords(original);
    return Strings_1.combineWords(words, legalizeName, isUpper ? Strings_1.firstUpperWordStyle : Strings_1.allLowerWordStyle, Strings_1.firstUpperWordStyle, isUpper ? Strings_1.allUpperWordStyle : Strings_1.allLowerWordStyle, Strings_1.allUpperWordStyle, "", isStartCharacter);
}
function unicodeEscape(codePoint) {
    return "\\u" + Strings_1.intToHex(codePoint, 4);
}
var _stringEscape = Strings_1.utf32ConcatMap(Strings_1.escapeNonPrintableMapper(Strings_1.isPrintable, unicodeEscape));
function stringEscape(s) {
    // "$this" is a template string in Kotlin so we have to escape $
    return _stringEscape(s).replace(/\$/g, "\\$");
}
var upperNamingFunction = Naming_1.funPrefixNamer("upper", function (s) { return kotlinNameStyle(true, s); });
var lowerNamingFunction = Naming_1.funPrefixNamer("lower", function (s) { return kotlinNameStyle(false, s); });
var KotlinRenderer = /** @class */ (function (_super) {
    __extends(KotlinRenderer, _super);
    function KotlinRenderer(targetLanguage, graph, leadingComments, _framework, _package) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments) || this;
        _this._framework = _framework;
        _this._package = _package;
        return _this;
    }
    Object.defineProperty(KotlinRenderer.prototype, "_justTypes", {
        get: function () {
            return this._framework === Framework.None;
        },
        enumerable: true,
        configurable: true
    });
    KotlinRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        return keywords;
    };
    KotlinRenderer.prototype.forbiddenForObjectProperties = function (_o, _classNamed) {
        return { names: [], includeGlobalForbidden: true };
    };
    KotlinRenderer.prototype.forbiddenForEnumCases = function (_e, _enumName) {
        return { names: [], includeGlobalForbidden: true };
    };
    KotlinRenderer.prototype.forbiddenForUnionMembers = function (_u, _unionName) {
        return { names: [], includeGlobalForbidden: false };
    };
    KotlinRenderer.prototype.topLevelNameStyle = function (rawName) {
        return kotlinNameStyle(true, rawName);
    };
    KotlinRenderer.prototype.makeNamedTypeNamer = function () {
        return upperNamingFunction;
    };
    KotlinRenderer.prototype.namerForObjectProperty = function () {
        return lowerNamingFunction;
    };
    KotlinRenderer.prototype.makeUnionMemberNamer = function () {
        return Naming_1.funPrefixNamer("upper", function (s) { return kotlinNameStyle(true, s) + "Value"; });
    };
    KotlinRenderer.prototype.makeEnumCaseNamer = function () {
        return upperNamingFunction;
    };
    KotlinRenderer.prototype.emitDescriptionBlock = function (lines) {
        this.emitCommentLines(lines, " * ", "/**", " */");
    };
    KotlinRenderer.prototype.emitBlock = function (line, f, delimiter) {
        if (delimiter === void 0) { delimiter = "curly"; }
        var _a = delimiter === "curly" ? ["{", "}"] : ["(", ")"], open = _a[0], close = _a[1];
        this.emitLine(line, " ", open);
        this.indent(f);
        this.emitLine(close);
    };
    KotlinRenderer.prototype.kotlinType = function (t, withIssues, noOptional) {
        var _this = this;
        if (withIssues === void 0) { withIssues = false; }
        if (noOptional === void 0) { noOptional = false; }
        var optional = noOptional ? "" : "?";
        return TypeUtils_1.matchType(t, function (_anyType) {
            return Source_1.maybeAnnotated(withIssues, Annotation_1.anyTypeIssueAnnotation, ["Any", optional]);
        }, function (_nullType) {
            return Source_1.maybeAnnotated(withIssues, Annotation_1.nullTypeIssueAnnotation, ["Any", optional]);
        }, function (_boolType) { return "Boolean"; }, function (_integerType) { return "Long"; }, function (_doubleType) { return "Double"; }, function (_stringType) { return "String"; }, function (arrayType) { return ["List<", _this.kotlinType(arrayType.items, withIssues), ">"]; }, function (classType) { return _this.nameForNamedType(classType); }, function (mapType) { return ["Map<String, ", _this.kotlinType(mapType.values, withIssues), ">"]; }, function (enumType) { return _this.nameForNamedType(enumType); }, function (unionType) {
            var nullable = TypeUtils_1.nullableFromUnion(unionType);
            if (nullable !== null)
                return [_this.kotlinType(nullable, withIssues), optional];
            return _this.nameForNamedType(unionType);
        });
    };
    KotlinRenderer.prototype.unionMemberFromJsonValue = function (t, e) {
        var _this = this;
        return TypeUtils_1.matchType(t, function (_anyType) { return [e, ".inside"]; }, function (_nullType) { return "null"; }, function (_boolType) { return [e, ".boolean"]; }, function (_integerType) { return ["(", e, ".int?.toLong() ?: ", e, ".longValue)"]; }, function (_doubleType) { return [e, ".double"]; }, function (_stringType) { return [e, ".string"]; }, function (arrayType) { return [e, ".array?.let { klaxon.parseFromJsonArray<", _this.kotlinType(arrayType.items), ">(it) }"]; }, function (_classType) { return [e, ".obj?.let { klaxon.parseFromJsonObject<", _this.kotlinType(t), ">(it) }"]; }, function (_mapType) { return [e, ".obj?.let { klaxon.parseFromJsonObject<", _this.kotlinType(t), ">(it) }"]; }, function (enumType) { return [e, ".string?.let { ", _this.kotlinType(enumType), ".fromValue(it) }"]; }, function (_unionType) { return Support_1.mustNotHappen(); });
    };
    KotlinRenderer.prototype.unionMemberJsonValueGuard = function (t, _e) {
        return TypeUtils_1.matchType(t, function (_anyType) { return "is Any"; }, function (_nullType) { return "null"; }, function (_boolType) { return "is Boolean"; }, function (_integerType) { return "is Int, is Long"; }, function (_doubleType) { return "is Double"; }, function (_stringType) { return "is String"; }, function (_arrayType) { return "is JsonArray<*>"; }, 
        // These could be stricter, but for now we don't allow maps
        // and objects in the same union
        function (_classType) { return "is JsonObject"; }, function (_mapType) { return "is JsonObject"; }, 
        // This could be stricter, but for now we don't allow strings
        // and enums in the same union
        function (_enumType) { return "is String"; }, function (_unionType) { return Support_1.mustNotHappen(); });
    };
    KotlinRenderer.prototype.emitHeader = function () {
        var _this = this;
        if (this.leadingComments !== undefined) {
            this.emitCommentLines(this.leadingComments);
        }
        else if (!this._justTypes) {
            this.emitLine("// To parse the JSON, install Klaxon and do:");
            this.emitLine("//");
            this.forEachTopLevel("none", function (_, name) {
                _this.emitLine("//   val ", Source_1.modifySource(Strings_1.camelCase, name), " = ", name, ".fromJson(jsonString)");
            });
        }
        this.ensureBlankLine();
        this.emitLine("package ", this._package);
        this.ensureBlankLine();
        if (this._framework === Framework.Klaxon) {
            this.emitLine("import com.beust.klaxon.*");
        }
    };
    KotlinRenderer.prototype.emitTopLevelArray = function (t, name) {
        var _this = this;
        var elementType = this.kotlinType(t.items);
        this.emitBlock(["class ", name, "(elements: Collection<", elementType, ">) : ArrayList<", elementType, ">(elements)"], function () {
            _this.emitLine("public fun toJson() = klaxon.toJsonString(this)");
            _this.ensureBlankLine();
            _this.emitBlock("companion object", function () {
                _this.emitLine("public fun fromJson(json: String) = ", name, "(klaxon.parseArray<", elementType, ">(json)!!)");
            });
        });
    };
    KotlinRenderer.prototype.emitTopLevelMap = function (t, name) {
        var _this = this;
        var elementType = this.kotlinType(t.values);
        this.emitBlock([
            "class ",
            name,
            "(elements: Map<String, ",
            elementType,
            ">) : HashMap<String, ",
            elementType,
            ">(elements)"
        ], function () {
            _this.emitLine("public fun toJson() = klaxon.toJsonString(this)");
            _this.ensureBlankLine();
            _this.emitBlock("companion object", function () {
                _this.emitBlock(["public fun fromJson(json: String) = ", name], function () {
                    _this.emitLine("klaxon.parseJsonObject(java.io.StringReader(json)) as Map<String, ", elementType, ">");
                }, "paren");
            });
        });
    };
    KotlinRenderer.prototype.klaxonRenameAttribute = function (propName, jsonName, ignore) {
        if (ignore === void 0) { ignore = false; }
        var escapedName = stringEscape(jsonName);
        var namesDiffer = this.sourcelikeToString(propName) !== escapedName;
        var properties = [];
        if (namesDiffer) {
            properties.push(['name = "', escapedName, '"']);
        }
        if (ignore) {
            properties.push("ignored = true");
        }
        return properties.length === 0 ? undefined : ["@Json(", Support_1.intercalateArray(", ", properties), ")"];
    };
    KotlinRenderer.prototype.emitEmptyClassDefinition = function (c, className) {
        this.emitDescription(this.descriptionForType(c));
        if (this._framework === Framework.Klaxon) {
            this.emitLine("typealias ", className, " = JsonObject");
        }
        else {
            this.emitLine("class ", className, "()");
        }
    };
    KotlinRenderer.prototype.emitClassDefinition = function (c, className) {
        var _this = this;
        if (c.getProperties().count() === 0) {
            this.emitEmptyClassDefinition(c, className);
            return;
        }
        var kotlinType = function (p) {
            if (p.isOptional) {
                return [_this.kotlinType(p.type, true, true), "?"];
            }
            else {
                return _this.kotlinType(p.type, true);
            }
        };
        this.emitDescription(this.descriptionForType(c));
        this.emitLine("data class ", className, " (");
        this.indent(function () {
            var count = c.getProperties().count();
            var first = true;
            _this.forEachClassProperty(c, "none", function (name, jsonName, p) {
                var nullable = p.type.kind === "union" && TypeUtils_1.nullableFromUnion(p.type) !== null;
                var nullableOrOptional = p.isOptional || p.type.kind === "null" || nullable;
                var last = --count === 0;
                var meta = [];
                var description = _this.descriptionForClassProperty(c, jsonName);
                if (description !== undefined) {
                    meta.push(function () { return _this.emitDescription(description); });
                }
                if (_this._framework === Framework.Klaxon) {
                    var rename_1 = _this.klaxonRenameAttribute(name, jsonName);
                    if (rename_1 !== undefined) {
                        meta.push(function () { return _this.emitLine(rename_1); });
                    }
                }
                if (meta.length > 0 && !first) {
                    _this.ensureBlankLine();
                }
                for (var _i = 0, meta_1 = meta; _i < meta_1.length; _i++) {
                    var emit = meta_1[_i];
                    emit();
                }
                _this.emitLine("val ", name, ": ", kotlinType(p), nullableOrOptional ? " = null" : "", last ? "" : ",");
                if (meta.length > 0 && !last) {
                    _this.ensureBlankLine();
                }
                first = false;
            });
        });
        var isTopLevel = this.topLevels.findEntry(function (top) { return top.equals(c); }) !== undefined;
        if (this._framework === Framework.Klaxon && isTopLevel) {
            this.emitBlock(")", function () {
                _this.emitLine("public fun toJson() = klaxon.toJsonString(this)");
                _this.ensureBlankLine();
                _this.emitBlock("companion object", function () {
                    _this.emitLine("public fun fromJson(json: String) = klaxon.parse<", className, ">(json)");
                });
            });
        }
        else {
            this.emitLine(")");
        }
    };
    KotlinRenderer.prototype.emitGenericConverter = function () {
        var _this = this;
        this.ensureBlankLine();
        this.emitLine("private fun <T> Klaxon.convert(k: kotlin.reflect.KClass<*>, fromJson: (JsonValue) -> T, toJson: (T) -> String, isUnion: Boolean = false) =");
        this.indent(function () {
            _this.emitLine("this.converter(object: Converter {");
            _this.indent(function () {
                _this.emitLine("@Suppress(\"UNCHECKED_CAST\")");
                _this.emitTable([
                    ["override fun toJson(value: Any)", " = toJson(value as T)"],
                    ["override fun fromJson(jv: JsonValue)", " = fromJson(jv) as Any"],
                    [
                        "override fun canConvert(cls: Class<*>)",
                        " = cls == k.java || (isUnion && cls.superclass == k.java)"
                    ]
                ]);
            });
            _this.emitLine("})");
        });
    };
    KotlinRenderer.prototype.emitEnumDefinition = function (e, enumName) {
        var _this = this;
        this.emitDescription(this.descriptionForType(e));
        if (this._framework === Framework.Klaxon) {
            this.emitBlock(["enum class ", enumName, "(val value: String)"], function () {
                var count = e.cases.count();
                _this.forEachEnumCase(e, "none", function (name, json) {
                    _this.emitLine(name, "(\"" + stringEscape(json) + "\")", --count === 0 ? ";" : ",");
                });
                _this.ensureBlankLine();
                _this.emitBlock("companion object", function () {
                    _this.emitBlock(["public fun fromValue(value: String): ", enumName, " = when (value)"], function () {
                        var table = [];
                        _this.forEachEnumCase(e, "none", function (name, json) {
                            table.push([["\"" + stringEscape(json) + "\""], [" -> ", name]]);
                        });
                        table.push([["else"], [" -> throw IllegalArgumentException()"]]);
                        _this.emitTable(table);
                    });
                });
            });
        }
        else {
            this.emitBlock(["enum class ", enumName], function () {
                var count = e.cases.count();
                _this.forEachEnumCase(e, "none", function (name) {
                    _this.emitLine(name, --count === 0 ? "" : ",");
                });
            });
        }
    };
    KotlinRenderer.prototype.emitUnionDefinition = function (u, unionName) {
        var _this = this;
        function sortBy(t) {
            var kind = t.kind;
            if (kind === "class")
                return kind;
            return "_" + kind;
        }
        this.emitDescription(this.descriptionForType(u));
        var _a = TypeUtils_1.removeNullFromUnion(u, sortBy), maybeNull = _a[0], nonNulls = _a[1];
        this.emitBlock(["sealed class ", unionName], function () {
            {
                var table_1 = [];
                _this.forEachUnionMember(u, nonNulls, "none", null, function (name, t) {
                    table_1.push([["class ", name, "(val value: ", _this.kotlinType(t), ")"], [" : ", unionName, "()"]]);
                });
                if (maybeNull !== null) {
                    table_1.push([["class ", _this.nameForUnionMember(u, maybeNull), "()"], [" : ", unionName, "()"]]);
                }
                _this.emitTable(table_1);
            }
            if (_this._framework === Framework.Klaxon) {
                _this.ensureBlankLine();
                _this.emitLine("public fun toJson(): String = klaxon.toJsonString(when (this) {");
                _this.indent(function () {
                    var toJsonTable = [];
                    _this.forEachUnionMember(u, nonNulls, "none", null, function (name) {
                        toJsonTable.push([["is ", name], [" -> this.value"]]);
                    });
                    if (maybeNull !== null) {
                        var name = _this.nameForUnionMember(u, maybeNull);
                        toJsonTable.push([["is ", name], [' -> "null"']]);
                    }
                    _this.emitTable(toJsonTable);
                });
                _this.emitLine("})");
                _this.ensureBlankLine();
                _this.emitBlock("companion object", function () {
                    _this.emitLine("public fun fromJson(jv: JsonValue): ", unionName, " = when (jv.inside) {");
                    _this.indent(function () {
                        var table = [];
                        _this.forEachUnionMember(u, nonNulls, "none", null, function (name, t) {
                            table.push([
                                [_this.unionMemberJsonValueGuard(t, "jv.inside")],
                                [" -> ", name, "(", _this.unionMemberFromJsonValue(t, "jv"), "!!)"]
                            ]);
                        });
                        if (maybeNull !== null) {
                            var name = _this.nameForUnionMember(u, maybeNull);
                            table.push([
                                [_this.unionMemberJsonValueGuard(maybeNull, "jv.inside")],
                                [" -> ", name, "()"]
                            ]);
                        }
                        table.push([["else"], [" -> throw IllegalArgumentException()"]]);
                        _this.emitTable(table);
                    });
                    _this.emitLine("}");
                });
            }
        });
    };
    KotlinRenderer.prototype.emitSourceStructure = function () {
        var _this = this;
        this.emitHeader();
        if (this._framework === Framework.Klaxon) {
            var hasUnions = this.typeGraph
                .allNamedTypes()
                .some(function (t) { return t instanceof Type_1.UnionType && TypeUtils_1.nullableFromUnion(t) === null; });
            var hasEmptyObjects = this.typeGraph
                .allNamedTypes()
                .some(function (c) { return c instanceof Type_1.ClassType && c.getProperties().isEmpty(); });
            if (hasUnions || this.haveEnums || hasEmptyObjects) {
                this.emitGenericConverter();
            }
            var converters_1 = [];
            if (hasEmptyObjects) {
                converters_1.push([[".convert(JsonObject::class,"], [" { it.obj!! },"], [" { it.toJsonString() })"]]);
            }
            this.forEachEnum("none", function (_, name) {
                converters_1.push([
                    [".convert(", name, "::class,"],
                    [" { ", name, ".fromValue(it.string!!) },"],
                    [' { "\\"${it.value}\\"" })']
                ]);
            });
            this.forEachUnion("none", function (_, name) {
                converters_1.push([
                    [".convert(", name, "::class,"],
                    [" { ", name, ".fromJson(it) },"],
                    [" { it.toJson() }, true)"]
                ]);
            });
            this.ensureBlankLine();
            this.emitLine("private val klaxon = Klaxon()");
            if (converters_1.length > 0) {
                this.indent(function () { return _this.emitTable(converters_1); });
            }
        }
        // Top-level arrays, maps
        this.forEachTopLevel("leading", function (t, name) {
            if (t instanceof Type_1.ArrayType) {
                _this.emitTopLevelArray(t, name);
            }
            else if (t instanceof Type_1.MapType) {
                _this.emitTopLevelMap(t, name);
            }
        });
        this.forEachNamedType("leading-and-interposing", function (c, n) { return _this.emitClassDefinition(c, n); }, function (e, n) { return _this.emitEnumDefinition(e, n); }, function (u, n) { return _this.emitUnionDefinition(u, n); });
    };
    return KotlinRenderer;
}(ConvenienceRenderer_1.ConvenienceRenderer));
