"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var lo = require("lodash");
var lodash_1 = require("lodash");
var TargetLanguage_1 = require("../TargetLanguage");
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Naming_1 = require("../Naming");
var Source_1 = require("../Source");
var Strings_1 = require("../Strings");
var ConvenienceRenderer_1 = require("../ConvenienceRenderer");
var RendererOptions_1 = require("../RendererOptions");
var Support_1 = require("../Support");
var unicode = require("unicode-properties");
var DEBUG = false;
var DEFAULT_CLASS_PREFIX = "QT";
var ObjectiveCTargetLanguage = /** @class */ (function (_super) {
    __extends(ObjectiveCTargetLanguage, _super);
    function ObjectiveCTargetLanguage() {
        var _this = _super.call(this, "Objective-C", ["objc", "objective-c", "objectivec"], "m") || this;
        _this._featuresOption = new RendererOptions_1.EnumOption("features", "Interface and implementation", [
            ["all", { interface: true, implementation: true }],
            ["interface", { interface: true, implementation: false }],
            ["implementation", { interface: false, implementation: true }]
        ]);
        _this._justTypesOption = new RendererOptions_1.BooleanOption("just-types", "Plain types only", false);
        _this._emitMarshallingFunctions = new RendererOptions_1.BooleanOption("functions", "C-style functions", false);
        _this._classPrefixOption = new RendererOptions_1.StringOption("class-prefix", "Class prefix", "PREFIX", DEFAULT_CLASS_PREFIX);
        _this._extraCommentsOption = new RendererOptions_1.BooleanOption("extra-comments", "Extra comments", false);
        return _this;
    }
    ObjectiveCTargetLanguage.prototype.getOptions = function () {
        return [
            this._justTypesOption,
            this._classPrefixOption,
            this._featuresOption,
            this._extraCommentsOption,
            this._emitMarshallingFunctions
        ];
    };
    Object.defineProperty(ObjectiveCTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return ObjectiveCRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return ObjectiveCTargetLanguage;
}(TargetLanguage_1.TargetLanguage));
exports.default = ObjectiveCTargetLanguage;
function typeNameStyle(prefix, original) {
    var words = Strings_1.splitIntoWords(original);
    var result = Strings_1.combineWords(words, legalizeName, Strings_1.firstUpperWordStyle, Strings_1.firstUpperWordStyle, Strings_1.allUpperWordStyle, Strings_1.allUpperWordStyle, "", isStartCharacter);
    return Strings_1.addPrefixIfNecessary(prefix, result);
}
function propertyNameStyle(original, isBool) {
    if (isBool === void 0) { isBool = false; }
    // Objective-C developers are uncomfortable with property "id"
    // so we use an alternate name in this special case.
    if (original === "id") {
        original = "identifier";
    }
    var words = Strings_1.splitIntoWords(original);
    if (isBool) {
        if (words.length === 0) {
            words = [{ word: "flag", isAcronym: false }];
        }
        else if (!words[0].isAcronym && !lodash_1.includes(booleanPrefixes, words[0].word)) {
            words = [{ word: "is", isAcronym: false }].concat(words);
        }
    }
    // Properties cannot even begin with any of the forbidden names
    // For example, properies named new* are treated differently by ARC
    if (words.length > 0 && lodash_1.includes(forbiddenPropertyNames, words[0].word)) {
        words = [{ word: "the", isAcronym: false }].concat(words);
    }
    return Strings_1.combineWords(words, legalizeName, Strings_1.allLowerWordStyle, Strings_1.firstUpperWordStyle, Strings_1.allLowerWordStyle, Strings_1.allUpperWordStyle, "", isStartCharacter);
}
var keywords = [
    /*
    "_Bool",
    "_Complex",
    "_Imaginary",
    */
    "asm",
    "atomic",
    "auto",
    "bool",
    "break",
    "case",
    "char",
    "const",
    "continue",
    "default",
    "do",
    "double",
    "else",
    "enum",
    "extern",
    "false",
    "float",
    "for",
    "goto",
    "if",
    "inline",
    "int",
    "long",
    "nil",
    "nonatomic",
    "register",
    "restrict",
    "retain",
    "return",
    "short",
    "signed",
    "sizeof",
    "static",
    "struct",
    "switch",
    "typedef",
    "typeof",
    "true",
    "union",
    "unsigned",
    "void",
    "volatile",
    "while"
];
var forbiddenPropertyNames = [
    "id",
    "hash",
    "description",
    "init",
    "copy",
    "mutableCopy",
    "superclass",
    "debugDescription",
    "new"
];
var booleanPrefixes = [
    "is",
    "are",
    "were",
    "was",
    "will",
    "all",
    "some",
    "many",
    "has",
    "have",
    "had",
    "does",
    "do",
    "requires",
    "require",
    "needs",
    "need"
];
function isStartCharacter(utf16Unit) {
    return unicode.isAlphabetic(utf16Unit) || utf16Unit === 0x5f; // underscore
}
function isPartCharacter(utf16Unit) {
    var category = unicode.getCategory(utf16Unit);
    return lodash_1.includes(["Nd", "Pc", "Mn", "Mc"], category) || isStartCharacter(utf16Unit);
}
var legalizeName = Strings_1.utf16LegalizeCharacters(isPartCharacter);
function isAnyOrNull(t) {
    return t.kind === "any" || t.kind === "null";
}
var staticEnumValuesIdentifier = "values";
var forbiddenForEnumCases = ["new", staticEnumValuesIdentifier];
function splitExtension(filename) {
    var i = filename.lastIndexOf(".");
    var extension = i !== -1 ? filename.split(".").pop() : "m";
    filename = i !== -1 ? filename.substr(0, i) : filename;
    return [filename, extension === undefined ? "m" : extension];
}
var ObjectiveCRenderer = /** @class */ (function (_super) {
    __extends(ObjectiveCRenderer, _super);
    function ObjectiveCRenderer(targetLanguage, graph, leadingComments, _justTypes, _classPrefix, _features, _extraComments, _marshalingFunctions) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments) || this;
        _this._justTypes = _justTypes;
        _this._classPrefix = _classPrefix;
        _this._features = _features;
        _this._extraComments = _extraComments;
        _this._marshalingFunctions = _marshalingFunctions;
        _this.emitBlock = function (line, f) {
            _this.emitLine(line, " {");
            _this.indent(f);
            _this.emitLine("}");
        };
        _this.emitExtraComments = function () {
            var comments = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                comments[_i] = arguments[_i];
            }
            if (!_this._extraComments)
                return;
            for (var _a = 0, comments_1 = comments; _a < comments_1.length; _a++) {
                var comment = comments_1[_a];
                _this.emitLine("// ", comment);
            }
        };
        _this.objcType = function (t, nullableOrBoxed) {
            if (nullableOrBoxed === void 0) { nullableOrBoxed = false; }
            return TypeUtils_1.matchType(t, function (_anyType) { return ["id", ""]; }, 
            // For now, we're treating nulls just like any
            function (_nullType) { return ["id", ""]; }, function (_boolType) { return (nullableOrBoxed ? ["NSNumber", " *"] : ["BOOL", ""]); }, function (_integerType) { return (nullableOrBoxed ? ["NSNumber", " *"] : ["NSInteger", ""]); }, function (_doubleType) { return (nullableOrBoxed ? ["NSNumber", " *"] : ["double", ""]); }, function (_stringType) { return ["NSString", " *"]; }, function (arrayType) {
                var itemType = arrayType.items;
                var itemTypeName = _this.objcType(itemType, true);
                // NSArray<id>* === NSArray*
                if (isAnyOrNull(itemType)) {
                    return ["NSArray", " *"];
                }
                return [["NSArray<", itemTypeName, ">"], " *"];
            }, function (classType) { return [_this.nameForNamedType(classType), " *"]; }, function (mapType) { return [["NSDictionary<NSString *, ", _this.objcType(mapType.values, true), ">"], " *"]; }, function (enumType) { return [_this.nameForNamedType(enumType), " *"]; }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                return nullable !== null ? _this.objcType(nullable, true) : ["id", ""];
            });
        };
        _this.jsonType = function (t) {
            return TypeUtils_1.matchType(t, function (_anyType) { return ["id", ""]; }, 
            // For now, we're treating nulls just like any
            function (_nullType) { return ["id", ""]; }, function (_boolType) { return ["NSNumber", " *"]; }, function (_integerType) { return ["NSNumber", " *"]; }, function (_doubleType) { return ["NSNumber", " *"]; }, function (_stringType) { return ["NSString", " *"]; }, function (_arrayType) { return ["NSArray", " *"]; }, function (_classType) { return ["NSDictionary<NSString *, id>", " *"]; }, function (mapType) { return [["NSDictionary<NSString *, ", _this.jsonType(mapType.values), ">"], " *"]; }, function (_enumType) { return ["NSString", " *"]; }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                return nullable !== null ? _this.jsonType(nullable) : ["id", ""];
            });
        };
        _this.fromDynamicExpression = function (t) {
            var dynamic = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                dynamic[_i - 1] = arguments[_i];
            }
            return TypeUtils_1.matchType(t, function (_anyType) { return dynamic; }, function (_nullType) { return dynamic; }, function (_boolType) { return dynamic; }, function (_integerType) { return dynamic; }, function (_doubleType) { return dynamic; }, function (_stringType) { return dynamic; }, function (arrayType) { return ["map(", dynamic, ", λ(id x, ", _this.fromDynamicExpression(arrayType.items, "x"), "))"]; }, function (classType) { return ["[", _this.nameForNamedType(classType), " fromJSONDictionary:", dynamic, "]"]; }, function (mapType) { return ["map(", dynamic, ", λ(id x, ", _this.fromDynamicExpression(mapType.values, "x"), "))"]; }, function (enumType) { return ["[", _this.nameForNamedType(enumType), " withValue:", dynamic, "]"]; }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                return nullable !== null ? _this.fromDynamicExpression(nullable, dynamic) : dynamic;
            });
        };
        _this.toDynamicExpression = function (t, typed) {
            return TypeUtils_1.matchType(t, function (_anyType) { return ["NSNullify(", typed, ")"]; }, function (_nullType) { return ["NSNullify(", typed, ")"]; }, 
            // Sadly, KVC
            function (_boolType) { return [typed, " ? @YES : @NO"]; }, function (_integerType) { return typed; }, function (_doubleType) { return typed; }, function (_stringType) { return typed; }, function (arrayType) {
                if (_this.implicitlyConvertsFromJSON(arrayType)) {
                    // TODO check each value type
                    return typed;
                }
                return ["map(", typed, ", λ(id x, ", _this.toDynamicExpression(arrayType.items, "x"), "))"];
            }, function (_classType) { return ["[", typed, " JSONDictionary]"]; }, function (mapType) {
                if (_this.implicitlyConvertsFromJSON(mapType)) {
                    // TODO check each value type
                    return typed;
                }
                return ["map(", typed, ", λ(id x, ", _this.toDynamicExpression(mapType.values, "x"), "))"];
            }, function (_enumType) { return ["[", typed, " value]"]; }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                if (nullable !== null) {
                    if (_this.implicitlyConvertsFromJSON(nullable)) {
                        return ["NSNullify(", typed, ")"];
                    }
                    else {
                        return ["NSNullify(", _this.toDynamicExpression(nullable, typed), ")"];
                    }
                }
                else {
                    // TODO support unions
                    return typed;
                }
            });
        };
        _this.emitPropertyAssignment = function (propertyName, jsonName, propertyType) {
            var name = ["_", propertyName];
            TypeUtils_1.matchType(propertyType, function (anyType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(anyType, name), ";"); }, function (nullType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(nullType, name), ";"); }, function (boolType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(boolType, name), ";"); }, function (integerType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(integerType, name), ";"); }, function (doubleType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(doubleType, name), ";"); }, function (stringType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(stringType, name), ";"); }, function (arrayType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(arrayType, name), ";"); }, function (classType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(classType, ["(id)", name]), ";"); }, function (mapType) {
                var itemType = mapType.values;
                _this.emitLine(name, " = map(", name, ", ", ["λ(id x, ", _this.fromDynamicExpression(itemType, "x"), ")"], ");");
            }, function (enumType) { return _this.emitLine(name, " = ", _this.fromDynamicExpression(enumType, ["(id)", name]), ";"); }, function (unionType) {
                var nullable = TypeUtils_1.nullableFromUnion(unionType);
                if (nullable !== null) {
                    _this.emitPropertyAssignment(propertyName, jsonName, nullable);
                }
                else {
                    // TODO This is a union, but for now we just leave it dynamic
                    _this.emitLine(name, " = ", _this.fromDynamicExpression(unionType, name), ";");
                }
            });
        };
        _this.emitPrivateClassInterface = function (_, name) {
            _this.emitLine("@interface ", name, " (JSONConversion)");
            _this.emitLine("+ (instancetype)fromJSONDictionary:(NSDictionary *)dict;");
            _this.emitLine("- (NSDictionary *)JSONDictionary;");
            _this.emitLine("@end");
        };
        _this.emitClassInterface = function (t, className) {
            var isTopLevel = _this.topLevels.valueSeq().contains(t);
            _this.emitDescription(_this.descriptionForType(t));
            _this.emitLine("@interface ", className, " : NSObject");
            if (DEBUG)
                _this.emitLine("@property NSDictionary<NSString *, id> *_json;");
            _this.emitPropertyTable(t, function (name, _json, property) {
                var attributes = ["nonatomic"];
                // TODO offer a 'readonly' option
                // TODO We must add "copy" if it's NSCopy, otherwise "strong"
                if (property.type.isNullable) {
                    attributes.push("nullable");
                }
                attributes.push(_this.memoryAttribute(property.type, property.type.isNullable));
                return [
                    ["@property ", ["(", attributes.join(", "), ")"], " "],
                    [_this.pointerAwareTypeName(property.type), name, ";"]
                ];
            });
            if (!_this._justTypes && isTopLevel) {
                if (!t.getProperties().isEmpty())
                    _this.ensureBlankLine();
                _this.emitLine("+ (_Nullable instancetype)fromJSON:(NSString *)json encoding:(NSStringEncoding)encoding error:(NSError *_Nullable *)error;");
                _this.emitLine("+ (_Nullable instancetype)fromData:(NSData *)data error:(NSError *_Nullable *)error;");
                _this.emitLine("- (NSString *_Nullable)toJSON:(NSStringEncoding)encoding error:(NSError *_Nullable *)error;");
                _this.emitLine("- (NSData *_Nullable)toData:(NSError *_Nullable *)error;");
            }
            _this.emitLine("@end");
        };
        // TODO Implement NSCopying
        _this.emitClassImplementation = function (t, className) {
            var isTopLevel = _this.topLevels.valueSeq().contains(t);
            var _a = (function () {
                var irregular = false;
                var unsafe = false;
                _this.forEachClassProperty(t, "none", function (name, jsonName, property) {
                    unsafe = unsafe || !_this.implicitlyConvertsToJSON(property.type);
                    irregular = irregular || Strings_1.stringEscape(jsonName) !== _this.sourcelikeToString(name);
                });
                return [irregular, unsafe];
            })(), hasIrregularProperties = _a[0], hasUnsafeProperties = _a[1];
            _this.emitLine("@implementation ", className);
            if (!_this._justTypes) {
                _this.emitMethod("+ (NSDictionary<NSString *, NSString *> *)properties", function () {
                    _this.emitLine("static NSDictionary<NSString *, NSString *> *properties;");
                    _this.emitLine("return properties = properties ? properties : @{");
                    _this.indent(function () {
                        _this.forEachClassProperty(t, "none", function (name, jsonName) {
                            return _this.emitLine("@\"" + Strings_1.stringEscape(jsonName) + "\": @\"", name, "\",");
                        });
                    });
                    _this.emitLine("};");
                });
                _this.ensureBlankLine();
                if (isTopLevel) {
                    _this.emitMethod("+ (_Nullable instancetype)fromData:(NSData *)data error:(NSError *_Nullable *)error", function () {
                        _this.emitLine("return ", className, "FromData(data, error);");
                    });
                    _this.ensureBlankLine();
                    _this.emitMethod("+ (_Nullable instancetype)fromJSON:(NSString *)json encoding:(NSStringEncoding)encoding error:(NSError *_Nullable *)error", function () {
                        _this.emitLine("return ", className, "FromJSON(json, encoding, error);");
                    });
                    _this.ensureBlankLine();
                }
                _this.emitMethod("+ (instancetype)fromJSONDictionary:(NSDictionary *)dict", function () {
                    _this.emitLine("return dict ? [[", className, " alloc] initWithJSONDictionary:dict] : nil;");
                });
                _this.ensureBlankLine();
                _this.emitMethod("- (instancetype)initWithJSONDictionary:(NSDictionary *)dict", function () {
                    _this.emitBlock("if (self = [super init])", function () {
                        if (DEBUG)
                            _this.emitLine("__json = dict;");
                        _this.emitLine("[self setValuesForKeysWithDictionary:dict];");
                        _this.forEachClassProperty(t, "none", function (name, jsonName, property) {
                            if (!_this.implicitlyConvertsFromJSON(property.type)) {
                                _this.emitPropertyAssignment(name, jsonName, property.type);
                            }
                        });
                    });
                    _this.emitLine("return self;");
                });
                if (hasIrregularProperties) {
                    _this.ensureBlankLine();
                    _this.emitMethod("- (void)setValue:(nullable id)value forKey:(NSString *)key", function () {
                        _this.emitLine("[super setValue:value forKey:", className, ".properties[key]];");
                    });
                }
                _this.ensureBlankLine();
                _this.emitMethod("- (NSDictionary *)JSONDictionary", function () {
                    if (!hasIrregularProperties && !hasUnsafeProperties) {
                        _this.emitLine("return [self dictionaryWithValuesForKeys:", className, ".properties.allValues];");
                        return;
                    }
                    _this.emitLine("id dict = [[self dictionaryWithValuesForKeys:", className, ".properties.allValues] mutableCopy];");
                    _this.ensureBlankLine();
                    if (hasIrregularProperties) {
                        _this.emitExtraComments("Rewrite property names that differ in JSON");
                        _this.emitBlock(["for (id jsonName in ", className, ".properties)"], function () {
                            _this.emitLine("id propertyName = ", className, ".properties[jsonName];");
                            _this.emitBlock("if (![jsonName isEqualToString:propertyName])", function () {
                                _this.emitLine("dict[jsonName] = dict[propertyName];");
                                _this.emitLine("[dict removeObjectForKey:propertyName];");
                            });
                        });
                    }
                    if (hasUnsafeProperties) {
                        _this.ensureBlankLine();
                        _this.emitExtraComments("Map values that need translation");
                        _this.emitLine("[dict addEntriesFromDictionary:@{");
                        _this.indent(function () {
                            _this.forEachClassProperty(t, "none", function (propertyName, jsonKey, property) {
                                if (!_this.implicitlyConvertsToJSON(property.type)) {
                                    var key = Strings_1.stringEscape(jsonKey);
                                    var name = ["_", propertyName];
                                    _this.emitLine('@"', key, '": ', _this.toDynamicExpression(property.type, name), ",");
                                }
                            });
                        });
                        _this.emitLine("}];");
                    }
                    _this.ensureBlankLine();
                    _this.emitLine("return dict;");
                });
                if (isTopLevel) {
                    _this.ensureBlankLine();
                    _this.emitMethod("- (NSData *_Nullable)toData:(NSError *_Nullable *)error", function () {
                        _this.emitLine("return ", className, "ToData(self, error);");
                    });
                    _this.ensureBlankLine();
                    _this.emitMethod("- (NSString *_Nullable)toJSON:(NSStringEncoding)encoding error:(NSError *_Nullable *)error", function () {
                        _this.emitLine("return ", className, "ToJSON(self, encoding, error);");
                    });
                }
            }
            _this.emitLine("@end");
        };
        _this.emitMark = function (label) {
            _this.ensureBlankLine();
            _this.emitLine("#pragma mark - " + label);
            _this.ensureBlankLine();
        };
        _this.emitMapFunction = function () {
            if (_this.needsMap) {
                _this.emitMultiline("static id map(id collection, id (^f)(id value)) {\n    id result = nil;\n    if ([collection isKindOfClass:NSArray.class]) {\n        result = [NSMutableArray arrayWithCapacity:[collection count]];\n        for (id x in collection) [result addObject:f(x)];\n    } else if ([collection isKindOfClass:NSDictionary.class]) {\n        result = [NSMutableDictionary dictionaryWithCapacity:[collection count]];\n        for (id key in collection) [result setObject:f([collection objectForKey:key]) forKey:key];\n    }\n    return result;\n}");
            }
        };
        // Infer the class prefix from a top-level name if it's not given
        if (_this._classPrefix === DEFAULT_CLASS_PREFIX) {
            var aTopLevel = Support_1.defined(_this.topLevels.keySeq().first());
            _this._classPrefix = _this.inferClassPrefix(aTopLevel);
        }
        return _this;
    }
    ObjectiveCRenderer.prototype.inferClassPrefix = function (name) {
        var caps = lo.initial(lo.takeWhile(name, function (s) { return s === s.toLocaleUpperCase(); })).join("");
        return caps.length === 0 ? DEFAULT_CLASS_PREFIX : caps;
    };
    ObjectiveCRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        return keywords;
    };
    ObjectiveCRenderer.prototype.forbiddenForObjectProperties = function (_c, _className) {
        return { names: forbiddenPropertyNames, includeGlobalForbidden: true };
    };
    ObjectiveCRenderer.prototype.forbiddenForEnumCases = function (_e, _enumName) {
        return { names: forbiddenForEnumCases, includeGlobalForbidden: true };
    };
    ObjectiveCRenderer.prototype.makeNamedTypeNamer = function () {
        var _this = this;
        return Naming_1.funPrefixNamer("types", function (rawName) { return typeNameStyle(_this._classPrefix, rawName); });
    };
    ObjectiveCRenderer.prototype.namerForObjectProperty = function (_, p) {
        // TODO why is underscore being removed?
        return new Naming_1.Namer("properties", function (s) { return propertyNameStyle(s, p.type.kind === "bool"); }, [
            "_",
            "the",
            "one",
            "some",
            "another"
        ]);
    };
    ObjectiveCRenderer.prototype.makeUnionMemberNamer = function () {
        return null;
    };
    ObjectiveCRenderer.prototype.makeEnumCaseNamer = function () {
        return new Naming_1.Namer("enum-cases", propertyNameStyle, []);
    };
    ObjectiveCRenderer.prototype.namedTypeToNameForTopLevel = function (type) {
        return type;
    };
    ObjectiveCRenderer.prototype.emitDescriptionBlock = function (lines) {
        this.emitCommentLines(lines, "/// ");
    };
    ObjectiveCRenderer.prototype.emitMethod = function (declaration, f) {
        this.emitLine(declaration);
        this.emitLine("{");
        this.indent(f);
        this.emitLine("}");
    };
    ObjectiveCRenderer.prototype.startFile = function (basename, extension) {
        Support_1.assert(this._currentFilename === undefined, "Previous file wasn't finished");
        // FIXME: The filenames should actually be Sourcelikes, too
        this._currentFilename = this.sourcelikeToString(basename) + "." + extension;
    };
    ObjectiveCRenderer.prototype.finishFile = function () {
        _super.prototype.finishFile.call(this, Support_1.defined(this._currentFilename));
        this._currentFilename = undefined;
    };
    ObjectiveCRenderer.prototype.memoryAttribute = function (t, isNullable) {
        var _this = this;
        return TypeUtils_1.matchType(t, function (_anyType) { return "copy"; }, function (_nullType) { return "copy"; }, function (_boolType) { return (isNullable ? "strong" : "assign"); }, function (_integerType) { return (isNullable ? "strong" : "assign"); }, function (_doubleType) { return (isNullable ? "strong" : "assign"); }, function (_stringType) { return "copy"; }, function (_arrayType) { return "copy"; }, function (_classType) { return "strong"; }, function (_mapType) { return "copy"; }, function (_enumType) { return "assign"; }, function (unionType) {
            var nullable = TypeUtils_1.nullableFromUnion(unionType);
            return nullable !== null ? _this.memoryAttribute(nullable, true) : "copy";
        });
    };
    ObjectiveCRenderer.prototype.implicitlyConvertsFromJSON = function (t) {
        if (t instanceof Type_1.ClassType) {
            return false;
        }
        else if (t instanceof Type_1.EnumType) {
            return false;
        }
        else if (t instanceof Type_1.ArrayType) {
            return this.implicitlyConvertsFromJSON(t.items);
        }
        else if (t instanceof Type_1.MapType) {
            return this.implicitlyConvertsFromJSON(t.values);
        }
        else if (t.isPrimitive()) {
            return true;
        }
        else if (t instanceof Type_1.UnionType) {
            var nullable = TypeUtils_1.nullableFromUnion(t);
            if (nullable !== null) {
                return this.implicitlyConvertsFromJSON(nullable);
            }
            else {
                // We don't support unions yet, so this is just untyped
                return true;
            }
        }
        else {
            return false;
        }
    };
    ObjectiveCRenderer.prototype.implicitlyConvertsToJSON = function (t) {
        return this.implicitlyConvertsFromJSON(t) && "bool" !== t.kind;
    };
    ObjectiveCRenderer.prototype.pointerAwareTypeName = function (t) {
        var name = t instanceof Type_1.Type ? this.objcType(t) : t;
        var isPointer = name[1] !== "";
        return isPointer ? name : [name, " "];
    };
    ObjectiveCRenderer.prototype.emitNonClassTopLevelTypedef = function (t, name) {
        var nonPointerTypeName = this.objcType(t)[0];
        this.emitLine("typedef ", nonPointerTypeName, " ", name, ";");
    };
    ObjectiveCRenderer.prototype.topLevelFromDataPrototype = function (name) {
        return [name, " *_Nullable ", name, "FromData(NSData *data, NSError **error)"];
    };
    ObjectiveCRenderer.prototype.topLevelFromJSONPrototype = function (name) {
        return [name, " *_Nullable ", name, "FromJSON(NSString *json, NSStringEncoding encoding, NSError **error)"];
    };
    ObjectiveCRenderer.prototype.topLevelToDataPrototype = function (name, pad) {
        if (pad === void 0) { pad = false; }
        var parameter = this.variableNameForTopLevel(name);
        var padding = pad ? lodash_1.repeat(" ", this.sourcelikeToString(name).length - "NSData".length) : "";
        return ["NSData", padding, " *_Nullable ", name, "ToData(", name, " *", parameter, ", NSError **error)"];
    };
    ObjectiveCRenderer.prototype.topLevelToJSONPrototype = function (name, pad) {
        if (pad === void 0) { pad = false; }
        var parameter = this.variableNameForTopLevel(name);
        var padding = pad ? lodash_1.repeat(" ", this.sourcelikeToString(name).length - "NSString".length) : "";
        return [
            "NSString",
            padding,
            " *_Nullable ",
            name,
            "ToJSON(",
            name,
            " *",
            parameter,
            ", NSStringEncoding encoding, NSError **error)"
        ];
    };
    ObjectiveCRenderer.prototype.emitTopLevelFunctionDeclarations = function (_, name) {
        this.emitLine(this.topLevelFromDataPrototype(name), ";");
        this.emitLine(this.topLevelFromJSONPrototype(name), ";");
        this.emitLine(this.topLevelToDataPrototype(name, true), ";");
        this.emitLine(this.topLevelToJSONPrototype(name, true), ";");
    };
    ObjectiveCRenderer.prototype.emitTryCatchAsError = function (inTry, inCatch) {
        var _this = this;
        this.emitLine("@try {");
        this.indent(inTry);
        this.emitLine("} @catch (NSException *exception) {");
        this.indent(function () {
            _this.emitLine("*error = [NSError errorWithDomain:@\"JSONSerialization\" code:-1 userInfo:@{ @\"exception\": exception }];");
            inCatch();
        });
        this.emitLine("}");
    };
    ObjectiveCRenderer.prototype.emitTopLevelFunctions = function (t, name) {
        var _this = this;
        var parameter = this.variableNameForTopLevel(name);
        this.ensureBlankLine();
        this.emitMethod(this.topLevelFromDataPrototype(name), function () {
            _this.emitTryCatchAsError(function () {
                _this.emitLine("id json = [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingAllowFragments error:error];");
                _this.emitLine("return *error ? nil : ", _this.fromDynamicExpression(t, "json"), ";");
            }, function () { return _this.emitLine("return nil;"); });
        });
        this.ensureBlankLine();
        this.emitMethod(this.topLevelFromJSONPrototype(name), function () {
            _this.emitLine("return ", name, "FromData([json dataUsingEncoding:encoding], error);");
        });
        this.ensureBlankLine();
        this.emitMethod(this.topLevelToDataPrototype(name), function () {
            _this.emitTryCatchAsError(function () {
                _this.emitLine("id json = ", _this.toDynamicExpression(t, parameter), ";");
                _this.emitLine("NSData *data = [NSJSONSerialization dataWithJSONObject:json options:kNilOptions error:error];");
                _this.emitLine("return *error ? nil : data;");
            }, function () { return _this.emitLine("return nil;"); });
        });
        this.ensureBlankLine();
        this.emitMethod(this.topLevelToJSONPrototype(name), function () {
            _this.emitLine("NSData *data = ", name, "ToData(", parameter, ", error);");
            _this.emitLine("return data ? [[NSString alloc] initWithData:data encoding:encoding] : nil;");
        });
    };
    ObjectiveCRenderer.prototype.variableNameForTopLevel = function (name) {
        var _this = this;
        var camelCaseName = Source_1.modifySource(function (serialized) {
            // 1. remove class prefix
            serialized = serialized.substr(_this._classPrefix.length);
            // 2. camel case
            return Strings_1.camelCase(serialized);
        }, name);
        return camelCaseName;
    };
    ObjectiveCRenderer.prototype.emitPseudoEnumInterface = function (enumType, enumName) {
        var _this = this;
        this.emitDescription(this.descriptionForType(enumType));
        this.emitLine("@interface ", enumName, " : NSObject");
        this.emitLine("@property (nonatomic, readonly, copy) NSString *value;");
        this.emitLine("+ (instancetype _Nullable)withValue:(NSString *)value;");
        this.forEachEnumCase(enumType, "none", function (name, _) {
            _this.emitLine("+ (", enumName, " *)", name, ";");
        });
        this.emitLine("@end");
    };
    ObjectiveCRenderer.prototype.emitPseudoEnumImplementation = function (enumType, enumName) {
        var _this = this;
        this.emitLine("@implementation ", enumName);
        var instances = [enumName, ".", staticEnumValuesIdentifier];
        this.emitMethod(["+ (NSDictionary<NSString *, ", enumName, " *> *)", staticEnumValuesIdentifier], function () {
            _this.emitLine("static NSDictionary<NSString *, ", enumName, " *> *", staticEnumValuesIdentifier, ";");
            _this.emitLine("return ", staticEnumValuesIdentifier, " = ", staticEnumValuesIdentifier, " ? ", staticEnumValuesIdentifier, " : @{");
            _this.indent(function () {
                _this.forEachEnumCase(enumType, "none", function (_, jsonValue) {
                    var value = ['@"', Strings_1.stringEscape(jsonValue), '"'];
                    _this.emitLine(value, ": [[", enumName, " alloc] initWithValue:", value, "],");
                });
            });
            _this.emitLine("};");
        });
        this.ensureBlankLine();
        this.forEachEnumCase(enumType, "none", function (name, jsonValue) {
            _this.emitLine("+ (", enumName, " *)", name, " { return ", instances, '[@"', Strings_1.stringEscape(jsonValue), '"]; }');
        });
        this.ensureBlankLine();
        this.emitMethod("+ (instancetype _Nullable)withValue:(NSString *)value", function () {
            return _this.emitLine("return ", instances, "[value];");
        });
        this.ensureBlankLine();
        this.emitMethod("- (instancetype)initWithValue:(NSString *)value", function () {
            _this.emitLine("if (self = [super init]) _value = value;");
            _this.emitLine("return self;");
        });
        this.ensureBlankLine();
        this.emitLine("- (NSUInteger)hash { return _value.hash; }");
        this.emitLine("@end");
    };
    ObjectiveCRenderer.prototype.emitSourceStructure = function (proposedFilename) {
        var _this = this;
        var fileMode = proposedFilename !== "stdout";
        if (!fileMode) {
            // We don't have a filename, so we use a top-level name
            proposedFilename = this.sourcelikeToString(this.nameForNamedType(Support_1.defined(this.topLevels.first()))) + ".m";
        }
        var _a = splitExtension(proposedFilename), filename = _a[0], extension = _a[1];
        if (this._features.interface) {
            this.startFile(filename, "h");
            if (this.leadingComments !== undefined) {
                this.emitCommentLines(this.leadingComments);
            }
            else if (!this._justTypes) {
                this.emitCommentLines(["To parse this JSON:", ""]);
                this.emitLine("//   NSError *error;");
                this.forEachTopLevel("none", function (t, topLevelName) {
                    var fromJsonExpression = t instanceof Type_1.ClassType
                        ? ["[", topLevelName, " fromJSON:json encoding:NSUTF8Encoding error:&error];"]
                        : [topLevelName, "FromJSON(json, NSUTF8Encoding, &error);"];
                    _this.emitLine("//   ", topLevelName, " *", _this.variableNameForTopLevel(topLevelName), " = ", fromJsonExpression);
                });
            }
            this.ensureBlankLine();
            this.emitLine("#import <Foundation/Foundation.h>");
            this.ensureBlankLine();
            // Emit @class declarations for top-level array+maps and classes
            this.forEachNamedType("none", function (_, className) { return _this.emitLine("@class ", className, ";"); }, function (_, enumName) { return _this.emitLine("@class ", enumName, ";"); }, function () { return null; });
            this.ensureBlankLine();
            this.ensureBlankLine();
            this.emitLine("NS_ASSUME_NONNULL_BEGIN");
            this.ensureBlankLine();
            if (this.haveEnums) {
                this.emitMark("Boxed enums");
                this.forEachEnum("leading-and-interposing", function (t, n) { return _this.emitPseudoEnumInterface(t, n); });
            }
            // Emit interfaces for top-level array+maps and classes
            this.forEachTopLevel("leading-and-interposing", function (t, n) { return _this.emitNonClassTopLevelTypedef(t, n); }, function (t) { return !(t instanceof Type_1.ClassType); });
            var hasTopLevelNonClassTypes = this.topLevels.some(function (t) { return !(t instanceof Type_1.ClassType); });
            if (!this._justTypes && (hasTopLevelNonClassTypes || this._marshalingFunctions)) {
                this.ensureBlankLine();
                this.emitMark("Top-level marshaling functions");
                this.forEachTopLevel("leading-and-interposing", function (t, n) { return _this.emitTopLevelFunctionDeclarations(t, n); }, 
                // Objective-C developers get freaked out by C functions, so we don't
                // declare them for top-level object types (we always need them for non-object types)
                function (t) { return _this._marshalingFunctions || !(t instanceof Type_1.ClassType); });
            }
            this.emitMark("Object interfaces");
            this.forEachNamedType("leading-and-interposing", this.emitClassInterface, function () { return null; }, function () { return null; });
            this.ensureBlankLine();
            this.emitLine("NS_ASSUME_NONNULL_END");
            this.finishFile();
        }
        if (this._features.implementation) {
            this.startFile(filename, extension);
            this.emitLine("#import \"" + filename + ".h\"");
            this.ensureBlankLine();
            if (!this._justTypes) {
                this.ensureBlankLine();
                this.emitExtraComments("Shorthand for simple blocks");
                this.emitLine("#define \u03BB(decl, expr) (^(decl) { return (expr); })");
                this.ensureBlankLine();
                this.emitExtraComments("nil → NSNull conversion for JSON dictionaries");
                this.emitBlock("static id NSNullify(id _Nullable x)", function () {
                    return _this.emitLine("return (x == nil || x == NSNull.null) ? NSNull.null : x;");
                });
                this.ensureBlankLine();
                this.emitLine("NS_ASSUME_NONNULL_BEGIN");
                this.ensureBlankLine();
                // We wouldn't need to emit these private iterfaces if we emitted implementations in forward-order
                // but the code is more readable and explicit if we do this.
                if (this._extraComments) {
                    this.emitMark("Private model interfaces");
                }
                this.forEachNamedType("leading-and-interposing", this.emitPrivateClassInterface, function () { return null; }, function () { return null; });
                if (this.haveEnums) {
                    if (this._extraComments) {
                        this.ensureBlankLine();
                        this.emitExtraComments("These enum-like reference types are needed so that enum", "values can be contained by NSArray and NSDictionary.");
                        this.ensureBlankLine();
                    }
                    this.forEachEnum("leading-and-interposing", function (t, n) { return _this.emitPseudoEnumImplementation(t, n); });
                }
                this.ensureBlankLine();
                this.emitMapFunction();
                this.ensureBlankLine();
                this.emitMark("JSON serialization");
                this.forEachTopLevel("leading-and-interposing", function (t, n) { return _this.emitTopLevelFunctions(t, n); });
            }
            this.forEachNamedType("leading-and-interposing", this.emitClassImplementation, function () { return null; }, function () { return null; });
            if (!this._justTypes) {
                this.ensureBlankLine();
                this.emitLine("NS_ASSUME_NONNULL_END");
            }
            this.finishFile();
        }
    };
    Object.defineProperty(ObjectiveCRenderer.prototype, "needsMap", {
        get: function () {
            // TODO this isn't complete (needs union support, for example)
            function needsMap(t) {
                return (t instanceof Type_1.MapType ||
                    t instanceof Type_1.ArrayType ||
                    (t instanceof Type_1.ClassType && t.getProperties().some(function (p) { return needsMap(p.type); })));
            }
            return this.typeGraph.allTypesUnordered().some(needsMap);
        },
        enumerable: true,
        configurable: true
    });
    return ObjectiveCRenderer;
}(ConvenienceRenderer_1.ConvenienceRenderer));
exports.ObjectiveCRenderer = ObjectiveCRenderer;
