"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var Type_1 = require("../Type");
var TypeUtils_1 = require("../TypeUtils");
var Source_1 = require("../Source");
var Strings_1 = require("../Strings");
var Naming_1 = require("../Naming");
var ConvenienceRenderer_1 = require("../ConvenienceRenderer");
var TargetLanguage_1 = require("../TargetLanguage");
var RendererOptions_1 = require("../RendererOptions");
var Annotation_1 = require("../Annotation");
var Support_1 = require("../Support");
var JavaTargetLanguage = /** @class */ (function (_super) {
    __extends(JavaTargetLanguage, _super);
    function JavaTargetLanguage() {
        var _this = _super.call(this, "Java", ["java"], "java") || this;
        _this._justTypesOption = new RendererOptions_1.BooleanOption("just-types", "Plain types only", false);
        // FIXME: Do this via a configurable named eventually.
        _this._packageOption = new RendererOptions_1.StringOption("package", "Generated package name", "NAME", "io.quicktype");
        return _this;
    }
    JavaTargetLanguage.prototype.getOptions = function () {
        return [this._packageOption, this._justTypesOption];
    };
    Object.defineProperty(JavaTargetLanguage.prototype, "supportsUnionsWithBothNumberTypes", {
        get: function () {
            return true;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JavaTargetLanguage.prototype, "rendererClass", {
        get: function () {
            return JavaRenderer;
        },
        enumerable: true,
        configurable: true
    });
    return JavaTargetLanguage;
}(TargetLanguage_1.TargetLanguage));
exports.JavaTargetLanguage = JavaTargetLanguage;
var keywords = [
    "Object",
    "Class",
    "System",
    "Long",
    "Double",
    "Boolean",
    "String",
    "Map",
    "Exception",
    "IOException",
    "JsonProperty",
    "JsonDeserialize",
    "JsonDeserializer",
    "JsonSerialize",
    "JsonSerializer",
    "JsonParser",
    "JsonProcessingException",
    "DeserializationContext",
    "SerializerProvider",
    "Converter",
    "Override",
    "abstract",
    "continue",
    "for",
    "new",
    "switch",
    "assert",
    "default",
    "goto",
    "package",
    "synchronized",
    "boolean",
    "do",
    "if",
    "private",
    "this",
    "break",
    "double",
    "implements",
    "protected",
    "throw",
    "byte",
    "else",
    "import",
    "public",
    "throws",
    "case",
    "enum",
    "instanceof",
    "return",
    "transient",
    "catch",
    "extends",
    "int",
    "short",
    "try",
    "char",
    "final",
    "interface",
    "static",
    "void",
    "class",
    "finally",
    "long",
    "strictfp",
    "volatile",
    "const",
    "float",
    "native",
    "super",
    "while",
    "null",
    "false",
    "true"
];
var typeNamingFunction = Naming_1.funPrefixNamer("types", function (n) { return javaNameStyle(true, false, n); });
var propertyNamingFunction = Naming_1.funPrefixNamer("properties", function (n) { return javaNameStyle(false, false, n); });
var enumCaseNamingFunction = Naming_1.funPrefixNamer("enum-cases", function (n) { return javaNameStyle(true, true, n); });
exports.stringEscape = Strings_1.utf16ConcatMap(Strings_1.escapeNonPrintableMapper(Strings_1.isAscii, Strings_1.standardUnicodeHexEscape));
function isStartCharacter(codePoint) {
    if (codePoint === 0x5f)
        return true; // underscore
    return Strings_1.isAscii(codePoint) && Strings_1.isLetter(codePoint);
}
function isPartCharacter(codePoint) {
    return isStartCharacter(codePoint) || (Strings_1.isAscii(codePoint) && Strings_1.isDigit(codePoint));
}
var legalizeName = Strings_1.utf16LegalizeCharacters(isPartCharacter);
// FIXME: Handle acronyms consistently.  In particular, that means that
// we have to use namers to produce the getter and setter names - we can't
// just capitalize and concatenate.
// https://stackoverflow.com/questions/8277355/naming-convention-for-upper-case-abbreviations
function javaNameStyle(startWithUpper, upperUnderscore, original) {
    var words = Strings_1.splitIntoWords(original);
    return Strings_1.combineWords(words, legalizeName, upperUnderscore ? Strings_1.allUpperWordStyle : startWithUpper ? Strings_1.firstUpperWordStyle : Strings_1.allLowerWordStyle, upperUnderscore ? Strings_1.allUpperWordStyle : Strings_1.firstUpperWordStyle, upperUnderscore || startWithUpper ? Strings_1.allUpperWordStyle : Strings_1.allLowerWordStyle, Strings_1.allUpperWordStyle, upperUnderscore ? "_" : "", isStartCharacter);
}
var JavaRenderer = /** @class */ (function (_super) {
    __extends(JavaRenderer, _super);
    function JavaRenderer(targetLanguage, graph, leadingComments, _packageName, _justTypes) {
        var _this = _super.call(this, targetLanguage, graph, leadingComments) || this;
        _this._packageName = _packageName;
        _this._justTypes = _justTypes;
        _this._gettersAndSettersForPropertyName = immutable_1.Map();
        return _this;
    }
    JavaRenderer.prototype.forbiddenNamesForGlobalNamespace = function () {
        return keywords;
    };
    JavaRenderer.prototype.forbiddenForObjectProperties = function (_c, _className) {
        return { names: [], includeGlobalForbidden: true };
    };
    JavaRenderer.prototype.makeNamedTypeNamer = function () {
        return typeNamingFunction;
    };
    JavaRenderer.prototype.namerForObjectProperty = function () {
        return propertyNamingFunction;
    };
    JavaRenderer.prototype.makeUnionMemberNamer = function () {
        return propertyNamingFunction;
    };
    JavaRenderer.prototype.makeEnumCaseNamer = function () {
        return enumCaseNamingFunction;
    };
    JavaRenderer.prototype.unionNeedsName = function (u) {
        return TypeUtils_1.nullableFromUnion(u) === null;
    };
    JavaRenderer.prototype.namedTypeToNameForTopLevel = function (type) {
        // If the top-level type doesn't contain any classes or unions
        // we have to define a class just for the `FromJson` method, in
        // emitFromJsonForTopLevel.
        return TypeUtils_1.directlyReachableSingleNamedType(type);
    };
    JavaRenderer.prototype.makeNamesForPropertyGetterAndSetter = function (_c, _className, _p, _jsonName, name) {
        var getterName = new Naming_1.DependencyName(propertyNamingFunction, name.order, function (lookup) { return "get_" + lookup(name); });
        var setterName = new Naming_1.DependencyName(propertyNamingFunction, name.order, function (lookup) { return "set_" + lookup(name); });
        return [getterName, setterName];
    };
    JavaRenderer.prototype.makePropertyDependencyNames = function (c, className, p, jsonName, name) {
        var getterAndSetterNames = this.makeNamesForPropertyGetterAndSetter(c, className, p, jsonName, name);
        this._gettersAndSettersForPropertyName = this._gettersAndSettersForPropertyName.set(name, getterAndSetterNames);
        return getterAndSetterNames;
    };
    JavaRenderer.prototype.fieldOrMethodName = function (methodName, topLevelName) {
        if (this.topLevels.size === 1) {
            return methodName;
        }
        return [topLevelName, Strings_1.capitalize(methodName)];
    };
    JavaRenderer.prototype.methodName = function (prefix, suffix, topLevelName) {
        if (this.topLevels.size === 1) {
            return [prefix, suffix];
        }
        return [prefix, topLevelName, suffix];
    };
    JavaRenderer.prototype.decoderName = function (topLevelName) {
        return this.fieldOrMethodName("fromJsonString", topLevelName);
    };
    JavaRenderer.prototype.encoderName = function (topLevelName) {
        return this.fieldOrMethodName("toJsonString", topLevelName);
    };
    JavaRenderer.prototype.readerGetterName = function (topLevelName) {
        return this.methodName("get", "ObjectReader", topLevelName);
    };
    JavaRenderer.prototype.writerGetterName = function (topLevelName) {
        return this.methodName("get", "ObjectWriter", topLevelName);
    };
    JavaRenderer.prototype.startFile = function (basename) {
        Support_1.assert(this._currentFilename === undefined, "Previous file wasn't finished");
        // FIXME: The filenames should actually be Sourcelikes, too
        this._currentFilename = this.sourcelikeToString(basename) + ".java";
    };
    JavaRenderer.prototype.finishFile = function () {
        _super.prototype.finishFile.call(this, Support_1.defined(this._currentFilename));
        this._currentFilename = undefined;
    };
    JavaRenderer.prototype.emitPackageAndImports = function (imports) {
        var allImports = ["java.util.Map"].concat(this._justTypes ? [] : imports);
        this.emitLine("package ", this._packageName, ";");
        this.ensureBlankLine();
        for (var _i = 0, allImports_1 = allImports; _i < allImports_1.length; _i++) {
            var pkg = allImports_1[_i];
            this.emitLine("import ", pkg, ";");
        }
    };
    JavaRenderer.prototype.emitFileHeader = function (fileName, imports) {
        this.startFile(fileName);
        this.ensureBlankLine();
        this.emitPackageAndImports(imports);
        this.ensureBlankLine();
    };
    JavaRenderer.prototype.emitDescriptionBlock = function (lines) {
        this.emitCommentLines(lines, " * ", "/**", " */");
    };
    JavaRenderer.prototype.emitBlock = function (line, f) {
        this.emitLine(line, " {");
        this.indent(f);
        this.emitLine("}");
    };
    JavaRenderer.prototype.javaType = function (reference, t, withIssues) {
        var _this = this;
        if (withIssues === void 0) { withIssues = false; }
        return TypeUtils_1.matchType(t, function (_anyType) { return Source_1.maybeAnnotated(withIssues, Annotation_1.anyTypeIssueAnnotation, "Object"); }, function (_nullType) { return Source_1.maybeAnnotated(withIssues, Annotation_1.nullTypeIssueAnnotation, "Object"); }, function (_boolType) { return (reference ? "Boolean" : "boolean"); }, function (_integerType) { return (reference ? "Long" : "long"); }, function (_doubleType) { return (reference ? "Double" : "double"); }, function (_stringType) { return "String"; }, function (arrayType) { return [_this.javaType(false, arrayType.items, withIssues), "[]"]; }, function (classType) { return _this.nameForNamedType(classType); }, function (mapType) { return ["Map<String, ", _this.javaType(true, mapType.values, withIssues), ">"]; }, function (enumType) { return _this.nameForNamedType(enumType); }, function (unionType) {
            var nullable = TypeUtils_1.nullableFromUnion(unionType);
            if (nullable !== null)
                return _this.javaType(true, nullable, withIssues);
            return _this.nameForNamedType(unionType);
        });
    };
    JavaRenderer.prototype.javaTypeWithoutGenerics = function (reference, t) {
        if (t instanceof Type_1.ArrayType) {
            return [this.javaTypeWithoutGenerics(false, t.items), "[]"];
        }
        else if (t instanceof Type_1.MapType) {
            return "Map";
        }
        else if (t instanceof Type_1.UnionType) {
            var nullable = TypeUtils_1.nullableFromUnion(t);
            if (nullable !== null)
                return this.javaTypeWithoutGenerics(true, nullable);
            return this.nameForNamedType(t);
        }
        else {
            return this.javaType(reference, t);
        }
    };
    JavaRenderer.prototype.emitClassAttributes = function (c, _className) {
        if (c.getProperties().isEmpty() && !this._justTypes) {
            this.emitLine("@JsonAutoDetect(fieldVisibility=JsonAutoDetect.Visibility.NONE)");
        }
    };
    JavaRenderer.prototype.emitAccessorAttributes = function (_c, _className, _propertyName, jsonName, _p, _isSetter) {
        if (!this._justTypes) {
            this.emitLine('@JsonProperty("', exports.stringEscape(jsonName), '")');
        }
    };
    JavaRenderer.prototype.importsForType = function (t) {
        if (t instanceof Type_1.ClassType) {
            return ["com.fasterxml.jackson.annotation.*"];
        }
        if (t instanceof Type_1.UnionType) {
            return [
                "java.io.IOException",
                "com.fasterxml.jackson.core.*",
                "com.fasterxml.jackson.databind.*",
                "com.fasterxml.jackson.databind.annotation.*"
            ];
        }
        if (t instanceof Type_1.EnumType) {
            return ["java.io.IOException", "com.fasterxml.jackson.annotation.*"];
        }
        return Support_1.assertNever(t);
    };
    JavaRenderer.prototype.emitClassDefinition = function (c, className) {
        var _this = this;
        this.emitFileHeader(className, this.importsForType(c));
        this.emitDescription(this.descriptionForType(c));
        this.emitClassAttributes(c, className);
        this.emitBlock(["public class ", className], function () {
            _this.forEachClassProperty(c, "none", function (name, _, p) {
                _this.emitLine("private ", _this.javaType(false, p.type, true), " ", name, ";");
            });
            _this.forEachClassProperty(c, "leading-and-interposing", function (name, jsonName, p) {
                _this.emitDescription(_this.descriptionForClassProperty(c, jsonName));
                var _a = Support_1.defined(_this._gettersAndSettersForPropertyName.get(name)), getterName = _a[0], setterName = _a[1];
                _this.emitAccessorAttributes(c, className, name, jsonName, p, false);
                var rendered = _this.javaType(false, p.type);
                _this.emitLine("public ", rendered, " ", getterName, "() { return ", name, "; }");
                _this.emitAccessorAttributes(c, className, name, jsonName, p, true);
                _this.emitLine("public void ", setterName, "(", rendered, " value) { this.", name, " = value; }");
            });
        });
        this.finishFile();
    };
    JavaRenderer.prototype.unionField = function (u, t, withIssues) {
        if (withIssues === void 0) { withIssues = false; }
        var fieldType = this.javaType(true, t, withIssues);
        // FIXME: "Value" should be part of the name.
        var fieldName = [this.nameForUnionMember(u, t), "Value"];
        return { fieldType: fieldType, fieldName: fieldName };
    };
    JavaRenderer.prototype.emitUnionDefinition = function (u, unionName) {
        var _this = this;
        var tokenCase = function (tokenType) {
            _this.emitLine("case ", tokenType, ":");
        };
        var emitNullDeserializer = function () {
            tokenCase("VALUE_NULL");
            _this.indent(function () { return _this.emitLine("break;"); });
        };
        var emitDeserializeType = function (t) {
            var fieldName = _this.unionField(u, t).fieldName;
            var rendered = _this.javaTypeWithoutGenerics(true, t);
            _this.emitLine("value.", fieldName, " = jsonParser.readValueAs(", rendered, ".class);");
            _this.emitLine("break;");
        };
        var emitDeserializer = function (tokenTypes, kind) {
            var t = u.findMember(kind);
            if (t === undefined)
                return;
            for (var _i = 0, tokenTypes_1 = tokenTypes; _i < tokenTypes_1.length; _i++) {
                var tokenType = tokenTypes_1[_i];
                tokenCase(tokenType);
            }
            _this.indent(function () { return emitDeserializeType(t); });
        };
        var emitDoubleSerializer = function () {
            var t = u.findMember("double");
            if (t === undefined)
                return;
            if (u.findMember("integer") === undefined)
                tokenCase("VALUE_NUMBER_INT");
            tokenCase("VALUE_NUMBER_FLOAT");
            _this.indent(function () { return emitDeserializeType(t); });
        };
        this.emitFileHeader(unionName, this.importsForType(u));
        this.emitDescription(this.descriptionForType(u));
        if (!this._justTypes) {
            this.emitLine("@JsonDeserialize(using = ", unionName, ".Deserializer.class)");
            this.emitLine("@JsonSerialize(using = ", unionName, ".Serializer.class)");
        }
        var _a = TypeUtils_1.removeNullFromUnion(u), maybeNull = _a[0], nonNulls = _a[1];
        this.emitBlock(["public class ", unionName], function () {
            nonNulls.forEach(function (t) {
                var _a = _this.unionField(u, t, true), fieldType = _a.fieldType, fieldName = _a.fieldName;
                _this.emitLine("public ", fieldType, " ", fieldName, ";");
            });
            if (_this._justTypes)
                return;
            _this.ensureBlankLine();
            _this.emitBlock(["static class Deserializer extends JsonDeserializer<", unionName, ">"], function () {
                _this.emitLine("@Override");
                _this.emitBlock([
                    "public ",
                    unionName,
                    " deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException, JsonProcessingException"
                ], function () {
                    _this.emitLine(unionName, " value = new ", unionName, "();");
                    _this.emitLine("switch (jsonParser.getCurrentToken()) {");
                    if (maybeNull !== null)
                        emitNullDeserializer();
                    emitDeserializer(["VALUE_NUMBER_INT"], "integer");
                    emitDoubleSerializer();
                    emitDeserializer(["VALUE_TRUE", "VALUE_FALSE"], "bool");
                    emitDeserializer(["VALUE_STRING"], "string");
                    emitDeserializer(["START_ARRAY"], "array");
                    emitDeserializer(["START_OBJECT"], "class");
                    emitDeserializer(["VALUE_STRING"], "enum");
                    emitDeserializer(["START_OBJECT"], "map");
                    _this.emitLine('default: throw new IOException("Cannot deserialize ', unionName, '");');
                    _this.emitLine("}");
                    _this.emitLine("return value;");
                });
            });
            _this.ensureBlankLine();
            _this.emitBlock(["static class Serializer extends JsonSerializer<", unionName, ">"], function () {
                _this.emitLine("@Override");
                _this.emitBlock([
                    "public void serialize(",
                    unionName,
                    " obj, JsonGenerator jsonGenerator, SerializerProvider serializerProvider) throws IOException"
                ], function () {
                    nonNulls.forEach(function (t) {
                        var fieldName = _this.unionField(u, t, true).fieldName;
                        _this.emitBlock(["if (obj.", fieldName, " != null)"], function () {
                            _this.emitLine("jsonGenerator.writeObject(obj.", fieldName, ");");
                            _this.emitLine("return;");
                        });
                    });
                    if (maybeNull !== null) {
                        _this.emitLine("jsonGenerator.writeNull();");
                    }
                    else {
                        _this.emitLine('throw new IOException("', unionName, ' must not be null");');
                    }
                });
            });
        });
        this.finishFile();
    };
    JavaRenderer.prototype.emitEnumDefinition = function (e, enumName) {
        var _this = this;
        this.emitFileHeader(enumName, this.importsForType(e));
        this.emitDescription(this.descriptionForType(e));
        var caseNames = [];
        this.forEachEnumCase(e, "none", function (name) {
            if (caseNames.length > 0)
                caseNames.push(", ");
            caseNames.push(name);
        });
        caseNames.push(";");
        this.emitBlock(["public enum ", enumName], function () {
            _this.emitLine(caseNames);
            _this.ensureBlankLine();
            _this.emitLine("@JsonValue");
            _this.emitBlock("public String toValue()", function () {
                _this.emitLine("switch (this) {");
                _this.forEachEnumCase(e, "none", function (name, jsonName) {
                    _this.emitLine("case ", name, ': return "', exports.stringEscape(jsonName), '";');
                });
                _this.emitLine("}");
                _this.emitLine("return null;");
            });
            _this.ensureBlankLine();
            _this.emitLine("@JsonCreator");
            _this.emitBlock(["public static ", enumName, " forValue(String value) throws IOException"], function () {
                _this.forEachEnumCase(e, "none", function (name, jsonName) {
                    _this.emitLine('if (value.equals("', exports.stringEscape(jsonName), '")) return ', name, ";");
                });
                _this.emitLine('throw new IOException("Cannot deserialize ', enumName, '");');
            });
        });
        this.finishFile();
    };
    JavaRenderer.prototype.emitConverterClass = function () {
        var _this = this;
        this.startFile("Converter");
        this.ensureBlankLine();
        if (this.leadingComments !== undefined) {
            this.emitCommentLines(this.leadingComments);
        }
        else {
            this.emitCommentLines([
                "To use this code, add the following Maven dependency to your project:",
                "",
                "    com.fasterxml.jackson.core : jackson-databind : 2.9.0",
                "",
                "Import this package:",
                ""
            ]);
        }
        this.emitLine("//     import ", this._packageName, ".Converter;");
        this.emitMultiline("//\n// Then you can deserialize a JSON string with\n//");
        this.forEachTopLevel("none", function (t, name) {
            _this.emitLine("//     ", _this.javaType(false, t), " data = Converter.", _this.decoderName(name), "(jsonString);");
        });
        this.ensureBlankLine();
        this.emitPackageAndImports([
            "java.io.IOException",
            "com.fasterxml.jackson.databind.*",
            "com.fasterxml.jackson.core.JsonProcessingException"
        ]);
        this.ensureBlankLine();
        this.emitBlock(["public class Converter"], function () {
            _this.emitLine("// Serialize/deserialize helpers");
            _this.forEachTopLevel("leading-and-interposing", function (topLevelType, topLevelName) {
                var topLevelTypeRendered = _this.javaType(false, topLevelType);
                _this.emitBlock([
                    "public static ",
                    topLevelTypeRendered,
                    " ",
                    _this.decoderName(topLevelName),
                    "(String json) throws IOException"
                ], function () {
                    _this.emitLine("return ", _this.readerGetterName(topLevelName), "().readValue(json);");
                });
                _this.ensureBlankLine();
                _this.emitBlock([
                    "public static String ",
                    _this.encoderName(topLevelName),
                    "(",
                    topLevelTypeRendered,
                    " obj) throws JsonProcessingException"
                ], function () {
                    _this.emitLine("return ", _this.writerGetterName(topLevelName), "().writeValueAsString(obj);");
                });
            });
            _this.forEachTopLevel("leading-and-interposing", function (topLevelType, topLevelName) {
                var readerName = _this.fieldOrMethodName("reader", topLevelName);
                var writerName = _this.fieldOrMethodName("writer", topLevelName);
                _this.emitLine("private static ObjectReader ", readerName, ";");
                _this.emitLine("private static ObjectWriter ", writerName, ";");
                _this.ensureBlankLine();
                _this.emitBlock(["private static void ", _this.methodName("instantiate", "Mapper", topLevelName), "()"], function () {
                    var renderedForClass = _this.javaTypeWithoutGenerics(false, topLevelType);
                    _this.emitLine("ObjectMapper mapper = new ObjectMapper();");
                    _this.emitLine(readerName, " = mapper.reader(", renderedForClass, ".class);");
                    _this.emitLine(writerName, " = mapper.writerFor(", renderedForClass, ".class);");
                });
                _this.ensureBlankLine();
                _this.emitBlock(["private static ObjectReader ", _this.readerGetterName(topLevelName), "()"], function () {
                    _this.emitLine("if (", readerName, " == null) ", _this.methodName("instantiate", "Mapper", topLevelName), "();");
                    _this.emitLine("return ", readerName, ";");
                });
                _this.ensureBlankLine();
                _this.emitBlock(["private static ObjectWriter ", _this.writerGetterName(topLevelName), "()"], function () {
                    _this.emitLine("if (", writerName, " == null) ", _this.methodName("instantiate", "Mapper", topLevelName), "();");
                    _this.emitLine("return ", writerName, ";");
                });
            });
        });
        this.finishFile();
    };
    JavaRenderer.prototype.emitSourceStructure = function () {
        var _this = this;
        if (!this._justTypes) {
            this.emitConverterClass();
        }
        this.forEachNamedType("leading-and-interposing", function (c, n) { return _this.emitClassDefinition(c, n); }, function (e, n) { return _this.emitEnumDefinition(e, n); }, function (u, n) { return _this.emitUnionDefinition(u, n); });
    };
    return JavaRenderer;
}(ConvenienceRenderer_1.ConvenienceRenderer));
exports.JavaRenderer = JavaRenderer;
