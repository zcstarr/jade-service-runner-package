import { TargetLanguage } from "../TargetLanguage";
import { Type, ClassType, EnumType } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Name, Namer } from "../Naming";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../ConvenienceRenderer";
import { Option } from "../RendererOptions";
export declare type NamingStyle = "pascal" | "camel" | "underscore" | "upper-underscore";
export default class CPlusPlusTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _namespaceOption;
    private readonly _typeNamingStyleOption;
    private readonly _memberNamingStyleOption;
    private readonly _enumeratorNamingStyleOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsUnionsWithBothNumberTypes: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class CPlusPlusRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private readonly _namespaceNames;
    private readonly _typeNameStyle;
    private readonly _typeNamingFunction;
    private readonly _memberNamingFunction;
    private readonly _caseNamingFunction;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, namespaceName: string, _typeNamingStyle: NamingStyle, _memberNamingStyle: NamingStyle, _enumeratorNamingStyle: NamingStyle);
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected forbiddenForObjectProperties(_c: ClassType, _className: Name): ForbiddenWordsInfo;
    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo;
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): null;
    protected makeEnumCaseNamer(): Namer;
    protected readonly needsTypeDeclarationBeforeUse: boolean;
    protected canBeForwardDeclared(t: Type): boolean;
    protected emitDescriptionBlock(lines: string[]): void;
    private emitBlock;
    private emitNamespaces;
    private cppTypeInOptional;
    private variantType;
    private ourQualifier;
    private jsonQualifier;
    private variantIndirection;
    private cppType;
    private emitClass;
    private emitClassFunctions;
    private emitEnum;
    private emitUnionTypedefs;
    private emitUnionFunctions;
    private emitEnumFunctions;
    private emitTopLevelTypedef;
    private emitAllUnionFunctions;
    private emitOptionalHelpers;
    private emitDeclaration(decl);
    private emitTypes;
    protected emitSourceStructure(): void;
}
