import { TargetLanguage } from "../TargetLanguage";
import { Type, ClassType, EnumType, UnionType, TypeKind } from "../Type";
import { TypeGraph } from "../TypeGraph";
import { Name, Namer } from "../Naming";
import { Option } from "../RendererOptions";
import { Sourcelike } from "../Source";
import { ConvenienceRenderer, ForbiddenWordsInfo } from "../ConvenienceRenderer";
export default class SwiftTargetLanguage extends TargetLanguage {
    private readonly _justTypesOption;
    private readonly _convenienceInitializers;
    private readonly _urlSessionHandlers;
    private readonly _alamofireHandlers;
    private readonly _namedTypePrefix;
    private readonly _classOption;
    private readonly _denseOption;
    private readonly _accessLevelOption;
    constructor();
    protected getOptions(): Option<any>[];
    readonly supportsOptionalClassProperties: boolean;
    readonly supportsUnionsWithBothNumberTypes: boolean;
    protected readonly rendererClass: new (targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, ...optionValues: any[]) => ConvenienceRenderer;
}
export declare class SwiftRenderer extends ConvenienceRenderer {
    private readonly _justTypes;
    private readonly _useClasses;
    private readonly _dense;
    private readonly _convenienceInitializers;
    private readonly _accessLevel;
    private readonly _urlSession;
    private readonly _alamofire;
    private readonly _namedTypePrefix;
    private _needAny;
    private _needNull;
    constructor(targetLanguage: TargetLanguage, graph: TypeGraph, leadingComments: string[] | undefined, _justTypes: boolean, _useClasses: boolean, _dense: boolean, _convenienceInitializers: boolean, _accessLevel: string, _urlSession: boolean, _alamofire: boolean, _namedTypePrefix: string);
    protected forbiddenNamesForGlobalNamespace(): string[];
    protected forbiddenForObjectProperties(_c: ClassType, _classNamed: Name): ForbiddenWordsInfo;
    protected forbiddenForEnumCases(_e: EnumType, _enumName: Name): ForbiddenWordsInfo;
    protected forbiddenForUnionMembers(_u: UnionType, _unionName: Name): ForbiddenWordsInfo;
    protected makeNamedTypeNamer(): Namer;
    protected namerForObjectProperty(): Namer;
    protected makeUnionMemberNamer(): Namer;
    protected makeEnumCaseNamer(): Namer;
    protected isImplicitCycleBreaker(t: Type): boolean;
    protected emitDescriptionBlock(lines: string[]): void;
    private emitBlock;
    private emitBlockWithAccess(line, f);
    private justTypesCase;
    protected swiftType(t: Type, withIssues?: boolean, noOptional?: boolean): Sourcelike;
    protected proposedUnionMemberNameForTypeKind: (kind: TypeKind) => string | null;
    private renderHeader;
    private renderTopLevelAlias;
    private getProtocolString;
    private getEnumPropertyGroups(c);
    private readonly accessLevel;
    private renderClassDefinition;
    private emitConvenienceInitializersExtension;
    private renderEnumDefinition;
    private renderUnionDefinition;
    private emitTopLevelMapAndArrayConvenienceInitializerExtensions;
    private emitDecodingError;
    private emitSupportFunctions4;
    protected emitMark(line: Sourcelike, horizontalLine?: boolean): void;
    protected emitSourceStructure(): void;
    private emitURLSessionExtension();
    private emitAlamofireExtension();
}
