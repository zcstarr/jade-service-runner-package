import { OrderedMap } from "immutable";
import { TypeAttributeKind } from "./TypeAttributes";
import { StringTypeMapping } from "./TypeBuilder";
export declare class StringTypes {
    readonly cases: OrderedMap<string, number> | undefined;
    readonly allowDate: boolean;
    readonly allowTime: boolean;
    readonly allowDateTime: boolean;
    static readonly unrestricted: StringTypes;
    static readonly date: StringTypes;
    static readonly time: StringTypes;
    static readonly dateTime: StringTypes;
    static fromCase(s: string, count: number): StringTypes;
    static fromCases(cases: string[]): StringTypes;
    constructor(cases: OrderedMap<string, number> | undefined, allowDate: boolean, allowTime: boolean, allowDateTime: boolean);
    readonly isRestricted: boolean;
    union(other: StringTypes): StringTypes;
    intersect(other: StringTypes): StringTypes;
    applyStringTypeMapping(mapping: StringTypeMapping): StringTypes;
    equals(other: any): boolean;
    hashCode(): number;
    toString(): string;
}
export declare const stringTypesTypeAttributeKind: TypeAttributeKind<StringTypes>;
