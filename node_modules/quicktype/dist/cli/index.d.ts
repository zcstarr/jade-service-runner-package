import { Map } from "immutable";
import { Options, RendererOptions, SerializedRenderResult, TargetLanguage } from "..";
export interface CLIOptions {
    lang: string;
    topLevel: string;
    src: string[];
    srcUrls?: string;
    srcLang: string;
    graphqlSchema?: string;
    graphqlIntrospect?: string;
    graphqlServerHeader?: string[];
    template?: string;
    out?: string;
    buildMarkovChain?: string;
    findSimilarClassesSchema?: string;
    noMaps: boolean;
    noEnums: boolean;
    noDateTimes: boolean;
    alphabetizeProperties: boolean;
    allPropertiesOptional: boolean;
    noCombineClasses: boolean;
    noRender: boolean;
    rendererOptions: RendererOptions;
    help: boolean;
    quiet: boolean;
    version: boolean;
    debug?: string;
    telemetry?: string;
}
export declare function parseCLIOptions(argv: string[], targetLanguage?: TargetLanguage): CLIOptions;
export declare function makeQuicktypeOptions(options: CLIOptions, targetLanguages?: TargetLanguage[]): Promise<Partial<Options> | undefined>;
export declare function writeOutput(cliOptions: CLIOptions, resultsByFilename: Map<string, SerializedRenderResult>): void;
export declare function main(args: string[] | Partial<CLIOptions>): Promise<void>;
