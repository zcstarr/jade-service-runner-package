"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var storage = require("./storage");
var analytics_1 = require("./analytics");
var chalk = require("chalk");
var analytics = new analytics_1.NoAnalytics();
function init() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, storage.init()];
                case 1:
                    _a.sent();
                    if (state() === "enabled") {
                        analytics = new analytics_1.GoogleAnalytics();
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.init = init;
function pageview(page) {
    analytics.pageview(page);
}
exports.pageview = pageview;
function timing(category, variable, time) {
    analytics.timing(category, variable, time);
}
exports.timing = timing;
function event(category, action, label, value) {
    analytics.event(category, action, label, value);
}
exports.event = event;
function enable() {
    if (state() !== "enabled") {
        console.error(chalk.green("Thank you for enabling telemetry. It helps us make quicktype even better!"));
    }
    setState("enabled");
    analytics = new analytics_1.GoogleAnalytics();
}
exports.enable = enable;
function disable() {
    if (state() !== "disabled") {
        console.error("Telemetry disabled. To support quicktype in other ways, please share it.");
    }
    setState("disabled");
    analytics = new analytics_1.NoAnalytics();
}
exports.disable = disable;
function state() {
    return storage.get("analyticsState", "none", "disabled");
}
exports.state = state;
function setState(newState) {
    storage.set("analyticsState", newState);
}
exports.setState = setState;
function timeAsync(variable, work) {
    return __awaiter(this, void 0, void 0, function () {
        var start, result, end;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    start = new Date().getTime();
                    return [4 /*yield*/, work()];
                case 1:
                    result = _a.sent();
                    end = new Date().getTime();
                    timing("default", variable, end - start);
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.timeAsync = timeAsync;
exports.TELEMETRY_HEADER = "Please help improve quicktype by enabling anonymous telemetry with:\n\n  $ quicktype --telemetry enable\n\nYou can also enable telemetry on any quicktype invocation:\n\n  $ quicktype pokedex.json -o Pokedex.cs --telemetry enable\n\nThis helps us improve quicktype by measuring:\n\n  * How many people use quicktype\n  * Which features are popular or unpopular\n  * Performance\n  * Errors\n\nquicktype does not collect:\n\n  * Your filenames or input data\n  * Any personally identifiable information (PII)\n  * Anything not directly related to quicktype's usage\n\nIf you don't want to help improve quicktype, you can dismiss this message with:\n\n  $ quicktype --telemetry disable\n\nFor a full privacy policy, visit app.quicktype.io/privacy\n";
