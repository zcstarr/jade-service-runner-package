"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var Support_1 = require("./Support");
var TypeAttributeKind = /** @class */ (function () {
    function TypeAttributeKind(name) {
        this.name = name;
    }
    TypeAttributeKind.prototype.combine = function (_a, _b) {
        return Support_1.panic("Cannot combine type attribute " + this.name);
    };
    TypeAttributeKind.prototype.intersect = function (a, b) {
        return this.combine(a, b);
    };
    TypeAttributeKind.prototype.makeInferred = function (_) {
        return Support_1.panic("Cannot make type attribute " + this.name + " inferred");
    };
    TypeAttributeKind.prototype.children = function (_) {
        return immutable_1.OrderedSet();
    };
    TypeAttributeKind.prototype.stringify = function (_) {
        return undefined;
    };
    Object.defineProperty(TypeAttributeKind.prototype, "inIdentity", {
        get: function () {
            return false;
        },
        enumerable: true,
        configurable: true
    });
    TypeAttributeKind.prototype.requiresUniqueIdentity = function (_) {
        return false;
    };
    TypeAttributeKind.prototype.reconstitute = function (_builder, a) {
        return a;
    };
    TypeAttributeKind.prototype.makeAttributes = function (value) {
        var kvps = [[this, value]];
        return immutable_1.Map(kvps);
    };
    TypeAttributeKind.prototype.tryGetInAttributes = function (a) {
        return a.get(this);
    };
    TypeAttributeKind.prototype.setInAttributes = function (a, value) {
        return a.set(this, value);
    };
    TypeAttributeKind.prototype.modifyInAttributes = function (a, modify) {
        var modified = modify(this.tryGetInAttributes(a));
        if (modified === undefined) {
            return a.remove(this);
        }
        return this.setInAttributes(a, modified);
    };
    TypeAttributeKind.prototype.combineInAttributes = function (a, value) {
        var _this = this;
        return this.modifyInAttributes(a, function (v) { return (v === undefined ? value : _this.combine(v, value)); });
    };
    TypeAttributeKind.prototype.setDefaultInAttributes = function (a, makeDefault) {
        if (this.tryGetInAttributes(a) !== undefined)
            return a;
        return this.modifyInAttributes(a, makeDefault);
    };
    TypeAttributeKind.prototype.removeInAttributes = function (a) {
        var _this = this;
        return a.filterNot(function (_, k) { return k === _this; });
    };
    TypeAttributeKind.prototype.equals = function (other) {
        if (!(other instanceof TypeAttributeKind)) {
            return false;
        }
        return this.name === other.name;
    };
    TypeAttributeKind.prototype.hashCode = function () {
        return immutable_1.hash(this.name);
    };
    return TypeAttributeKind;
}());
exports.TypeAttributeKind = TypeAttributeKind;
exports.emptyTypeAttributes = immutable_1.Map();
function combineTypeAttributes(combinationKind, firstOrArray, second) {
    var union = combinationKind === "union";
    var attributeArray;
    var first;
    var rest;
    if (Array.isArray(firstOrArray)) {
        attributeArray = firstOrArray;
        if (attributeArray.length === 0)
            return immutable_1.Map();
        first = attributeArray[0];
        rest = attributeArray.slice(1);
    }
    else {
        if (second === undefined) {
            return Support_1.panic("Must have on array or two attributes");
        }
        first = firstOrArray;
        rest = [second];
    }
    return first.mergeWith.apply(first, [function (aa, ab, kind) { return (union ? kind.combine(aa, ab) : kind.intersect(aa, ab)); }].concat(rest));
}
exports.combineTypeAttributes = combineTypeAttributes;
function makeTypeAttributesInferred(attr) {
    return attr.map(function (value, kind) { return kind.makeInferred(value); }).filter(function (v) { return v !== undefined; });
}
exports.makeTypeAttributesInferred = makeTypeAttributesInferred;
var DescriptionTypeAttributeKind = /** @class */ (function (_super) {
    __extends(DescriptionTypeAttributeKind, _super);
    function DescriptionTypeAttributeKind() {
        return _super.call(this, "description") || this;
    }
    DescriptionTypeAttributeKind.prototype.combine = function (a, b) {
        return a.union(b);
    };
    DescriptionTypeAttributeKind.prototype.makeInferred = function (_) {
        return immutable_1.OrderedSet();
    };
    DescriptionTypeAttributeKind.prototype.stringify = function (descriptions) {
        var result = descriptions.first();
        if (result === undefined)
            return undefined;
        if (result.length > 5 + 3) {
            result = result.substr(0, 5) + "...";
        }
        if (descriptions.size > 1) {
            result = result + ", ...";
        }
        return result;
    };
    return DescriptionTypeAttributeKind;
}(TypeAttributeKind));
exports.descriptionTypeAttributeKind = new DescriptionTypeAttributeKind();
var PropertyDescriptionsTypeAttributeKind = /** @class */ (function (_super) {
    __extends(PropertyDescriptionsTypeAttributeKind, _super);
    function PropertyDescriptionsTypeAttributeKind() {
        return _super.call(this, "propertyDescriptions") || this;
    }
    PropertyDescriptionsTypeAttributeKind.prototype.combine = function (a, b) {
        return a.mergeWith(Support_1.setUnion, b);
    };
    PropertyDescriptionsTypeAttributeKind.prototype.makeInferred = function (_) {
        return immutable_1.Map();
    };
    return PropertyDescriptionsTypeAttributeKind;
}(TypeAttributeKind));
exports.propertyDescriptionsTypeAttributeKind = new PropertyDescriptionsTypeAttributeKind();
