import { Map, OrderedMap, OrderedSet, Set, List } from "immutable";
import { PrimitiveTypeKind, Type, PrimitiveStringTypeKind, ClassProperty } from "./Type";
import { TypeGraph } from "./TypeGraph";
import { TypeAttributes, TypeAttributeKind } from "./TypeAttributes";
import { StringTypes } from "./StringTypes";
export declare class TypeRef {
    readonly graph: TypeGraph;
    readonly index: number;
    constructor(graph: TypeGraph, index: number);
    deref(): [Type, TypeAttributes];
    equals(other: any): boolean;
    hashCode(): number;
}
export declare const provenanceTypeAttributeKind: TypeAttributeKind<Set<TypeRef>>;
export declare type StringTypeMapping = {
    date: PrimitiveStringTypeKind;
    time: PrimitiveStringTypeKind;
    dateTime: PrimitiveStringTypeKind;
};
export declare const NoStringTypeMapping: StringTypeMapping;
export declare class TypeBuilder {
    private readonly _stringTypeMapping;
    readonly canonicalOrder: boolean;
    private readonly _allPropertiesOptional;
    private readonly _addProvenanceAttributes;
    readonly typeGraph: TypeGraph;
    protected topLevels: Map<string, TypeRef>;
    protected readonly types: (Type | undefined)[];
    private readonly typeAttributes;
    private _addedForwardingIntersection;
    constructor(_stringTypeMapping: StringTypeMapping, canonicalOrder: boolean, _allPropertiesOptional: boolean, _addProvenanceAttributes: boolean, inheritsProvenanceAttributes: boolean);
    addTopLevel(name: string, tref: TypeRef): void;
    reserveTypeRef(): TypeRef;
    private commitType;
    protected addType<T extends Type>(forwardingRef: TypeRef | undefined, creator: (tref: TypeRef) => T, attributes: TypeAttributes | undefined): TypeRef;
    atIndex(index: number): [Type, TypeAttributes];
    addAttributes(tref: TypeRef, attributes: TypeAttributes): void;
    makeNullable(tref: TypeRef, attributes: TypeAttributes): TypeRef;
    finish(): TypeGraph;
    protected addForwardingIntersection(forwardingRef: TypeRef, tref: TypeRef): TypeRef;
    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: undefined): undefined;
    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: TypeRef): TypeRef;
    protected forwardIfNecessary(forwardingRef: TypeRef | undefined, tref: TypeRef | undefined): TypeRef | undefined;
    readonly didAddForwardingIntersection: boolean;
    private _typeForIdentity;
    private registerTypeForIdentity(identity, tref);
    protected makeIdentity(maker: () => List<any> | undefined): List<any> | undefined;
    private getOrAddType(identityMaker, creator, attributes, forwardingRef);
    private registerType(t);
    getPrimitiveType(kind: PrimitiveTypeKind, maybeAttributes?: TypeAttributes, forwardingRef?: TypeRef): TypeRef;
    getStringType(attributes: TypeAttributes, stringTypes: StringTypes | undefined, forwardingRef?: TypeRef): TypeRef;
    getEnumType(attributes: TypeAttributes, cases: OrderedSet<string>, forwardingRef?: TypeRef): TypeRef;
    getUniqueObjectType(attributes: TypeAttributes, properties: OrderedMap<string, ClassProperty> | undefined, additionalProperties: TypeRef | undefined, forwardingRef?: TypeRef): TypeRef;
    getUniqueMapType(forwardingRef?: TypeRef): TypeRef;
    getMapType(attributes: TypeAttributes, values: TypeRef, forwardingRef?: TypeRef): TypeRef;
    setObjectProperties(ref: TypeRef, properties: OrderedMap<string, ClassProperty>, additionalProperties: TypeRef | undefined): void;
    getUniqueArrayType(forwardingRef?: TypeRef): TypeRef;
    getArrayType(items: TypeRef, forwardingRef?: TypeRef): TypeRef;
    setArrayItems(ref: TypeRef, items: TypeRef): void;
    modifyPropertiesIfNecessary(properties: OrderedMap<string, ClassProperty>): OrderedMap<string, ClassProperty>;
    getClassType(attributes: TypeAttributes, properties: OrderedMap<string, ClassProperty>, forwardingRef?: TypeRef): TypeRef;
    getUniqueClassType(attributes: TypeAttributes, isFixed: boolean, properties: OrderedMap<string, ClassProperty> | undefined, forwardingRef?: TypeRef): TypeRef;
    getUnionType(attributes: TypeAttributes, members: OrderedSet<TypeRef>, forwardingRef?: TypeRef): TypeRef;
    getUniqueUnionType(attributes: TypeAttributes, members: OrderedSet<TypeRef> | undefined, forwardingRef?: TypeRef): TypeRef;
    getIntersectionType(attributes: TypeAttributes, members: OrderedSet<TypeRef>, forwardingRef?: TypeRef): TypeRef;
    getUniqueIntersectionType(attributes: TypeAttributes, members: OrderedSet<TypeRef> | undefined, forwardingRef?: TypeRef): TypeRef;
    setSetOperationMembers(ref: TypeRef, members: OrderedSet<TypeRef>): void;
    setLostTypeAttributes(): void;
}
