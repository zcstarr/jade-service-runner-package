"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var immutable_1 = require("immutable");
var js_base64_1 = require("js-base64");
var pako = require("pako");
var Messages_1 = require("./Messages");
function intercalate(separator, items) {
    var acc = [];
    items.forEach(function (x) {
        if (acc.length > 0)
            acc.push(separator);
        acc.push(x);
    });
    return immutable_1.List(acc);
}
exports.intercalate = intercalate;
function intercalateArray(separator, items) {
    return intercalate(separator, immutable_1.List(items)).toArray();
}
exports.intercalateArray = intercalateArray;
function setUnion(a, b) {
    return a.union(b);
}
exports.setUnion = setUnion;
function unionOfSets(sets) {
    if (sets.length === 0) {
        return immutable_1.Set();
    }
    return (_a = sets[0]).union.apply(_a, sets.slice(1));
    var _a;
}
exports.unionOfSets = unionOfSets;
function isStringMap(x, checkValue) {
    if (typeof x !== "object" || Array.isArray(x) || x === null) {
        return false;
    }
    if (checkValue !== undefined) {
        for (var _i = 0, _a = Object.getOwnPropertyNames(x); _i < _a.length; _i++) {
            var k = _a[_i];
            var v = x[k];
            if (!checkValue(v)) {
                return false;
            }
        }
    }
    return true;
}
exports.isStringMap = isStringMap;
function checkStringMap(x, checkValue) {
    if (isStringMap(x, checkValue))
        return x;
    return panic("Value must be an object, but is " + x);
}
exports.checkStringMap = checkStringMap;
function checkArray(x, checkItem) {
    if (!Array.isArray(x)) {
        return panic("Value must be an array, but is " + x);
    }
    if (checkItem !== undefined) {
        for (var _i = 0, x_1 = x; _i < x_1.length; _i++) {
            var v = x_1[_i];
            if (!checkItem(v)) {
                return panic("Array item does not satisfy constraint: " + v);
            }
        }
    }
    return x;
}
exports.checkArray = checkArray;
function mapOptional(f, x) {
    if (x === undefined)
        return undefined;
    return f(x);
}
exports.mapOptional = mapOptional;
function defined(x) {
    if (x !== undefined)
        return x;
    return panic("Defined value expected, but got undefined");
}
exports.defined = defined;
function nonNull(x) {
    if (x !== null)
        return x;
    return panic("Non-null value expected, but got null");
}
exports.nonNull = nonNull;
function assertNever(x) {
    return Messages_1.messageError("InternalError", { message: "Unexpected object " + x });
}
exports.assertNever = assertNever;
function assert(condition, message) {
    if (message === void 0) { message = "Assertion failed"; }
    if (!condition) {
        return Messages_1.messageError("InternalError", { message: message });
    }
}
exports.assert = assert;
function panic(message) {
    return Messages_1.messageError("InternalError", { message: message });
}
exports.panic = panic;
function mustNotBeCalled() {
    return panic("This must not be called");
}
exports.mustNotBeCalled = mustNotBeCalled;
function mustNotHappen() {
    return panic("This must not happen");
}
exports.mustNotHappen = mustNotHappen;
exports.hashCodeInit = 17;
function addHashCode(acc, h) {
    return (acc * 31 + (h | 0)) | 0;
}
exports.addHashCode = addHashCode;
function repeated(n, value) {
    var arr = [];
    for (var i = 0; i < n; i++) {
        arr.push(value);
    }
    return arr;
}
exports.repeated = repeated;
function repeatedCall(n, producer) {
    var arr = [];
    for (var i = 0; i < n; i++) {
        arr.push(producer());
    }
    return arr;
}
exports.repeatedCall = repeatedCall;
function withDefault(x, theDefault) {
    if (x !== undefined) {
        return x;
    }
    return theDefault;
}
exports.withDefault = withDefault;
function errorMessage(e) {
    if (e instanceof Error) {
        return e.message;
    }
    return e.toString();
}
exports.errorMessage = errorMessage;
function forEachSync(coll, f) {
    return __awaiter(this, void 0, void 0, function () {
        var arr, i, _i, _a, _b, k, v, _c, _d, v;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    if (!(Array.isArray(coll) || immutable_1.isIndexed(coll))) return [3 /*break*/, 5];
                    arr = Array.isArray(coll) ? coll : coll.toArray();
                    i = 0;
                    _e.label = 1;
                case 1:
                    if (!(i < arr.length)) return [3 /*break*/, 4];
                    // If the collection is indexed, then `K` is `number`, but
                    // TypeScript doesn't know this.
                    return [4 /*yield*/, f(arr[i], i)];
                case 2:
                    // If the collection is indexed, then `K` is `number`, but
                    // TypeScript doesn't know this.
                    _e.sent();
                    _e.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [3 /*break*/, 14];
                case 5:
                    if (!immutable_1.isKeyed(coll)) return [3 /*break*/, 10];
                    _i = 0, _a = coll.toArray();
                    _e.label = 6;
                case 6:
                    if (!(_i < _a.length)) return [3 /*break*/, 9];
                    _b = _a[_i], k = _b[0], v = _b[1];
                    return [4 /*yield*/, f(v, k)];
                case 7:
                    _e.sent();
                    _e.label = 8;
                case 8:
                    _i++;
                    return [3 /*break*/, 6];
                case 9: return [3 /*break*/, 14];
                case 10:
                    _c = 0, _d = coll.toArray();
                    _e.label = 11;
                case 11:
                    if (!(_c < _d.length)) return [3 /*break*/, 14];
                    v = _d[_c];
                    // If the collection is a set, then `K` is the same as `v`,
                    // but TypeScript doesn't know this.
                    return [4 /*yield*/, f(v, v)];
                case 12:
                    // If the collection is a set, then `K` is the same as `v`,
                    // but TypeScript doesn't know this.
                    _e.sent();
                    _e.label = 13;
                case 13:
                    _c++;
                    return [3 /*break*/, 11];
                case 14: return [2 /*return*/];
            }
        });
    });
}
exports.forEachSync = forEachSync;
function mapSync(coll, f) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        var results, index;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    results = [];
                    return [4 /*yield*/, forEachSync(coll, function (v, k) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _b = (_a = results).push;
                                        return [4 /*yield*/, f(v, k)];
                                    case 1:
                                        _b.apply(_a, [_c.sent()]);
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                case 1:
                    _a.sent();
                    index = 0;
                    if (Array.isArray(coll)) {
                        return [2 /*return*/, results];
                    }
                    return [2 /*return*/, coll.map(function (_v) { return results[index++]; })];
            }
        });
    });
}
exports.mapSync = mapSync;
function inflateBase64(encoded) {
    var bytes = js_base64_1.Base64.atob(encoded);
    return pako.inflate(bytes, { to: "string" });
}
exports.inflateBase64 = inflateBase64;
function parseJSON(text, description, address) {
    if (address === void 0) { address = "<unknown>"; }
    try {
        return JSON.parse(text);
    }
    catch (e) {
        var message = void 0;
        if (e instanceof SyntaxError) {
            message = e.message;
        }
        else {
            message = "Unknown exception " + e;
        }
        return Messages_1.messageError("MiscJSONParseError", { description: description, address: address, message: message });
    }
}
exports.parseJSON = parseJSON;
function indentationString(level) {
    return "  ".repeat(level);
}
exports.indentationString = indentationString;
