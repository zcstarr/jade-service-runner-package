/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */
export interface OpenRPC {
    openrpc: "1.0.0-rc0" | "1.0.0-rc1";
    info: InfoObject;
    servers?: ServerObject[];
    methods: MethodObject[];
    components?: {
        schemas?: {
            [k: string]: Schema;
        };
        links?: {
            [k: string]: LinkObject;
        };
        examples?: {
            [k: string]: ExampleObject;
        };
        examplePairings?: {
            [k: string]: ExamplePairingObject;
        };
        contentDescriptors?: {
            /**
             * This interface was referenced by `undefined`'s JSON-Schema definition
             * via the `patternProperty` "[0-z]+".
             */
            [k: string]: ContentDescriptorObject | ReferenceObject | OneOfObject;
        };
        tags?: {
            [k: string]: TagObject;
        };
        [k: string]: any;
    };
}
export interface InfoObject {
    title: string;
    description?: string;
    termsOfService?: string;
    version: string;
    contact?: ContactObject;
    license?: LicenseObject;
    /**
     * This interface was referenced by `InfoObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
export interface ContactObject {
    name?: string;
    email?: string;
    url?: string;
    /**
     * This interface was referenced by `ContactObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
export interface LicenseObject {
    name?: string;
    url?: string;
    /**
     * This interface was referenced by `LicenseObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
export interface ServerObject {
    url: string;
    name?: string;
    description?: string;
    summary?: string;
    /**
     * This interface was referenced by `ServerObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
export interface MethodObject {
    /**
     * The cannonical name for the method. The name MUST be unique within the methods array.
     */
    name: string;
    /**
     * A verbose explanation of the method behavior. GitHub Flavored Markdown syntax MAY be used for rich text representation.
     */
    description?: string;
    /**
     * A short summary of what the method does.
     */
    summary?: string;
    tags?: (TagObject | ReferenceObject)[];
    /**
     * Format the server expects the params. Defaults to 'by-positon'.
     */
    paramStructure?: "by-position" | "by-name";
    params: (ContentDescriptorObject | ReferenceObject | OneOfObject)[];
    result: ContentDescriptorObject | ReferenceObject | OneOfObject;
    /**
     * Defines an application level error.
     */
    errors?: (ErrorObject | ReferenceObject | OneOfObject)[];
    links?: (LinkObject | ReferenceObject)[];
    examples?: (ExamplePairingObject | ReferenceObject)[];
    /**
     * This interface was referenced by `MethodObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface TagObject {
    name: string;
    description?: string;
    externalDocs?: ExternalDocumentationObject;
    /**
     * This interface was referenced by `TagObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
/**
 * information about external documentation
 */
export interface ExternalDocumentationObject {
    description?: string;
    url: string;
    /**
     * This interface was referenced by `ExternalDocumentationObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
export interface ReferenceObject {
    $ref: string;
}
export interface ContentDescriptorObject {
    name: string;
    description?: string;
    summary?: string;
    schema?: Schema;
    required?: boolean;
    /**
     * This interface was referenced by `ContentDescriptorObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface Schema {
    [k: string]: any;
}
export interface OneOfObject {
    oneOf: (ContentDescriptorObject | ReferenceObject | OneOfObject)[];
}
/**
 * Defines an application level error.
 */
export interface ErrorObject {
    /**
     * A Number that indicates the error type that occurred. This MUST be an integer. The error codes from and including -32768 to -32000 are reserved for pre-defined errors. These pre-defined errors SHOULD be assumed to be returned from any JSON-RPC api.
     */
    code: number;
    /**
     * A String providing a short description of the error. The message SHOULD be limited to a concise single sentence.
     */
    message: string;
    /**
     * A Primitive or Structured value that contains additional information about the error. This may be omitted. The value of this member is defined by the Server (e.g. detailed error information, nested errors etc.).
     */
    data?: {
        [k: string]: any;
    };
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface LinkObject {
    method?: string;
    description?: string;
    params?: any;
    server?: ServerObject;
    /**
     * This interface was referenced by `LinkObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface ExamplePairingObject {
    name: string;
    description?: string;
    params: (ExampleObject | ReferenceObject)[];
    result: ExampleObject | ReferenceObject;
    [k: string]: any;
}
/**
 * This interface was referenced by `undefined`'s JSON-Schema definition
 * via the `patternProperty` "[0-z]+".
 */
export interface ExampleObject {
    summary?: string;
    value: any;
    description?: string;
    name: string;
    /**
     * This interface was referenced by `ExampleObject`'s JSON-Schema definition
     * via the `patternProperty` "^x-".
     */
    [k: string]: any;
}
