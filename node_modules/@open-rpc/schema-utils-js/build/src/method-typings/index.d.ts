import { IContentDescriptorTyping } from "./generator-interface";
import { OpenRPC, MethodObject } from "@open-rpc/meta-schema";
declare type TLanguages = "typescript" | "rust";
export interface IMethodTypings {
    params: IContentDescriptorTyping[];
    result: IContentDescriptorTyping;
}
/**
 * A class to handle all the tasks relating to types for the OpenRPC Document.
 */
export default class MethodTypings {
    private openrpcDocument;
    private typingMapByLanguage;
    constructor(openrpcDocument: OpenRPC);
    /**
     * A method to generate all the typings. This does most of the heavy lifting, and is quite slow.
     * You should call this method first.
     */
    generateTypings(): Promise<boolean>;
    /**
     * Gives you all the [[IMethodTypings]] for a given method.
     *
     * @param method The method you need the types for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings
     *
     */
    getTypingsForMethod(method: MethodObject, language: TLanguages): IMethodTypings;
    /**
     * Gives you all the [[IContentDescriptorTyping.typings]] needed for a particular method.
     *
     * @param method The method you need the types for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings joined together.
     *
     */
    getTypeDefinitionsForMethod(method: MethodObject, language: TLanguages): string;
    /**
     * A method that returns all the types as a string, useful to directly inserting into code.
     *
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings
     *
     */
    getAllUniqueTypings(language: TLanguages): string;
    /**
     * A method that returns a function signature in the specified language
     *
     * @param method The OpenRPC Method that you want a signature for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing a function signature.
     */
    getFunctionSignature(method: MethodObject, language: TLanguages): string;
    private typingsToString;
}
export {};
