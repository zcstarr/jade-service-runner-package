"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var generate_method_id_1 = require("../generate-method-id");
var json_schema_to_typescript_1 = require("json-schema-to-typescript");
var getTypeName = function (contentDescriptor) {
    var schema = contentDescriptor.schema;
    var interfaceTypes = ["object", undefined];
    var prefix = "T";
    if (interfaceTypes.includes(schema.type)) {
        prefix = "I";
    }
    var contentDescriptorName = lodash_1.default.startCase(contentDescriptor.name).replace(/\s/g, "");
    return "" + prefix + contentDescriptorName;
};
var getTypingForContentDescriptor = function (method, isParam, contentDescriptor) { return __awaiter(_this, void 0, void 0, function () {
    var generateId, typeName, rawTyping, typing;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                generateId = isParam ? generate_method_id_1.generateMethodParamId : generate_method_id_1.generateMethodResultId;
                typeName = getTypeName(contentDescriptor);
                return [4 /*yield*/, json_schema_to_typescript_1.compile(contentDescriptor.schema, typeName, { bannerComment: "", declareExternallyReferenced: false })];
            case 1:
                rawTyping = _a.sent();
                typing = {
                    typeId: generateId(method, contentDescriptor),
                    typeName: typeName,
                    typing: rawTyping.trim(),
                };
                return [2 /*return*/, typing];
        }
    });
}); };
var getMethodTypingsMap = function (openrpcSchema) { return __awaiter(_this, void 0, void 0, function () {
    var methodTypingsPromises, methodTypings, finalTypings;
    var _this = this;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                methodTypingsPromises = lodash_1.default.map(openrpcSchema.methods, function (method) { return __awaiter(_this, void 0, void 0, function () {
                    var mparams, mresult, typingsForParams, typingsForResult;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                mparams = method.params;
                                mresult = method.result;
                                return [4 /*yield*/, Promise.all(lodash_1.default.chain(mparams)
                                        .map(function (param) { return getTypingForContentDescriptor(method, true, param); })
                                        .value())];
                            case 1:
                                typingsForParams = _a.sent();
                                return [4 /*yield*/, getTypingForContentDescriptor(method, false, mresult)];
                            case 2:
                                typingsForResult = _a.sent();
                                return [2 /*return*/, typingsForParams.concat([typingsForResult])];
                        }
                    });
                }); });
                return [4 /*yield*/, Promise.all(methodTypingsPromises)];
            case 1:
                methodTypings = _a.sent();
                finalTypings = lodash_1.default.chain(methodTypings)
                    .flatten()
                    .map(function (typing, i) {
                    typing.typing = typing.typing.replace(/extern crate serde_json;/g, "");
                    return typing;
                })
                    .keyBy("typeId")
                    .value();
                return [2 /*return*/, finalTypings];
        }
    });
}); };
var getFunctionSignature = function (method, typeDefs) {
    var mResult = method.result;
    var result = "Promise<" + typeDefs[generate_method_id_1.generateMethodResultId(method, mResult)].typeName + ">";
    if (method.params.length === 0) {
        return "public " + method.name + "() : " + result;
    }
    var params = lodash_1.default.map(method.params, function (param) { return param.name + ": " + typeDefs[generate_method_id_1.generateMethodParamId(method, param)].typeName; }).join(", ");
    return "public " + method.name + "(" + params + ") : " + result;
};
var generator = {
    getFunctionSignature: getFunctionSignature,
    getMethodTypingsMap: getMethodTypingsMap,
};
exports.default = generator;
