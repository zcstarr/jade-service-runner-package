"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var typescript_1 = __importDefault(require("./typescript"));
var rust_1 = __importDefault(require("./rust"));
var lodash_1 = __importStar(require("lodash"));
var languages = ["typescript", "rust"];
var generators = {
    rust: rust_1.default,
    typescript: typescript_1.default,
};
/**
 * A class to handle all the tasks relating to types for the OpenRPC Document.
 */
var MethodTypings = /** @class */ (function () {
    function MethodTypings(openrpcDocument) {
        this.openrpcDocument = openrpcDocument;
        this.typingMapByLanguage = {};
    }
    /**
     * A method to generate all the typings. This does most of the heavy lifting, and is quite slow.
     * You should call this method first.
     */
    MethodTypings.prototype.generateTypings = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all(languages.map(function (language) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, _b;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = this.typingMapByLanguage;
                                        _b = language;
                                        return [4 /*yield*/, generators[language]
                                                .getMethodTypingsMap(this.openrpcDocument)];
                                    case 1:
                                        _a[_b] = _c.sent();
                                        return [2 /*return*/];
                                }
                            });
                        }); }))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, true];
                }
            });
        });
    };
    /**
     * Gives you all the [[IMethodTypings]] for a given method.
     *
     * @param method The method you need the types for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings
     *
     */
    MethodTypings.prototype.getTypingsForMethod = function (method, language) {
        if (Object.keys(this.typingMapByLanguage).length === 0) {
            throw new Error("typings have not yet been generated. Please run generateTypings first.");
        }
        var typingsMap = this.typingMapByLanguage[language];
        var typings = lodash_1.values(typingsMap);
        var typingsForMethod = lodash_1.filter(typings, function (_a) {
            var typeId = _a.typeId;
            return lodash_1.default.startsWith(typeId, method.name);
        });
        var paramsAndResult = lodash_1.partition(typingsForMethod, function (_a) {
            var typeId = _a.typeId;
            return typeId.includes("result");
        });
        var methodTypings = lodash_1.zipObject(["result", "params"], paramsAndResult);
        return {
            params: methodTypings.params,
            result: methodTypings.result[0],
        };
    };
    /**
     * Gives you all the [[IContentDescriptorTyping.typings]] needed for a particular method.
     *
     * @param method The method you need the types for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings joined together.
     *
     */
    MethodTypings.prototype.getTypeDefinitionsForMethod = function (method, language) {
        if (Object.keys(this.typingMapByLanguage).length === 0) {
            throw new Error("typings have not yet been generated. Please run generateTypings first.");
        }
        var typings = lodash_1.default.chain(this.getTypingsForMethod(method, language))
            .values()
            .flatten()
            .value();
        return this.typingsToString(typings);
    };
    /**
     * A method that returns all the types as a string, useful to directly inserting into code.
     *
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing all the typings
     *
     */
    MethodTypings.prototype.getAllUniqueTypings = function (language) {
        if (Object.keys(this.typingMapByLanguage).length === 0) {
            throw new Error("typings have not yet been generated. Please run generateTypings first.");
        }
        var typings = lodash_1.default.chain(this.typingMapByLanguage[language])
            .values()
            .uniqBy("typeName")
            .value();
        return this.typingsToString(typings);
    };
    /**
     * A method that returns a function signature in the specified language
     *
     * @param method The OpenRPC Method that you want a signature for.
     * @param langeuage The langauge you want the signature to be in.
     *
     * @returns A string containing a function signature.
     */
    MethodTypings.prototype.getFunctionSignature = function (method, language) {
        if (Object.keys(this.typingMapByLanguage).length === 0) {
            throw new Error("typings have not yet been generated. Please run generateTypings first.");
        }
        var sig = generators[language]
            .getFunctionSignature(method, this.typingMapByLanguage[language]);
        return sig;
    };
    MethodTypings.prototype.typingsToString = function (typings) {
        return lodash_1.default.chain(typings)
            .map("typing")
            .compact()
            .value()
            .join("\n");
    };
    return MethodTypings;
}());
exports.default = MethodTypings;
