"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var lodash_1 = __importDefault(require("lodash"));
var generate_method_id_1 = require("../generate-method-id");
var quicktype_1 = require("quicktype");
var getTypeName = function (contentDescriptor) {
    return lodash_1.default.chain(contentDescriptor.name).camelCase().upperFirst().value();
};
var getQuickTypeSources = function (contentDescriptors) {
    return lodash_1.default.chain(contentDescriptors)
        .map(function (contentDescriptor) { return ({
        kind: "schema",
        name: getTypeName(contentDescriptor),
        schema: JSON.stringify(contentDescriptor.schema),
    }); })
        .uniqBy("name")
        .value();
};
var getMethodTypingsMap = function (openrpcSchema) { return __awaiter(_this, void 0, void 0, function () {
    var methods, allContentDescriptors, deriveString, handyDeriveString, cfgDeriveString, untaggedString, typeLinesNested, typeLines, typeRegexes, simpleTypes, complexTypes, useDeclerationTypes, aliasTypes, structTypes, enumTypes, uniqueStructTypes, allTypings, typings;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                methods = openrpcSchema.methods;
                allContentDescriptors = lodash_1.default.chain(methods).map("params").flatten().value().concat(lodash_1.default.map(methods, "result"));
                deriveString = "#[derive(Serialize, Deserialize)]";
                handyDeriveString = "#[derive(Serialize, Deserialize, Debug, Clone, PartialEq)]";
                cfgDeriveString = "#[cfg_attr(test, derive(Random))]";
                untaggedString = "#[serde(untagged)]";
                return [4 /*yield*/, Promise.all(lodash_1.default.map(getQuickTypeSources(allContentDescriptors), function (source) { return quicktype_1.quicktype({
                        lang: "rust",
                        leadingComments: undefined,
                        rendererOptions: { "just-types": "true" },
                        sources: [source],
                    }).then(function (result) { return lodash_1.default.chain(result.lines)
                        .filter(function (line) { return !lodash_1.default.startsWith(line, "//"); })
                        // .forEach(console.log) // Uncomment to print every line of types quicktype produces. Worst api ever...
                        .reduce(function (memoLines, line) {
                        var lastItem = lodash_1.default.last(memoLines);
                        var interfaceMatch = line.match(/pub (struct|enum) (.*) {/);
                        if (interfaceMatch) {
                            var toAdd = [handyDeriveString, cfgDeriveString];
                            if (interfaceMatch[1] === "enum") {
                                toAdd.push(untaggedString);
                            }
                            toAdd.push(line);
                            memoLines.push(toAdd);
                        }
                        else if (lodash_1.default.isArray(lastItem)) {
                            lastItem.push(line);
                            if (line === "}") {
                                memoLines.push("");
                            }
                        }
                        else {
                            memoLines.push(line);
                        }
                        return memoLines;
                    }, [])
                        .filter(function (line) { return line !== untaggedString && line !== deriveString; })
                        .compact()
                        .value(); }); }))];
            case 1:
                typeLinesNested = _a.sent();
                typeLines = lodash_1.default.flatten(typeLinesNested);
                typeRegexes = {
                    alias: /pub type (.*) = (.*)\;/,
                    decleration: /use (.*)\;/,
                    enum: /pub enum (.*) {/,
                    struct: /pub struct (.*) {/,
                };
                simpleTypes = lodash_1.default.filter(typeLines, function (line) { return typeof line === "string"; });
                complexTypes = lodash_1.default.difference(typeLines, simpleTypes);
                useDeclerationTypes = lodash_1.default.filter(simpleTypes, function (line) { return typeRegexes.decleration.test(line.toString()); });
                aliasTypes = lodash_1.default.filter(simpleTypes, function (line) { return typeRegexes.alias.test(line.toString()); });
                structTypes = lodash_1.default.filter(complexTypes, function (lines) { return lodash_1.default.some(lines, function (l) { return typeRegexes.struct.test(l); }); });
                enumTypes = lodash_1.default.filter(complexTypes, function (lines) { return lodash_1.default.some(lines, function (l) { return typeRegexes.enum.test(l); }); });
                uniqueStructTypes = lodash_1.default.uniqBy(structTypes, function (lines) {
                    var regex = /pub (struct|enum) (.*) {/;
                    var lineMatch = lodash_1.default.find(lines, function (l) { return regex.test(l); });
                    return lineMatch.match(regex)[2]; // typeName
                });
                allTypings = lodash_1.default.flatten(useDeclerationTypes.concat(aliasTypes, enumTypes, uniqueStructTypes)).join("\n").trim();
                typings = lodash_1.default.chain(methods)
                    .map(function (method) {
                    var r = [];
                    var result = method.result;
                    var params = method.params;
                    return [
                        {
                            typeId: generate_method_id_1.generateMethodResultId(method, result),
                            typeName: getTypeName(result),
                            typing: "",
                        }
                    ].concat(lodash_1.default.map(params, function (param) { return ({
                        typeId: generate_method_id_1.generateMethodParamId(method, param),
                        typeName: getTypeName(param),
                        typing: "",
                    }); }));
                })
                    .flatten()
                    .keyBy("typeId")
                    .value();
                typings[Object.keys(typings)[0]].typing = allTypings;
                // console.log(JSON.stringify(typings, undefined, "  "))
                // throw new Error();
                return [2 /*return*/, typings];
        }
    });
}); };
var getFunctionSignature = function (method, typeDefs) {
    var mResult = method.result;
    var result = "RpcRequest<" + typeDefs[generate_method_id_1.generateMethodResultId(method, mResult)].typeName + ">";
    if (method.params.length === 0) {
        return "pub fn " + method.name + "(&mut self) -> " + result + ";";
    }
    var params = lodash_1.default.map(method.params, function (param) { return param.name + ": " + typeDefs[generate_method_id_1.generateMethodParamId(method, param)].typeName; }).join(", ");
    return "pub fn " + method.name + "(&mut self, " + params + ") -> " + result + ";";
};
var generator = {
    getFunctionSignature: getFunctionSignature,
    getMethodTypingsMap: getMethodTypingsMap,
};
exports.default = generator;
