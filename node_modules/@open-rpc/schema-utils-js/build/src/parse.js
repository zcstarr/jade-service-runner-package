"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var isUrl = require("is-url");
var json_schema_ref_parser_1 = __importDefault(require("json-schema-ref-parser"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var get_validation_errors_1 = require("./get-validation-errors");
var cwd = process.cwd();
var isJson = function (jsonString) {
    try {
        JSON.parse(jsonString);
        return true;
    }
    catch (e) {
        return false;
    }
};
var fetchUrlSchemaFile = function (schema) { return __awaiter(_this, void 0, void 0, function () {
    var response, e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 3, , 4]);
                return [4 /*yield*/, node_fetch_1.default(schema)];
            case 1:
                response = _a.sent();
                return [4 /*yield*/, response.json()];
            case 2: return [2 /*return*/, _a.sent()];
            case 3:
                e_1 = _a.sent();
                throw new Error("Unable to download openrpc.json file located at the url: " + schema);
            case 4: return [2 /*return*/];
        }
    });
}); };
var readSchemaFromFile = function (schema) { return __awaiter(_this, void 0, void 0, function () {
    var e_2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, fs_extra_1.readJson(schema)];
            case 1: return [2 /*return*/, _a.sent()];
            case 2:
                e_2 = _a.sent();
                if (e_2.message.includes("SyntaxError")) {
                    throw new Error("Failed to parse json in file " + schema);
                }
                else {
                    throw new Error("Unable to read openrpc.json file located at " + schema);
                }
                return [3 /*break*/, 3];
            case 3: return [2 /*return*/];
        }
    });
}); };
function parse(schema) {
    return __awaiter(this, void 0, void 0, function () {
        var parsedSchema, errors, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (schema === undefined) {
                        schema = cwd + "/openrpc.json";
                    }
                    if (!isJson(schema)) return [3 /*break*/, 1];
                    parsedSchema = JSON.parse(schema);
                    return [3 /*break*/, 5];
                case 1:
                    if (!isUrl(schema)) return [3 /*break*/, 3];
                    return [4 /*yield*/, fetchUrlSchemaFile(schema)];
                case 2:
                    parsedSchema = _a.sent();
                    return [3 /*break*/, 5];
                case 3: return [4 /*yield*/, readSchemaFromFile(schema)];
                case 4:
                    parsedSchema = _a.sent();
                    _a.label = 5;
                case 5:
                    errors = get_validation_errors_1.getValidationErrors(parsedSchema);
                    if (errors) {
                        throw new Error("Error Validating schema against meta-schema. \n " + JSON.stringify(errors, undefined, "  "));
                    }
                    _a.label = 6;
                case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, json_schema_ref_parser_1.default.dereference(parsedSchema)];
                case 7: return [2 /*return*/, _a.sent()];
                case 8:
                    e_3 = _a.sent();
                    throw new Error("The json schema provided cannot be dereferenced. Received Error: \n " + e_3.message);
                case 9: return [2 /*return*/];
            }
        });
    });
}
exports.parse = parse;
