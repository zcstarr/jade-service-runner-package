"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var meta_schema_1 = __importDefault(require("@open-rpc/meta-schema"));
var json_schema_draft_07_json_1 = __importDefault(require("../lib/json-schema-draft-07.json"));
var ajv_1 = __importDefault(require("ajv"));
/**
 * @ignore
 */
var ajv = new ajv_1.default();
ajv.addMetaSchema(json_schema_draft_07_json_1.default, "https://json-schema.org/draft-07/schema#");
/**
 * Provides an error interface for OpenRPC Document validation
 *
 * @category Errors
 *
 */
var OpenRPCDocumentValidationError = /** @class */ (function () {
    /**
     * @param errors The errors received by ajv.errors.
     */
    function OpenRPCDocumentValidationError(errors) {
        this.errors = errors;
        this.name = "OpenRPCDocumentDereferencingError";
        this.message = [
            "Error validating OpenRPC Document against @open-rpc/meta-schema.",
            "The errors found are as follows:",
            JSON.stringify(errors, undefined, "  "),
        ].join("\n");
    }
    return OpenRPCDocumentValidationError;
}());
exports.OpenRPCDocumentValidationError = OpenRPCDocumentValidationError;
/**
 * Returns any JSON Schema validation errors that are found with the OpenRPC document passed in.
 *
 * @param document OpenRPC Document to validate.
 *
 * @returns Either true if everything checks out, or a well formatted error.
 *
 * @example
 * ```typescript
 *
 * const { types } from "@open-rpc/meta-schema"
 * const { validateOpenRPCDocument } from "@open-rpc/schema-utils-js";
 * const badOpenRPCDocument = {};
 * const errors = validateOpenRPCDocument({});
 * if (errors) {
 *   // handle errors
 * }
 * ```
 *
 */
function validateOpenRPCDocument(document) {
    var result = ajv.validate(meta_schema_1.default, document);
    if (ajv.errors) {
        return new OpenRPCDocumentValidationError(ajv.errors);
    }
    else {
        return true;
    }
}
exports.default = validateOpenRPCDocument;
