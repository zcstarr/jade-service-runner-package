"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var method_call_validator_1 = require("./method-call-validator");
var getExampleSchema = function () { return ({
    info: { title: "123", version: "1" },
    methods: [
        {
            name: "foo",
            params: [{ name: "foofoo", schema: { type: "string" } }],
            result: { name: "foofoo", schema: { type: "integer" } },
        },
    ],
    openrpc: "1.0.0-rc1",
}); };
describe("MethodCallValidator", function () {
    it("can be instantiated", function () {
        var example = getExampleSchema();
        expect(new method_call_validator_1.MethodCallValidator(example)).toBeInstanceOf(method_call_validator_1.MethodCallValidator);
    });
    it("can validate a method call", function () {
        var example = getExampleSchema();
        var methodCallValidator = new method_call_validator_1.MethodCallValidator(example);
        var result = methodCallValidator.validate("foo", ["foobar"]);
        expect(result).toEqual([]);
    });
    it("can handle having params undefined", function () {
        var example = getExampleSchema();
        delete example.methods[0].params;
        var methodCallValidator = new method_call_validator_1.MethodCallValidator(example);
        var result = methodCallValidator.validate("foo", ["foobar"]);
        expect(result).toEqual([]);
    });
    it("can handle having schema undefined", function () {
        var example = getExampleSchema();
        delete example.methods[0].params[0].schema;
        var methodCallValidator = new method_call_validator_1.MethodCallValidator(example);
        var result = methodCallValidator.validate("foo", ["foobar"]);
        expect(result).toEqual([]);
    });
    it("returns array of errors if invalid", function () {
        var example = getExampleSchema();
        var methodCallValidator = new method_call_validator_1.MethodCallValidator(example);
        var result = methodCallValidator.validate("foo", [123]);
        expect(result.length).toBe(1);
        expect(result[0]).toBeInstanceOf(Error);
    });
});
