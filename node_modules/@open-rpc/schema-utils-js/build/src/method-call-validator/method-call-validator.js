"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ajv_1 = __importDefault(require("ajv"));
var _ = __importStar(require("lodash"));
var generate_method_id_1 = require("../generate-method-id");
var parameter_validation_error_1 = __importDefault(require("./parameter-validation-error"));
/**
 * A class to assist in validating method calls to an OpenRPC-based service. Generated Clients,
 * Servers, and many others may want to expose the interface provided by an OpenRPC document.
 * In doing so, use this class to easily create a re-useable validator for a particular method.
 */
var MethodCallValidator = /** @class */ (function () {
    /**
     * @param document The OpenRPC document containing the methods whose calls we want validated.
     *
     * @example
     * ```typescript
     *
     * import { petstore } from "@open-rpc/examples";
     * const petStoreMethodCallValidator = new MethodCallValidator(petstore);
     * // Go on and use it!
     * ```
     *
     */
    function MethodCallValidator(document) {
        var _this = this;
        this.document = document;
        this.ajvValidator = new ajv_1.default();
        document.methods.forEach(function (method) {
            var params = method.params;
            if (method.params === undefined) {
                return;
            }
            params.forEach(function (param, i) {
                if (param.schema === undefined) {
                    return;
                }
                _this.ajvValidator.addSchema(param.schema, generate_method_id_1.generateMethodParamId(method, param));
            });
        });
    }
    /**
     * Validates a particular method call against the OpenRPC definition for the method.
     *
     * @param methodName the name of the method in the OpenRPC Document.
     * @param params the param values that you want validated.
     *
     * @returns an array of parameter validation errors, or if there are none, an empty array.
     *
     * @example
     * ```typescript
     *
     * import { petstore } from "@open-rpc/examples";
     * const petStoreMethodCallValidator = new MethodCallValidator(petstore);
     * const errors = petStoreMethodCallValidator.validate("list_pets", []);
     * // errors.length === 0
     * ```
     *
     */
    MethodCallValidator.prototype.validate = function (methodName, params) {
        var _this = this;
        var method = _.find(this.document.methods, { name: methodName });
        if (method.params === undefined) {
            return [];
        }
        return _.chain(method.params)
            .map(function (param, index) {
            if (param.schema === undefined) {
                return;
            }
            var idForMethod = generate_method_id_1.generateMethodParamId(method, param);
            var isValid = _this.ajvValidator.validate(idForMethod, params[index]);
            var errors = _this.ajvValidator.errors;
            if (!isValid) {
                return new parameter_validation_error_1.default(index, param.schema, params[index], errors);
            }
        })
            .compact()
            .value();
    };
    return MethodCallValidator;
}());
exports.default = MethodCallValidator;
