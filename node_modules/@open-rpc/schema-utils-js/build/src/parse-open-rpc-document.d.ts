import { OpenRPC } from "@open-rpc/meta-schema";
/**
 * Provides an error interface for OpenRPC Document dereferencing problems
 *
 * @category Errors
 *
 */
export declare class OpenRPCDocumentDereferencingError implements Error {
    name: string;
    message: string;
    /**
     * @param e The error that originated from jsonSchemaRefParser
     */
    constructor(e: Error);
}
/**
 * Resolves an OpenRPC document from a variety of input types. The resolved OpenRPC document
 * will be dereferenced and validated against the [meta-schema](https://github.com/open-rpc/meta-schema).
 *
 * @param schema The OpenRPC document or a reference to one.
 *
 * If schema is an object, it will use this as the openrpc document literally.
 * If schema is a string, it may fall under 3 other categories:
 *   1. schema is an OpenRPC document as a json string.
 *   2. schema is a url that resolves to an OpenRPC document.
 *   3. schema is a file path, where the file at the path contains an OpenRPC document.
 *
 * @returns The same OpenRPC Document that was passed in, but with all $ref's dereferenced.
 *
 * @throws [[OpenRPCDocumentValidationError]]
 * @throws [[OpenRPCDocumentDereferencingError]]
 *
 * @example
 * ```typescript
 *
 * const { OpenRPC } from "@open-rpc/meta-schema"
 * const { parseOpenRPCDocument } from "@open-rpc/schema-utils-js";
 *
 * try {
 *   const fromUrl = await parseOpenRPCDocument("example.com/openrpc.json") as OpenRPC;
 *   const fromFile = await parseOpenRPCDocument("example.com/openrpc.json") as OpenRPC;
 *   const fromString = await parseOpenRPCDocument('{ "openrpc": "1.0.0", ... }') as OpenRPC;
 *   const fromCwd = await parseOpenRPCDocument() as types.OpenRPC; // default
 * } catch (e) {
 *   // handle validation errors
 * }
 * ```
 *
 */
export default function parseOpenRPCDocument(schema?: string | OpenRPC): Promise<OpenRPC>;
