"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_extra_1 = require("fs-extra");
var json_schema_ref_parser_1 = __importDefault(require("json-schema-ref-parser"));
var validate_open_rpc_document_1 = __importDefault(require("./validate-open-rpc-document"));
var isUrl = require("is-url");
var get_open_rpc_document_1 = require("./get-open-rpc-document");
/**
 * @ignore
 */
var cwd = process.cwd();
/**
 * @ignore
 */
var isJson = function (jsonString) {
    try {
        JSON.parse(jsonString);
        return true;
    }
    catch (e) {
        return false;
    }
};
/**
 * Provides an error interface for OpenRPC Document dereferencing problems
 *
 * @category Errors
 *
 */
var OpenRPCDocumentDereferencingError = /** @class */ (function () {
    /**
     * @param e The error that originated from jsonSchemaRefParser
     */
    function OpenRPCDocumentDereferencingError(e) {
        this.name = "OpenRPCDocumentDereferencingError";
        this.message = "The json schema provided cannot be dereferenced. Received Error: \n " + e.message;
    }
    return OpenRPCDocumentDereferencingError;
}());
exports.OpenRPCDocumentDereferencingError = OpenRPCDocumentDereferencingError;
/**
 * Resolves an OpenRPC document from a variety of input types. The resolved OpenRPC document
 * will be dereferenced and validated against the [meta-schema](https://github.com/open-rpc/meta-schema).
 *
 * @param schema The OpenRPC document or a reference to one.
 *
 * If schema is an object, it will use this as the openrpc document literally.
 * If schema is a string, it may fall under 3 other categories:
 *   1. schema is an OpenRPC document as a json string.
 *   2. schema is a url that resolves to an OpenRPC document.
 *   3. schema is a file path, where the file at the path contains an OpenRPC document.
 *
 * @returns The same OpenRPC Document that was passed in, but with all $ref's dereferenced.
 *
 * @throws [[OpenRPCDocumentValidationError]]
 * @throws [[OpenRPCDocumentDereferencingError]]
 *
 * @example
 * ```typescript
 *
 * const { OpenRPC } from "@open-rpc/meta-schema"
 * const { parseOpenRPCDocument } from "@open-rpc/schema-utils-js";
 *
 * try {
 *   const fromUrl = await parseOpenRPCDocument("example.com/openrpc.json") as OpenRPC;
 *   const fromFile = await parseOpenRPCDocument("example.com/openrpc.json") as OpenRPC;
 *   const fromString = await parseOpenRPCDocument('{ "openrpc": "1.0.0", ... }') as OpenRPC;
 *   const fromCwd = await parseOpenRPCDocument() as types.OpenRPC; // default
 * } catch (e) {
 *   // handle validation errors
 * }
 * ```
 *
 */
function parseOpenRPCDocument(schema) {
    if (schema === void 0) { schema = "./openrpc.json"; }
    return __awaiter(this, void 0, void 0, function () {
        var parsedSchema, isCorrectPath, isValid, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(typeof schema !== "string")) return [3 /*break*/, 1];
                    parsedSchema = schema;
                    return [3 /*break*/, 7];
                case 1:
                    if (!isJson(schema)) return [3 /*break*/, 2];
                    parsedSchema = JSON.parse(schema);
                    return [3 /*break*/, 7];
                case 2:
                    if (!isUrl(schema)) return [3 /*break*/, 4];
                    return [4 /*yield*/, get_open_rpc_document_1.fetchUrlSchemaFile(schema)];
                case 3:
                    parsedSchema = _a.sent();
                    return [3 /*break*/, 7];
                case 4: return [4 /*yield*/, fs_extra_1.pathExists(schema)];
                case 5:
                    isCorrectPath = _a.sent();
                    return [4 /*yield*/, get_open_rpc_document_1.readSchemaFromFile(schema)];
                case 6:
                    parsedSchema = _a.sent();
                    _a.label = 7;
                case 7:
                    isValid = validate_open_rpc_document_1.default(parsedSchema);
                    if (!(isValid === true)) return [3 /*break*/, 12];
                    _a.label = 8;
                case 8:
                    _a.trys.push([8, 10, , 11]);
                    return [4 /*yield*/, json_schema_ref_parser_1.default.dereference(parsedSchema)];
                case 9: return [2 /*return*/, _a.sent()];
                case 10:
                    e_1 = _a.sent();
                    throw new OpenRPCDocumentDereferencingError(e_1);
                case 11: return [3 /*break*/, 13];
                case 12: throw isValid;
                case 13: return [2 /*return*/];
            }
        });
    });
}
exports.default = parseOpenRPCDocument;
