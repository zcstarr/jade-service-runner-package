"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("fs-extra", function () { return ({
    readJson: jest.fn(),
}); });
var _fs = __importStar(require("fs-extra"));
var parse_1 = require("./parse");
var fs = _fs;
var workingSchema = {
    info: {
        title: "foo",
        version: "1",
    },
    methods: [],
    openrpc: "1.0.0-rc1",
};
describe("get-schema", function () {
    beforeEach(function () {
        fs.readJson.mockResolvedValue(workingSchema);
    });
    it("defaults to looking for openrc.json in cwd", function () { return __awaiter(_this, void 0, void 0, function () {
        var schema;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    return [4 /*yield*/, parse_1.parse()];
                case 1:
                    schema = _a.sent();
                    expect(fs.readJson).toHaveBeenCalledWith(process.cwd() + "/openrpc.json");
                    return [2 /*return*/];
            }
        });
    }); });
    it("handles custom file path", function () { return __awaiter(_this, void 0, void 0, function () {
        var schema;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(1);
                    return [4 /*yield*/, parse_1.parse("./node_modules/@open-rpc/examples/service-descriptions/petstore.json")];
                case 1:
                    schema = _a.sent();
                    expect(schema.methods).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it("handles urls", function () { return __awaiter(_this, void 0, void 0, function () {
        var url, schema;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    url = "https://raw.githubusercontent.com/open-rpc/examples/master/service-descriptions/petstore-openrpc.json";
                    return [4 /*yield*/, parse_1.parse(url)];
                case 1:
                    schema = _a.sent();
                    expect(schema.methods).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
    it("handles json as string", function () { return __awaiter(_this, void 0, void 0, function () {
        var schema;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, parse_1.parse(JSON.stringify(workingSchema))];
                case 1:
                    schema = _a.sent();
                    expect(schema.methods).toBeDefined();
                    return [2 /*return*/];
            }
        });
    }); });
    describe("errors", function () {
        it("rejects when unable to find file via default", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockRejectedValue(new Error("cannot compute error"));
            return expect(parse_1.parse()).rejects.toThrow("Unable to read");
        });
        it("rejects when unable to find file via custom path", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockRejectedValue(new Error("cannot compute error"));
            return expect(parse_1.parse("./not/a/real/path.json")).rejects.toThrow("Unable to read");
        });
        it("rejects when the url doesnt resolve to a schema", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockRejectedValue(new Error("cannot compute error"));
            return expect(parse_1.parse("https://google.com")).rejects.toThrow("Unable to download");
        });
        it("rejects when the schema cannot be dereferenced", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockResolvedValue(__assign({}, workingSchema, { methods: [
                    {
                        name: "foo",
                        params: [
                            {
                                name: "bar",
                                schema: { $ref: "#/components/bar" },
                            },
                        ],
                        result: {
                            name: "baz",
                            schema: { $ref: "#/noponents/bazaaaooow" },
                        },
                    },
                ] }));
            return expect(parse_1.parse()).rejects.toThrow("The json schema provided cannot be dereferenced");
        });
        it("rejects when the schema is invalid", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockResolvedValue(__assign({}, workingSchema, { methods: [
                    {
                        name: "foo",
                        params: [
                            {
                                name: "bar",
                                schema: { $ref: "#/components/bar" },
                            },
                        ],
                        result: {
                            name: "baz",
                            schema: { $ref: "#/noponents/bazaaaooow" },
                        },
                        zfloobars: 123,
                    },
                ] }));
            return expect(parse_1.parse()).rejects.toThrow(/Error Validating schema against meta-schema/);
        });
        it("rejects when the json provided is invalid from file", function () {
            expect.assertions(1);
            fs.readJson.mockClear();
            fs.readJson.mockRejectedValue(new Error("SyntaxError: super duper bad one"));
            var file = "./node_modules/@open-rpc/examples/service-descriptions/petstore-openrpc.json";
            return expect(parse_1.parse(file)).rejects.toThrow();
        });
    });
});
