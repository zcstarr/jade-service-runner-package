"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var generate_method_id_1 = require("./generate-method-id");
describe("methodParamId", function () {
    it("returns an id for params", function () {
        var method = {
            name: "foo",
            params: [{ name: "bar" }],
            result: { name: "baz" },
        };
        var result = generate_method_id_1.generateMethodParamId(method, method.params[0]);
        expect(result).toBe("foo/0");
    });
    it("index by name when the method paramStructure is by-name", function () {
        var method = {
            name: "foo",
            paramStructure: "by-name",
            params: [{ name: "bar" }],
            result: { name: "baz" },
        };
        expect(generate_method_id_1.generateMethodParamId(method, { name: "bar" })).toBe("foo/bar");
    });
    describe("throws when the content descriptor is not found in the params", function () {
        it("by-position", function () {
            var method = {
                name: "foo",
                params: [{ name: "u will never get dis" }],
                result: { name: "baz" },
            };
            expect(function () { return generate_method_id_1.generateMethodParamId(method, { name: "123" }); })
                .toThrow("Content Descriptor not found in method.");
        });
        it("by-name", function () {
            var method = {
                name: "foo",
                paramStructure: "by-name",
                params: [{ name: "bar" }],
                result: { name: "baz" },
            };
            expect(function () { return generate_method_id_1.generateMethodParamId(method, { name: "123" }); }).toThrow();
        });
    });
});
describe("methodResultId", function () {
    it("returns an id for result", function () {
        var method = {
            name: "foo",
            params: [{ name: "bar" }],
            result: { name: "baz" },
        };
        var result = generate_method_id_1.generateMethodResultId(method, method.result);
        expect(result).toBe("foo/result");
    });
});
